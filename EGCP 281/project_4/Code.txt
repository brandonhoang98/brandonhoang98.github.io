Glitch Code



library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity p1 is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           C : in STD_LOGIC;
           notG: out STD_LOGIC;
           andG: out STD_LOGIC;
           andG2: out STD_LOGIC;
           Y : out STD_LOGIC);
end p1;
    
architecture Behavioral of p1 is
    signal a1, b1, c1: STD_LOGIC;
begin
    notG <= (not A) after 1ns;
    a1 <=  (not A) after 1ns;
    andG <= a1 and B after 1ns;
    b1 <= a1 and B after 1ns;
    andG2 <= A and C after 1ns;
    c1 <= A and C after 1ns;
   Y <= b1 or c1 after 1ns;

end Behavioral;


-------------------------------------------------------------------------------------------------
Fixed with Delay Code

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity p1 is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           C : in STD_LOGIC;
           notG: out STD_LOGIC;
           andG: out STD_LOGIC;
           andG2: out STD_LOGIC;
           Y : out STD_LOGIC);
end p1;
    
architecture Behavioral of p1 is
    signal a1, b1, c1: STD_LOGIC;
begin
    notG <= (not A) after 1ns;
    a1 <=  (not A) after 1ns;
    andG <= a1 and B after 1ns;
    b1 <= a1 and B after 1ns;
    andG2 <= A and C after 1ns;
    c1 <= A and C after 1ns;
   Y <= b1 or c1 after 2ns;

end Behavioral;

----------------------------------------------------------------------------------------------------
Fixed with Redunant Term

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity p1 is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           C : in STD_LOGIC;
           notG: out STD_LOGIC;
           andG: out STD_LOGIC;
           andG2: out STD_LOGIC;
           andG3: out STD_LOGIC;
           Y : out STD_LOGIC);
end p1;
    
architecture Behavioral of p1 is
    signal a1, b1, c1, d1: STD_LOGIC;
begin
    notG <= (not A) after 1ns;
    a1 <=  (not A) after 1ns;
    andG <= a1 and B after 1ns;
    b1 <= a1 and B after 1ns;
    andG2 <= A and C after 1ns;
    c1 <= A and C after 1ns;
    andG3 <= B and C after 1ns;
    d1 <= B and C after 1ns;
   Y <= b1 or c1 or d1 after 1ns;

end Behavioral;

-------------------------------------------------------------------------------------------------------
POS with Glitch

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity p1 is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           C : in STD_LOGIC;
           notG: out STD_LOGIC;
           orG: out STD_LOGIC;
           orG2: out STD_LOGIC;
           orG3: out STD_LOGIC;
           Y : out STD_LOGIC);
end p1;
    
architecture Behavioral of p1 is
    signal a1, b1, c1, d1: STD_LOGIC;
begin
    notG <= (not A) after 1ns;
    a1 <=  (not A) after 1ns;
    orG <= A or B after 1ns;
    b1 <= A or B after 1ns;
    orG2 <= a1 or C after 1ns;
    c1 <= a1 or C after 1ns;
    orG3 <= B or C after 1ns;
   -- d1 <= B or C after 1ns;
   Y <= b1 and c1 after 1ns;

end Behavioral;

-------------------------------------------------------------------------------------------------------
POS redundant fix


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity p1 is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           C : in STD_LOGIC;
           notG: out STD_LOGIC;
           orG: out STD_LOGIC;
           orG2: out STD_LOGIC;
           orG3: out STD_LOGIC;
           Y : out STD_LOGIC);
end p1;
    
architecture Behavioral of p1 is
    signal a1, b1, c1, d1: STD_LOGIC;
begin
    notG <= (not A) after 1ns;
    a1 <=  (not A) after 1ns;
    orG <= A or B after 1ns;
    b1 <= A or B after 1ns;
    orG2 <= a1 or C after 1ns;
    c1 <= a1 or C after 1ns;
    orG3 <= B or C after 1ns;
    d1 <= B or C after 1ns;
   Y <= b1 and c1 and d1 after 1ns;

end Behavioral;

