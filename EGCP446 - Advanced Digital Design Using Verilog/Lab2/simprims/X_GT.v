// $Header: /devl/xcs/repo/env/Databases/CAEInterfaces/versclibs/data/X_GT.v,v 1.25 2003/05/22 00:48:01 wloo Exp $
//**************************************************************
//  Copyright (c) 2002 Xilinx Inc.  All Rights Reserved
//  File Name    : X_GT.v
//  Module Name  : X_GT
//  Function     : Gigabit Transceiver
//  Site         : GT
//  Spec Version : 1.2
//  Generated by : write_verilog
//**************************************************************

`timescale 1 ps / 1 ps 

module X_GT (
	CHBONDDONE,
	CHBONDO,
	CONFIGOUT,
	RXBUFSTATUS,
	RXCHARISCOMMA,
	RXCHARISK,
	RXCHECKINGCRC,
	RXCLKCORCNT,
	RXCOMMADET,
	RXCRCERR,
	RXDATA,
	RXDISPERR,
	RXLOSSOFSYNC,
	RXNOTINTABLE,
	RXREALIGN,
	RXRECCLK,
	RXRUNDISP,
	TXBUFERR,
	TXKERR,
	TXN,
	TXP,
	TXRUNDISP,

	BREFCLK,
	BREFCLK2,
	CHBONDI,
	CONFIGENABLE,
	CONFIGIN,
	ENCHANSYNC,
	ENMCOMMAALIGN,
	ENPCOMMAALIGN,
	GSR,
	LOOPBACK,
	POWERDOWN,
	REFCLK,
	REFCLK2,
	REFCLKSEL,
	RXN,
	RXP,
	RXPOLARITY,
	RXRESET,
	RXUSRCLK,
	RXUSRCLK2,
	TXBYPASS8B10B,
	TXCHARDISPMODE,
	TXCHARDISPVAL,
	TXCHARISK,
	TXDATA,
	TXFORCECRCERR,
	TXINHIBIT,
	TXPOLARITY,
	TXRESET,
	TXUSRCLK,
	TXUSRCLK2
);

parameter ALIGN_COMMA_MSB = "FALSE";
parameter CHAN_BOND_LIMIT = 16;
parameter CHAN_BOND_MODE = "OFF";
parameter CHAN_BOND_OFFSET = 8;
parameter CHAN_BOND_ONE_SHOT = "FALSE";
parameter CHAN_BOND_SEQ_1_1 = 11'b00000000000;
parameter CHAN_BOND_SEQ_1_2 = 11'b00000000000;
parameter CHAN_BOND_SEQ_1_3 = 11'b00000000000;
parameter CHAN_BOND_SEQ_1_4 = 11'b00000000000;
parameter CHAN_BOND_SEQ_2_1 = 11'b00000000000;
parameter CHAN_BOND_SEQ_2_2 = 11'b00000000000;
parameter CHAN_BOND_SEQ_2_3 = 11'b00000000000;
parameter CHAN_BOND_SEQ_2_4 = 11'b00000000000;
parameter CHAN_BOND_SEQ_2_USE = "FALSE";
parameter CHAN_BOND_SEQ_LEN = 1;
parameter CHAN_BOND_WAIT = 8;
parameter CLK_COR_INSERT_IDLE_FLAG = "FALSE";
parameter CLK_COR_KEEP_IDLE = "FALSE";
parameter CLK_COR_REPEAT_WAIT = 1;
parameter CLK_COR_SEQ_1_1 = 11'b00000000000;
parameter CLK_COR_SEQ_1_2 = 11'b00000000000;
parameter CLK_COR_SEQ_1_3 = 11'b00000000000;
parameter CLK_COR_SEQ_1_4 = 11'b00000000000;
parameter CLK_COR_SEQ_2_1 = 11'b00000000000;
parameter CLK_COR_SEQ_2_2 = 11'b00000000000;
parameter CLK_COR_SEQ_2_3 = 11'b00000000000;
parameter CLK_COR_SEQ_2_4 = 11'b00000000000;
parameter CLK_COR_SEQ_2_USE = "FALSE";
parameter CLK_COR_SEQ_LEN = 1;
parameter CLK_CORRECT_USE = "TRUE";
parameter COMMA_10B_MASK = 10'b1111111000;
parameter CRC_END_OF_PKT = "K29_7";
parameter CRC_FORMAT = "USER_MODE";
parameter CRC_START_OF_PKT = "K27_7";
parameter DEC_MCOMMA_DETECT = "TRUE";
parameter DEC_PCOMMA_DETECT = "TRUE";
parameter DEC_VALID_COMMA_ONLY = "TRUE";
parameter MCOMMA_10B_VALUE = 10'b1100000000;
parameter MCOMMA_DETECT = "TRUE";
parameter PCOMMA_10B_VALUE = 10'b0011111000;
parameter PCOMMA_DETECT = "TRUE";
parameter REF_CLK_V_SEL = 0;
parameter RX_BUFFER_USE = "TRUE";
parameter RX_CRC_USE = "FALSE";
parameter RX_DATA_WIDTH = 2;
parameter RX_DECODE_USE = "TRUE";
parameter RX_LOS_INVALID_INCR = 1;
parameter RX_LOS_THRESHOLD = 4;
parameter RX_LOSS_OF_SYNC_FSM = "TRUE";
parameter SERDES_10B = "FALSE";
parameter TERMINATION_IMP = 50;
parameter TX_BUFFER_USE = "TRUE";
parameter TX_CRC_FORCE_VALUE = 8'b11010110;
parameter TX_CRC_USE = "FALSE";
parameter TX_DATA_WIDTH = 2;
parameter TX_DIFF_CTRL = 500;
parameter TX_PREEMPHASIS = 0;

output CHBONDDONE;
output [3:0] CHBONDO;
output CONFIGOUT;
output [1:0] RXBUFSTATUS;
output [3:0] RXCHARISCOMMA;
output [3:0] RXCHARISK;
output RXCHECKINGCRC;
output [2:0] RXCLKCORCNT;
output RXCOMMADET;
output RXCRCERR;
output [31:0] RXDATA;
output [3:0] RXDISPERR;
output [1:0] RXLOSSOFSYNC;
output [3:0] RXNOTINTABLE;
output RXREALIGN;
output RXRECCLK;
output [3:0] RXRUNDISP;
output TXBUFERR;
output [3:0] TXKERR;
output TXN;
output TXP;
output [3:0] TXRUNDISP;

input BREFCLK;
input BREFCLK2;
input [3:0] CHBONDI;
input CONFIGENABLE;
input CONFIGIN;
input ENCHANSYNC;
input ENMCOMMAALIGN;
input ENPCOMMAALIGN;
input GSR;
input [1:0] LOOPBACK;
input POWERDOWN;
input REFCLK;
input REFCLK2;
input REFCLKSEL;
input RXN;
input RXP;
input RXPOLARITY;
input RXRESET;
input RXUSRCLK;
input RXUSRCLK2;
input [3:0] TXBYPASS8B10B;
input [3:0] TXCHARDISPMODE;
input [3:0] TXCHARDISPVAL;
input [3:0] TXCHARISK;
input [31:0] TXDATA;
input TXFORCECRCERR;
input TXINHIBIT;
input TXPOLARITY;
input TXRESET;
input TXUSRCLK;
input TXUSRCLK2;

reg ALIGN_COMMA_MSB_BINARY;
reg [4:0] CHAN_BOND_LIMIT_BINARY;
reg [1:0] CHAN_BOND_MODE_BINARY;
reg [3:0] CHAN_BOND_OFFSET_BINARY;
reg CHAN_BOND_ONE_SHOT_BINARY;
reg CHAN_BOND_SEQ_2_USE_BINARY;
reg [1:0] CHAN_BOND_SEQ_LEN_BINARY;
reg [3:0] CHAN_BOND_WAIT_BINARY;
reg CLK_COR_INSERT_IDLE_FLAG_BINARY;
reg CLK_COR_KEEP_IDLE_BINARY;
reg [4:0] CLK_COR_REPEAT_WAIT_BINARY;
reg CLK_COR_SEQ_2_USE_BINARY;
reg [1:0] CLK_COR_SEQ_LEN_BINARY;
reg CLK_CORRECT_USE_BINARY;
reg [7:0] CRC_END_OF_PKT_BINARY;
reg [1:0] CRC_FORMAT_BINARY;
reg [7:0] CRC_START_OF_PKT_BINARY;
reg DEC_MCOMMA_DETECT_BINARY;
reg DEC_PCOMMA_DETECT_BINARY;
reg DEC_VALID_COMMA_ONLY_BINARY;
reg MCOMMA_DETECT_BINARY;
reg PCOMMA_DETECT_BINARY;
reg REF_CLK_V_SEL_BINARY;
reg RX_BUFFER_USE_BINARY;
reg RX_CRC_USE_BINARY;
reg [1:0] RX_DATA_WIDTH_BINARY;
reg RX_DECODE_USE_BINARY;
reg [2:0] RX_LOS_INVALID_INCR_BINARY;
reg [2:0] RX_LOS_THRESHOLD_BINARY;
reg RX_LOSS_OF_SYNC_FSM_BINARY;
reg SERDES_10B_BINARY;
reg TERMINATION_IMP_BINARY;
reg TX_BUFFER_USE_BINARY;
reg TX_CRC_USE_BINARY;
reg [1:0] TX_DATA_WIDTH_BINARY;
reg [2:0] TX_DIFF_CTRL_BINARY;
reg [1:0] TX_PREEMPHASIS_BINARY;

reg notifier;

wire CHBONDDONE_OUT;
wire [3:0] CHBONDO_OUT;
wire CONFIGOUT_OUT;
wire [1:0] RXBUFSTATUS_OUT;
wire [3:0] RXCHARISCOMMA_OUT;
wire [3:0] RXCHARISK_OUT;
wire RXCHECKINGCRC_OUT;
wire [2:0] RXCLKCORCNT_OUT;
wire RXCOMMADET_OUT;
wire RXCRCERR_OUT;
wire [31:0] RXDATA_OUT;
wire [3:0] RXDISPERR_OUT;
wire [1:0] RXLOSSOFSYNC_OUT;
wire [3:0] RXNOTINTABLE_OUT;
wire RXREALIGN_OUT;
wire RXRECCLK_OUT;
wire [3:0] RXRUNDISP_OUT;
wire TXBUFERR_OUT;
wire [3:0] TXKERR_OUT;
// wire TXN_OUT;
// wire TXP_OUT;
wire [3:0] TXRUNDISP_OUT;
wire BREFCLK_IN;
wire BREFCLK2_IN;
wire [3:0] CHBONDI_IN;
wire CONFIGENABLE_IN;
wire CONFIGIN_IN;
wire ENCHANSYNC_IN;
wire ENMCOMMAALIGN_IN;
wire ENPCOMMAALIGN_IN;
wire [1:0] LOOPBACK_IN;
wire POWERDOWN_IN;
wire REFCLK_IN;
wire REFCLK2_IN;
wire REFCLKSEL_IN;
wire RXN_IN;
wire RXP_IN;
wire RXPOLARITY_IN;
wire RXRESET_IN;
wire RXUSRCLK_IN;
wire RXUSRCLK2_IN;
wire [3:0] TXBYPASS8B10B_IN;
wire [3:0] TXCHARDISPMODE_IN;
wire [3:0] TXCHARDISPVAL_IN;
wire [3:0] TXCHARISK_IN;
wire [31:0] TXDATA_IN;
wire TXFORCECRCERR_IN;
wire TXINHIBIT_IN;
wire TXPOLARITY_IN;
wire TXRESET_IN;
wire TXUSRCLK_IN;
wire TXUSRCLK2_IN;

initial begin
	case (ALIGN_COMMA_MSB)
		"FALSE" : ALIGN_COMMA_MSB_BINARY <= 0;
		"TRUE" : ALIGN_COMMA_MSB_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute ALIGN_COMMA_MSB on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", ALIGN_COMMA_MSB);
			$finish;
		end
	endcase

	case (CHAN_BOND_LIMIT)
		1 : CHAN_BOND_LIMIT_BINARY <= 5'b00001;
		2 : CHAN_BOND_LIMIT_BINARY <= 5'b00010;
		3 : CHAN_BOND_LIMIT_BINARY <= 5'b00011;
		4 : CHAN_BOND_LIMIT_BINARY <= 5'b00100;
		5 : CHAN_BOND_LIMIT_BINARY <= 5'b00101;
		6 : CHAN_BOND_LIMIT_BINARY <= 5'b00110;
		7 : CHAN_BOND_LIMIT_BINARY <= 5'b00111;
		8 : CHAN_BOND_LIMIT_BINARY <= 5'b01000;
		9 : CHAN_BOND_LIMIT_BINARY <= 5'b01001;
		10 : CHAN_BOND_LIMIT_BINARY <= 5'b01010;
		11 : CHAN_BOND_LIMIT_BINARY <= 5'b01011;
		12 : CHAN_BOND_LIMIT_BINARY <= 5'b01100;
		13 : CHAN_BOND_LIMIT_BINARY <= 5'b01101;
		14 : CHAN_BOND_LIMIT_BINARY <= 5'b01110;
		15 : CHAN_BOND_LIMIT_BINARY <= 5'b01111;
		16 : CHAN_BOND_LIMIT_BINARY <= 5'b10000;
		17 : CHAN_BOND_LIMIT_BINARY <= 5'b10001;
		18 : CHAN_BOND_LIMIT_BINARY <= 5'b10010;
		19 : CHAN_BOND_LIMIT_BINARY <= 5'b10011;
		20 : CHAN_BOND_LIMIT_BINARY <= 5'b10100;
		21 : CHAN_BOND_LIMIT_BINARY <= 5'b10101;
		22 : CHAN_BOND_LIMIT_BINARY <= 5'b10110;
		23 : CHAN_BOND_LIMIT_BINARY <= 5'b10111;
		24 : CHAN_BOND_LIMIT_BINARY <= 5'b11000;
		25 : CHAN_BOND_LIMIT_BINARY <= 5'b11001;
		26 : CHAN_BOND_LIMIT_BINARY <= 5'b11010;
		27 : CHAN_BOND_LIMIT_BINARY <= 5'b11011;
		28 : CHAN_BOND_LIMIT_BINARY <= 5'b11100;
		29 : CHAN_BOND_LIMIT_BINARY <= 5'b11101;
		30 : CHAN_BOND_LIMIT_BINARY <= 5'b11110;
		31 : CHAN_BOND_LIMIT_BINARY <= 5'b11111;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_LIMIT on X_GT instance %m is set to %d.  Legal values for this attribute are 1 to 31.", CHAN_BOND_LIMIT);
			$finish;
		end
	endcase

	case (CHAN_BOND_MODE)
		"OFF" : CHAN_BOND_MODE_BINARY <= 2'b00;
		"MASTER" : CHAN_BOND_MODE_BINARY <= 2'b01;
		"SLAVE_1_HOP" : CHAN_BOND_MODE_BINARY <= 2'b10;
		"SLAVE_2_HOPS" : CHAN_BOND_MODE_BINARY <= 2'b11;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_MODE on X_GT instance %m is set to %s.  Legal values for this attribute are OFF, MASTER, SLAVE_1_HOP or SLAVE_2_HOPS.", CHAN_BOND_MODE);
			$finish;
		end
	endcase

	case (CHAN_BOND_OFFSET)
		0 : CHAN_BOND_OFFSET_BINARY <= 4'b0000;
		1 : CHAN_BOND_OFFSET_BINARY <= 4'b0001;
		2 : CHAN_BOND_OFFSET_BINARY <= 4'b0010;
		3 : CHAN_BOND_OFFSET_BINARY <= 4'b0011;
		4 : CHAN_BOND_OFFSET_BINARY <= 4'b0100;
		5 : CHAN_BOND_OFFSET_BINARY <= 4'b0101;
		6 : CHAN_BOND_OFFSET_BINARY <= 4'b0110;
		7 : CHAN_BOND_OFFSET_BINARY <= 4'b0111;
		8 : CHAN_BOND_OFFSET_BINARY <= 4'b1000;
		9 : CHAN_BOND_OFFSET_BINARY <= 4'b1001;
		10 : CHAN_BOND_OFFSET_BINARY <= 4'b1010;
		11 : CHAN_BOND_OFFSET_BINARY <= 4'b1011;
		12 : CHAN_BOND_OFFSET_BINARY <= 4'b1100;
		13 : CHAN_BOND_OFFSET_BINARY <= 4'b1101;
		14 : CHAN_BOND_OFFSET_BINARY <= 4'b1110;
		15 : CHAN_BOND_OFFSET_BINARY <= 4'b1111;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_OFFSET on X_GT instance %m is set to %d.  Legal values for this attribute are 0 to 15.", CHAN_BOND_OFFSET);
			$finish;
		end
	endcase

	case (CHAN_BOND_ONE_SHOT)
		"FALSE" : CHAN_BOND_ONE_SHOT_BINARY <= 0;
		"TRUE" : CHAN_BOND_ONE_SHOT_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_ONE_SHOT on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CHAN_BOND_ONE_SHOT);
			$finish;
		end
	endcase

	case (CHAN_BOND_SEQ_2_USE)
		"FALSE" : CHAN_BOND_SEQ_2_USE_BINARY <= 0;
		"TRUE" : CHAN_BOND_SEQ_2_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_SEQ_2_USE on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CHAN_BOND_SEQ_2_USE);
			$finish;
		end
	endcase

	case (CHAN_BOND_SEQ_LEN)
		1 : CHAN_BOND_SEQ_LEN_BINARY <= 2'b01;
		2 : CHAN_BOND_SEQ_LEN_BINARY <= 2'b10;
		3 : CHAN_BOND_SEQ_LEN_BINARY <= 2'b11;
		4 : CHAN_BOND_SEQ_LEN_BINARY <= 2'b00;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_SEQ_LEN on X_GT instance %m is set to %d.  Legal values for this attribute are 1 to 4.", CHAN_BOND_SEQ_LEN);
			$finish;
		end
	endcase

	case (CHAN_BOND_WAIT)
		1 : CHAN_BOND_WAIT_BINARY <= 4'b0001;
		2 : CHAN_BOND_WAIT_BINARY <= 4'b0010;
		3 : CHAN_BOND_WAIT_BINARY <= 4'b0011;
		4 : CHAN_BOND_WAIT_BINARY <= 4'b0100;
		5 : CHAN_BOND_WAIT_BINARY <= 4'b0101;
		6 : CHAN_BOND_WAIT_BINARY <= 4'b0110;
		7 : CHAN_BOND_WAIT_BINARY <= 4'b0111;
		8 : CHAN_BOND_WAIT_BINARY <= 4'b1000;
		9 : CHAN_BOND_WAIT_BINARY <= 4'b1001;
		10 : CHAN_BOND_WAIT_BINARY <= 4'b1010;
		11 : CHAN_BOND_WAIT_BINARY <= 4'b1011;
		12 : CHAN_BOND_WAIT_BINARY <= 4'b1100;
		13 : CHAN_BOND_WAIT_BINARY <= 4'b1101;
		14 : CHAN_BOND_WAIT_BINARY <= 4'b1110;
		15 : CHAN_BOND_WAIT_BINARY <= 4'b1111;
		default : begin
			$display("Attribute Syntax Error : The Attribute CHAN_BOND_WAIT on X_GT instance %m is set to %d.  Legal values for this attribute are 1 to 15.", CHAN_BOND_WAIT);
			$finish;
		end
	endcase

	case (CLK_COR_INSERT_IDLE_FLAG)
		"FALSE" : CLK_COR_INSERT_IDLE_FLAG_BINARY <= 0;
		"TRUE" : CLK_COR_INSERT_IDLE_FLAG_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_COR_INSERT_IDLE_FLAG on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CLK_COR_INSERT_IDLE_FLAG);
			$finish;
		end
	endcase

	case (CLK_COR_KEEP_IDLE)
		"FALSE" : CLK_COR_KEEP_IDLE_BINARY <= 0;
		"TRUE" : CLK_COR_KEEP_IDLE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_COR_KEEP_IDLE on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CLK_COR_KEEP_IDLE);
			$finish;
		end
	endcase

	case (CLK_COR_REPEAT_WAIT)
		0 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b00000;
		1 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b00001;
		2 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b00010;
		3 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b00011;
		4 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b00100;
		5 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b00101;
		6 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b00110;
		7 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b00111;
		8 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b01000;
		9 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b01001;
		10 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b01010;
		11 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b01011;
		12 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b01100;
		13 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b01101;
		14 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b01110;
		15 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b01111;
		16 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b10000;
		17 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b10001;
		18 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b10010;
		19 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b10011;
		20 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b10100;
		21 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b10101;
		22 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b10110;
		23 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b10111;
		24 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b11000;
		25 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b11001;
		26 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b11010;
		27 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b11011;
		28 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b11100;
		29 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b11101;
		30 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b11110;
		31 : CLK_COR_REPEAT_WAIT_BINARY <= 5'b11111;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_COR_REPEAT_WAIT on X_GT instance %m is set to %d.  Legal values for this attribute are 0 to 31.", CLK_COR_REPEAT_WAIT);
			$finish;
		end
	endcase

	case (CLK_COR_SEQ_2_USE)
		"FALSE" : CLK_COR_SEQ_2_USE_BINARY <= 0;
		"TRUE" : CLK_COR_SEQ_2_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_COR_SEQ_2_USE on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CLK_COR_SEQ_2_USE);
			$finish;
		end
	endcase

	case (CLK_COR_SEQ_LEN)
		1 : CLK_COR_SEQ_LEN_BINARY <= 2'b01;
		2 : CLK_COR_SEQ_LEN_BINARY <= 2'b10;
		3 : CLK_COR_SEQ_LEN_BINARY <= 2'b11;
		4 : CLK_COR_SEQ_LEN_BINARY <= 2'b00;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_COR_SEQ_LEN on X_GT instance %m is set to %d.  Legal values for this attribute are 1 to 4.", CLK_COR_SEQ_LEN);
			$finish;
		end
	endcase

	case (CLK_CORRECT_USE)
		"FALSE" : CLK_CORRECT_USE_BINARY <= 0;
		"TRUE" : CLK_CORRECT_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute CLK_CORRECT_USE on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", CLK_CORRECT_USE);
			$finish;
		end
	endcase

	case (CRC_END_OF_PKT)
		"K28_0" : CRC_END_OF_PKT_BINARY <= 8'b00011100;
		"K28_1" : CRC_END_OF_PKT_BINARY <= 8'b00111100;
		"K28_2" : CRC_END_OF_PKT_BINARY <= 8'b01011100;
		"K28_3" : CRC_END_OF_PKT_BINARY <= 8'b01111100;
		"K28_4" : CRC_END_OF_PKT_BINARY <= 8'b10011100;
		"K28_5" : CRC_END_OF_PKT_BINARY <= 8'b10111100;
		"K28_6" : CRC_END_OF_PKT_BINARY <= 8'b11011100;
		"K28_7" : CRC_END_OF_PKT_BINARY <= 8'b11111100;
		"K23_7" : CRC_END_OF_PKT_BINARY <= 8'b11110111;
		"K27_7" : CRC_END_OF_PKT_BINARY <= 8'b11111011;
		"K29_7" : CRC_END_OF_PKT_BINARY <= 8'b11111101;
		"K30_7" : CRC_END_OF_PKT_BINARY <= 8'b11111110;
		default : begin
			$display("Attribute Syntax Error : The Attribute CRC_END_OF_PKT on X_GT instance %m is set to %s.  Legal values for this attribute are K28_0, K28_1, K28_2, K28_3, K28_4, K28_5, K28_6, K28_7, K23_7, K27_7, K29_7 or K30_7.", CRC_END_OF_PKT);
			$finish;
		end
	endcase

	case (CRC_FORMAT)
		"USER_MODE" : CRC_FORMAT_BINARY <= 2'b00;
		"ETHERNET" : CRC_FORMAT_BINARY <= 2'b01;
		"INFINIBAND" : CRC_FORMAT_BINARY <= 2'b10;
		"FIBRE_CHAN" : CRC_FORMAT_BINARY <= 2'b11;
		default : begin
			$display("Attribute Syntax Error : The Attribute CRC_FORMAT on X_GT instance %m is set to %s.  Legal values for this attribute are USER_MODE, ETHERNET, INFINIBAND or FIBRE_CHAN.", CRC_FORMAT);
			$finish;
		end
	endcase

	case (CRC_START_OF_PKT)
		"K28_0" : CRC_START_OF_PKT_BINARY <= 8'b00011100;
		"K28_1" : CRC_START_OF_PKT_BINARY <= 8'b00111100;
		"K28_2" : CRC_START_OF_PKT_BINARY <= 8'b01011100;
		"K28_3" : CRC_START_OF_PKT_BINARY <= 8'b01111100;
		"K28_4" : CRC_START_OF_PKT_BINARY <= 8'b10011100;
		"K28_5" : CRC_START_OF_PKT_BINARY <= 8'b10111100;
		"K28_6" : CRC_START_OF_PKT_BINARY <= 8'b11011100;
		"K28_7" : CRC_START_OF_PKT_BINARY <= 8'b11111100;
		"K23_7" : CRC_START_OF_PKT_BINARY <= 8'b11110111;
		"K27_7" : CRC_START_OF_PKT_BINARY <= 8'b11111011;
		"K29_7" : CRC_START_OF_PKT_BINARY <= 8'b11111101;
		"K30_7" : CRC_START_OF_PKT_BINARY <= 8'b11111110;
		default : begin
			$display("Attribute Syntax Error : The Attribute CRC_START_OF_PKT on X_GT instance %m is set to %s.  Legal values for this attribute are K28_0, K28_1, K28_2, K28_3, K28_4, K28_5, K28_6, K28_7, K23_7, K27_7, K29_7 or K30_7.", CRC_START_OF_PKT);
			$finish;
		end
	endcase

	case (DEC_MCOMMA_DETECT)
		"FALSE" : DEC_MCOMMA_DETECT_BINARY <= 0;
		"TRUE" : DEC_MCOMMA_DETECT_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute DEC_MCOMMA_DETECT on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", DEC_MCOMMA_DETECT);
			$finish;
		end
	endcase

	case (DEC_PCOMMA_DETECT)
		"FALSE" : DEC_PCOMMA_DETECT_BINARY <= 0;
		"TRUE" : DEC_PCOMMA_DETECT_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute DEC_PCOMMA_DETECT on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", DEC_PCOMMA_DETECT);
			$finish;
		end
	endcase

	case (DEC_VALID_COMMA_ONLY)
		"FALSE" : DEC_VALID_COMMA_ONLY_BINARY <= 0;
		"TRUE" : DEC_VALID_COMMA_ONLY_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute DEC_VALID_COMMA_ONLY on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", DEC_VALID_COMMA_ONLY);
			$finish;
		end
	endcase

	case (MCOMMA_DETECT)
		"FALSE" : MCOMMA_DETECT_BINARY <= 0;
		"TRUE" : MCOMMA_DETECT_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute MCOMMA_DETECT on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", MCOMMA_DETECT);
			$finish;
		end
	endcase

	case (PCOMMA_DETECT)
		"FALSE" : PCOMMA_DETECT_BINARY <= 0;
		"TRUE" : PCOMMA_DETECT_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute PCOMMA_DETECT on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", PCOMMA_DETECT);
			$finish;
		end
	endcase

	case (REF_CLK_V_SEL)
		0 : REF_CLK_V_SEL_BINARY <= 0;
		1 : REF_CLK_V_SEL_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute REF_CLK_V_SEL on X_GT instance %m is set to %d.  Legal values for this attribute are  0 or 1.", REF_CLK_V_SEL);
			$finish;
		end
	endcase

	case (RX_BUFFER_USE)
		"FALSE" : RX_BUFFER_USE_BINARY <= 0;
		"TRUE" : RX_BUFFER_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute RX_BUFFER_USE on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", RX_BUFFER_USE);
			$finish;
		end
	endcase

	case (RX_CRC_USE)
		"FALSE" : RX_CRC_USE_BINARY <= 0;
		"TRUE" : RX_CRC_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute RX_CRC_USE on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", RX_CRC_USE);
			$finish;
		end
	endcase

	case (RX_DATA_WIDTH)
		1 : RX_DATA_WIDTH_BINARY <= 2'b01;
		2 : RX_DATA_WIDTH_BINARY <= 2'b10;
		4 : RX_DATA_WIDTH_BINARY <= 2'b00;
		default : begin
			$display("Attribute Syntax Error : The Attribute RX_DATA_WIDTH on X_GT instance %m is set to %d.  Legal values for this attribute are 1, 2 or 4.", RX_DATA_WIDTH);
			$finish;
		end
	endcase

	case (RX_DECODE_USE)
		"FALSE" : RX_DECODE_USE_BINARY <= 0;
		"TRUE" : RX_DECODE_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute RX_DECODE_USE on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", RX_DECODE_USE);
			$finish;
		end
	endcase

	case (RX_LOS_INVALID_INCR)
		1 : RX_LOS_INVALID_INCR_BINARY <= 3'b000;
		2 : RX_LOS_INVALID_INCR_BINARY <= 3'b001;
		4 : RX_LOS_INVALID_INCR_BINARY <= 3'b010;
		8 : RX_LOS_INVALID_INCR_BINARY <= 3'b011;
		16 : RX_LOS_INVALID_INCR_BINARY <= 3'b100;
		32 : RX_LOS_INVALID_INCR_BINARY <= 3'b101;
		64 : RX_LOS_INVALID_INCR_BINARY <= 3'b110;
		128 : RX_LOS_INVALID_INCR_BINARY <= 3'b111;
		default : begin
			$display("Attribute Syntax Error : The Attribute RX_LOS_INVALID_INCR on X_GT instance %m is set to %d.  Legal values for this attribute are 1, 2, 4, 8, 16, 32, 64 or 128.", RX_LOS_INVALID_INCR);
			$finish;
		end
	endcase

	case (RX_LOS_THRESHOLD)
		4 : RX_LOS_THRESHOLD_BINARY <= 3'b000;
		8 : RX_LOS_THRESHOLD_BINARY <= 3'b001;
		16 : RX_LOS_THRESHOLD_BINARY <= 3'b010;
		32 : RX_LOS_THRESHOLD_BINARY <= 3'b011;
		64 : RX_LOS_THRESHOLD_BINARY <= 3'b100;
		128 : RX_LOS_THRESHOLD_BINARY <= 3'b101;
		256 : RX_LOS_THRESHOLD_BINARY <= 3'b110;
		512 : RX_LOS_THRESHOLD_BINARY <= 3'b111;
		default : begin
			$display("Attribute Syntax Error : The Attribute RX_LOS_THRESHOLD on X_GT instance %m is set to %d.  Legal values for this attribute are 4, 8, 16, 32, 64, 128, 256 or 512.", RX_LOS_THRESHOLD);
			$finish;
		end
	endcase

	case (RX_LOSS_OF_SYNC_FSM)
		"FALSE" : RX_LOSS_OF_SYNC_FSM_BINARY <= 0;
		"TRUE" : RX_LOSS_OF_SYNC_FSM_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute RX_LOSS_OF_SYNC_FSM on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", RX_LOSS_OF_SYNC_FSM);
			$finish;
		end
	endcase

	case (SERDES_10B)
		"FALSE" : SERDES_10B_BINARY <= 0;
		"TRUE" : SERDES_10B_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute SERDES_10B on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", SERDES_10B);
			$finish;
		end
	endcase

	case (TERMINATION_IMP)
		50 : TERMINATION_IMP_BINARY <= 0;
		75 : TERMINATION_IMP_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute TERMINATION_IMP on X_GT instance %m is set to %d.  Legal values for this attribute are  50 or 75.", TERMINATION_IMP);
			$finish;
		end
	endcase

	case (TX_BUFFER_USE)
		"FALSE" : TX_BUFFER_USE_BINARY <= 0;
		"TRUE" : TX_BUFFER_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute TX_BUFFER_USE on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", TX_BUFFER_USE);
			$finish;
		end
	endcase

	case (TX_CRC_USE)
		"FALSE" : TX_CRC_USE_BINARY <= 0;
		"TRUE" : TX_CRC_USE_BINARY <= 1;
		default : begin
			$display("Attribute Syntax Error : The Attribute TX_CRC_USE on X_GT instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", TX_CRC_USE);
			$finish;
		end
	endcase

	case (TX_DATA_WIDTH)
		1 : TX_DATA_WIDTH_BINARY <= 2'b01;
		2 : TX_DATA_WIDTH_BINARY <= 2'b10;
		4 : TX_DATA_WIDTH_BINARY <= 2'b00;
		default : begin
			$display("Attribute Syntax Error : The Attribute TX_DATA_WIDTH on X_GT instance %m is set to %d.  Legal values for this attribute are 1, 2 or 4.", TX_DATA_WIDTH);
			$finish;
		end
	endcase

	case (TX_DIFF_CTRL)
		400 : TX_DIFF_CTRL_BINARY <= 3'b010;
		500 : TX_DIFF_CTRL_BINARY <= 3'b000;
		600 : TX_DIFF_CTRL_BINARY <= 3'b001;
		700 : TX_DIFF_CTRL_BINARY <= 3'b011;
		800 : TX_DIFF_CTRL_BINARY <= 3'b110;
		default : begin
			$display("Attribute Syntax Error : The Attribute TX_DIFF_CTRL on X_GT instance %m is set to %d.  Legal values for this attribute are 400, 500, 600, 700 or 800.", TX_DIFF_CTRL);
			$finish;
		end
	endcase

	case (TX_PREEMPHASIS)
		0 : TX_PREEMPHASIS_BINARY <= 2'b00;
		1 : TX_PREEMPHASIS_BINARY <= 2'b01;
		2 : TX_PREEMPHASIS_BINARY <= 2'b10;
		3 : TX_PREEMPHASIS_BINARY <= 2'b11;
		default : begin
			$display("Attribute Syntax Error : The Attribute TX_PREEMPHASIS on X_GT instance %m is set to %d.  Legal values for this attribute are 0 to 3.", TX_PREEMPHASIS);
			$finish;
		end
	endcase

end

buf B_CHBONDDONE (CHBONDDONE, CHBONDDONE_OUT);
buf B_CHBONDO0 (CHBONDO[0], CHBONDO_OUT[0]);
buf B_CHBONDO1 (CHBONDO[1], CHBONDO_OUT[1]);
buf B_CHBONDO2 (CHBONDO[2], CHBONDO_OUT[2]);
buf B_CHBONDO3 (CHBONDO[3], CHBONDO_OUT[3]);
buf B_CONFIGOUT (CONFIGOUT, CONFIGOUT_OUT);
buf B_RXBUFSTATUS0 (RXBUFSTATUS[0], RXBUFSTATUS_OUT[0]);
buf B_RXBUFSTATUS1 (RXBUFSTATUS[1], RXBUFSTATUS_OUT[1]);
buf B_RXCHARISCOMMA0 (RXCHARISCOMMA[0], RXCHARISCOMMA_OUT[0]);
buf B_RXCHARISCOMMA1 (RXCHARISCOMMA[1], RXCHARISCOMMA_OUT[1]);
buf B_RXCHARISCOMMA2 (RXCHARISCOMMA[2], RXCHARISCOMMA_OUT[2]);
buf B_RXCHARISCOMMA3 (RXCHARISCOMMA[3], RXCHARISCOMMA_OUT[3]);
buf B_RXCHARISK0 (RXCHARISK[0], RXCHARISK_OUT[0]);
buf B_RXCHARISK1 (RXCHARISK[1], RXCHARISK_OUT[1]);
buf B_RXCHARISK2 (RXCHARISK[2], RXCHARISK_OUT[2]);
buf B_RXCHARISK3 (RXCHARISK[3], RXCHARISK_OUT[3]);
buf B_RXCHECKINGCRC (RXCHECKINGCRC, RXCHECKINGCRC_OUT);
buf B_RXCLKCORCNT0 (RXCLKCORCNT[0], RXCLKCORCNT_OUT[0]);
buf B_RXCLKCORCNT1 (RXCLKCORCNT[1], RXCLKCORCNT_OUT[1]);
buf B_RXCLKCORCNT2 (RXCLKCORCNT[2], RXCLKCORCNT_OUT[2]);
buf B_RXCOMMADET (RXCOMMADET, RXCOMMADET_OUT);
buf B_RXCRCERR (RXCRCERR, RXCRCERR_OUT);
buf B_RXDATA0 (RXDATA[0], RXDATA_OUT[0]);
buf B_RXDATA1 (RXDATA[1], RXDATA_OUT[1]);
buf B_RXDATA2 (RXDATA[2], RXDATA_OUT[2]);
buf B_RXDATA3 (RXDATA[3], RXDATA_OUT[3]);
buf B_RXDATA4 (RXDATA[4], RXDATA_OUT[4]);
buf B_RXDATA5 (RXDATA[5], RXDATA_OUT[5]);
buf B_RXDATA6 (RXDATA[6], RXDATA_OUT[6]);
buf B_RXDATA7 (RXDATA[7], RXDATA_OUT[7]);
buf B_RXDATA8 (RXDATA[8], RXDATA_OUT[8]);
buf B_RXDATA9 (RXDATA[9], RXDATA_OUT[9]);
buf B_RXDATA10 (RXDATA[10], RXDATA_OUT[10]);
buf B_RXDATA11 (RXDATA[11], RXDATA_OUT[11]);
buf B_RXDATA12 (RXDATA[12], RXDATA_OUT[12]);
buf B_RXDATA13 (RXDATA[13], RXDATA_OUT[13]);
buf B_RXDATA14 (RXDATA[14], RXDATA_OUT[14]);
buf B_RXDATA15 (RXDATA[15], RXDATA_OUT[15]);
buf B_RXDATA16 (RXDATA[16], RXDATA_OUT[16]);
buf B_RXDATA17 (RXDATA[17], RXDATA_OUT[17]);
buf B_RXDATA18 (RXDATA[18], RXDATA_OUT[18]);
buf B_RXDATA19 (RXDATA[19], RXDATA_OUT[19]);
buf B_RXDATA20 (RXDATA[20], RXDATA_OUT[20]);
buf B_RXDATA21 (RXDATA[21], RXDATA_OUT[21]);
buf B_RXDATA22 (RXDATA[22], RXDATA_OUT[22]);
buf B_RXDATA23 (RXDATA[23], RXDATA_OUT[23]);
buf B_RXDATA24 (RXDATA[24], RXDATA_OUT[24]);
buf B_RXDATA25 (RXDATA[25], RXDATA_OUT[25]);
buf B_RXDATA26 (RXDATA[26], RXDATA_OUT[26]);
buf B_RXDATA27 (RXDATA[27], RXDATA_OUT[27]);
buf B_RXDATA28 (RXDATA[28], RXDATA_OUT[28]);
buf B_RXDATA29 (RXDATA[29], RXDATA_OUT[29]);
buf B_RXDATA30 (RXDATA[30], RXDATA_OUT[30]);
buf B_RXDATA31 (RXDATA[31], RXDATA_OUT[31]);
buf B_RXDISPERR0 (RXDISPERR[0], RXDISPERR_OUT[0]);
buf B_RXDISPERR1 (RXDISPERR[1], RXDISPERR_OUT[1]);
buf B_RXDISPERR2 (RXDISPERR[2], RXDISPERR_OUT[2]);
buf B_RXDISPERR3 (RXDISPERR[3], RXDISPERR_OUT[3]);
buf B_RXLOSSOFSYNC0 (RXLOSSOFSYNC[0], RXLOSSOFSYNC_OUT[0]);
buf B_RXLOSSOFSYNC1 (RXLOSSOFSYNC[1], RXLOSSOFSYNC_OUT[1]);
buf B_RXNOTINTABLE0 (RXNOTINTABLE[0], RXNOTINTABLE_OUT[0]);
buf B_RXNOTINTABLE1 (RXNOTINTABLE[1], RXNOTINTABLE_OUT[1]);
buf B_RXNOTINTABLE2 (RXNOTINTABLE[2], RXNOTINTABLE_OUT[2]);
buf B_RXNOTINTABLE3 (RXNOTINTABLE[3], RXNOTINTABLE_OUT[3]);
buf B_RXREALIGN (RXREALIGN, RXREALIGN_OUT);
buf B_RXRECCLK (RXRECCLK, RXRECCLK_OUT);
buf B_RXRUNDISP0 (RXRUNDISP[0], RXRUNDISP_OUT[0]);
buf B_RXRUNDISP1 (RXRUNDISP[1], RXRUNDISP_OUT[1]);
buf B_RXRUNDISP2 (RXRUNDISP[2], RXRUNDISP_OUT[2]);
buf B_RXRUNDISP3 (RXRUNDISP[3], RXRUNDISP_OUT[3]);
buf B_TXBUFERR (TXBUFERR, TXBUFERR_OUT);
buf B_TXKERR0 (TXKERR[0], TXKERR_OUT[0]);
buf B_TXKERR1 (TXKERR[1], TXKERR_OUT[1]);
buf B_TXKERR2 (TXKERR[2], TXKERR_OUT[2]);
buf B_TXKERR3 (TXKERR[3], TXKERR_OUT[3]);
// buf B_TXN (TXN, TXN_OUT);
// buf B_TXP (TXP, TXP_OUT);
buf B_TXRUNDISP0 (TXRUNDISP[0], TXRUNDISP_OUT[0]);
buf B_TXRUNDISP1 (TXRUNDISP[1], TXRUNDISP_OUT[1]);
buf B_TXRUNDISP2 (TXRUNDISP[2], TXRUNDISP_OUT[2]);
buf B_TXRUNDISP3 (TXRUNDISP[3], TXRUNDISP_OUT[3]);

buf B_BREFCLK (BREFCLK_IN, BREFCLK);
buf B_BREFCLK2 (BREFCLK2_IN, BREFCLK2);
buf B_CHBONDI0 (CHBONDI_IN[0], CHBONDI[0]);
buf B_CHBONDI1 (CHBONDI_IN[1], CHBONDI[1]);
buf B_CHBONDI2 (CHBONDI_IN[2], CHBONDI[2]);
buf B_CHBONDI3 (CHBONDI_IN[3], CHBONDI[3]);
buf B_CONFIGENABLE (CONFIGENABLE_IN, CONFIGENABLE);
buf B_CONFIGIN (CONFIGIN_IN, CONFIGIN);
buf B_ENCHANSYNC (ENCHANSYNC_IN, ENCHANSYNC);
buf B_ENMCOMMAALIGN (ENMCOMMAALIGN_IN, ENMCOMMAALIGN);
buf B_ENPCOMMAALIGN (ENPCOMMAALIGN_IN, ENPCOMMAALIGN);
buf B_LOOPBACK0 (LOOPBACK_IN[0], LOOPBACK[0]);
buf B_LOOPBACK1 (LOOPBACK_IN[1], LOOPBACK[1]);
buf B_POWERDOWN (POWERDOWN_IN, POWERDOWN);
buf B_REFCLK (REFCLK_IN, REFCLK);
buf B_REFCLK2 (REFCLK2_IN, REFCLK2);
buf B_REFCLKSEL (REFCLKSEL_IN, REFCLKSEL);
buf B_RXN (RXN_IN, RXN);
buf B_RXP (RXP_IN, RXP);
buf B_RXPOLARITY (RXPOLARITY_IN, RXPOLARITY);
buf B_RXRESET (RXRESET_IN, RXRESET);
buf B_RXUSRCLK (RXUSRCLK_IN, RXUSRCLK);
buf B_RXUSRCLK2 (RXUSRCLK2_IN, RXUSRCLK2);
buf B_TXBYPASS8B10B0 (TXBYPASS8B10B_IN[0], TXBYPASS8B10B[0]);
buf B_TXBYPASS8B10B1 (TXBYPASS8B10B_IN[1], TXBYPASS8B10B[1]);
buf B_TXBYPASS8B10B2 (TXBYPASS8B10B_IN[2], TXBYPASS8B10B[2]);
buf B_TXBYPASS8B10B3 (TXBYPASS8B10B_IN[3], TXBYPASS8B10B[3]);
buf B_TXCHARDISPMODE0 (TXCHARDISPMODE_IN[0], TXCHARDISPMODE[0]);
buf B_TXCHARDISPMODE1 (TXCHARDISPMODE_IN[1], TXCHARDISPMODE[1]);
buf B_TXCHARDISPMODE2 (TXCHARDISPMODE_IN[2], TXCHARDISPMODE[2]);
buf B_TXCHARDISPMODE3 (TXCHARDISPMODE_IN[3], TXCHARDISPMODE[3]);
buf B_TXCHARDISPVAL0 (TXCHARDISPVAL_IN[0], TXCHARDISPVAL[0]);
buf B_TXCHARDISPVAL1 (TXCHARDISPVAL_IN[1], TXCHARDISPVAL[1]);
buf B_TXCHARDISPVAL2 (TXCHARDISPVAL_IN[2], TXCHARDISPVAL[2]);
buf B_TXCHARDISPVAL3 (TXCHARDISPVAL_IN[3], TXCHARDISPVAL[3]);
buf B_TXCHARISK0 (TXCHARISK_IN[0], TXCHARISK[0]);
buf B_TXCHARISK1 (TXCHARISK_IN[1], TXCHARISK[1]);
buf B_TXCHARISK2 (TXCHARISK_IN[2], TXCHARISK[2]);
buf B_TXCHARISK3 (TXCHARISK_IN[3], TXCHARISK[3]);
buf B_TXDATA0 (TXDATA_IN[0], TXDATA[0]);
buf B_TXDATA1 (TXDATA_IN[1], TXDATA[1]);
buf B_TXDATA2 (TXDATA_IN[2], TXDATA[2]);
buf B_TXDATA3 (TXDATA_IN[3], TXDATA[3]);
buf B_TXDATA4 (TXDATA_IN[4], TXDATA[4]);
buf B_TXDATA5 (TXDATA_IN[5], TXDATA[5]);
buf B_TXDATA6 (TXDATA_IN[6], TXDATA[6]);
buf B_TXDATA7 (TXDATA_IN[7], TXDATA[7]);
buf B_TXDATA8 (TXDATA_IN[8], TXDATA[8]);
buf B_TXDATA9 (TXDATA_IN[9], TXDATA[9]);
buf B_TXDATA10 (TXDATA_IN[10], TXDATA[10]);
buf B_TXDATA11 (TXDATA_IN[11], TXDATA[11]);
buf B_TXDATA12 (TXDATA_IN[12], TXDATA[12]);
buf B_TXDATA13 (TXDATA_IN[13], TXDATA[13]);
buf B_TXDATA14 (TXDATA_IN[14], TXDATA[14]);
buf B_TXDATA15 (TXDATA_IN[15], TXDATA[15]);
buf B_TXDATA16 (TXDATA_IN[16], TXDATA[16]);
buf B_TXDATA17 (TXDATA_IN[17], TXDATA[17]);
buf B_TXDATA18 (TXDATA_IN[18], TXDATA[18]);
buf B_TXDATA19 (TXDATA_IN[19], TXDATA[19]);
buf B_TXDATA20 (TXDATA_IN[20], TXDATA[20]);
buf B_TXDATA21 (TXDATA_IN[21], TXDATA[21]);
buf B_TXDATA22 (TXDATA_IN[22], TXDATA[22]);
buf B_TXDATA23 (TXDATA_IN[23], TXDATA[23]);
buf B_TXDATA24 (TXDATA_IN[24], TXDATA[24]);
buf B_TXDATA25 (TXDATA_IN[25], TXDATA[25]);
buf B_TXDATA26 (TXDATA_IN[26], TXDATA[26]);
buf B_TXDATA27 (TXDATA_IN[27], TXDATA[27]);
buf B_TXDATA28 (TXDATA_IN[28], TXDATA[28]);
buf B_TXDATA29 (TXDATA_IN[29], TXDATA[29]);
buf B_TXDATA30 (TXDATA_IN[30], TXDATA[30]);
buf B_TXDATA31 (TXDATA_IN[31], TXDATA[31]);
buf B_TXFORCECRCERR (TXFORCECRCERR_IN, TXFORCECRCERR);
buf B_TXINHIBIT (TXINHIBIT_IN, TXINHIBIT);
buf B_TXPOLARITY (TXPOLARITY_IN, TXPOLARITY);
buf B_TXRESET (TXRESET_IN, TXRESET);
buf B_TXUSRCLK (TXUSRCLK_IN, TXUSRCLK);
buf B_TXUSRCLK2 (TXUSRCLK2_IN, TXUSRCLK2);

GT_SWIFT gt_swift_1 (
	.ALIGN_COMMA_MSB (ALIGN_COMMA_MSB_BINARY),
	.BREFCLK (BREFCLK_IN),
	.BREFCLK2 (BREFCLK2_IN),
	.CHAN_BOND_LIMIT (CHAN_BOND_LIMIT_BINARY),
	.CHAN_BOND_MODE (CHAN_BOND_MODE_BINARY),
	.CHAN_BOND_OFFSET (CHAN_BOND_OFFSET_BINARY),
	.CHAN_BOND_ONE_SHOT (CHAN_BOND_ONE_SHOT_BINARY),
	.CHAN_BOND_SEQ_1_1 (CHAN_BOND_SEQ_1_1),
	.CHAN_BOND_SEQ_1_2 (CHAN_BOND_SEQ_1_2),
	.CHAN_BOND_SEQ_1_3 (CHAN_BOND_SEQ_1_3),
	.CHAN_BOND_SEQ_1_4 (CHAN_BOND_SEQ_1_4),
	.CHAN_BOND_SEQ_2_1 (CHAN_BOND_SEQ_2_1),
	.CHAN_BOND_SEQ_2_2 (CHAN_BOND_SEQ_2_2),
	.CHAN_BOND_SEQ_2_3 (CHAN_BOND_SEQ_2_3),
	.CHAN_BOND_SEQ_2_4 (CHAN_BOND_SEQ_2_4),
	.CHAN_BOND_SEQ_2_USE (CHAN_BOND_SEQ_2_USE_BINARY),
	.CHAN_BOND_SEQ_LEN (CHAN_BOND_SEQ_LEN_BINARY),
	.CHAN_BOND_WAIT (CHAN_BOND_WAIT_BINARY),
	.CHBONDDONE (CHBONDDONE_OUT),
	.CHBONDI (CHBONDI_IN),
	.CHBONDO (CHBONDO_OUT),
	.CLK_CORRECT_USE (CLK_CORRECT_USE_BINARY),
	.CLK_COR_INSERT_IDLE_FLAG (CLK_COR_INSERT_IDLE_FLAG_BINARY),
	.CLK_COR_KEEP_IDLE (CLK_COR_KEEP_IDLE_BINARY),
	.CLK_COR_REPEAT_WAIT (CLK_COR_REPEAT_WAIT_BINARY),
	.CLK_COR_SEQ_1_1 (CLK_COR_SEQ_1_1),
	.CLK_COR_SEQ_1_2 (CLK_COR_SEQ_1_2),
	.CLK_COR_SEQ_1_3 (CLK_COR_SEQ_1_3),
	.CLK_COR_SEQ_1_4 (CLK_COR_SEQ_1_4),
	.CLK_COR_SEQ_2_1 (CLK_COR_SEQ_2_1),
	.CLK_COR_SEQ_2_2 (CLK_COR_SEQ_2_2),
	.CLK_COR_SEQ_2_3 (CLK_COR_SEQ_2_3),
	.CLK_COR_SEQ_2_4 (CLK_COR_SEQ_2_4),
	.CLK_COR_SEQ_2_USE (CLK_COR_SEQ_2_USE_BINARY),
	.CLK_COR_SEQ_LEN (CLK_COR_SEQ_LEN_BINARY),
	.COMMA_10B_MASK (COMMA_10B_MASK),
	.CONFIGENABLE (CONFIGENABLE_IN),
	.CONFIGIN (CONFIGIN_IN),
	.CONFIGOUT (CONFIGOUT_OUT),
	.CRC_END_OF_PKT (CRC_END_OF_PKT_BINARY),
	.CRC_FORMAT (CRC_FORMAT_BINARY),
	.CRC_START_OF_PKT (CRC_START_OF_PKT_BINARY),
	.DEC_MCOMMA_DETECT (DEC_MCOMMA_DETECT_BINARY),
	.DEC_PCOMMA_DETECT (DEC_PCOMMA_DETECT_BINARY),
	.DEC_VALID_COMMA_ONLY (DEC_VALID_COMMA_ONLY_BINARY),
	.ENCHANSYNC (ENCHANSYNC_IN),
	.ENMCOMMAALIGN (ENMCOMMAALIGN_IN),
	.ENPCOMMAALIGN (ENPCOMMAALIGN_IN),
	.GSR (GSR),
	.LOOPBACK (LOOPBACK_IN),
	.MCOMMA_10B_VALUE (MCOMMA_10B_VALUE),
	.MCOMMA_DETECT (MCOMMA_DETECT_BINARY),
	.PCOMMA_10B_VALUE (PCOMMA_10B_VALUE),
	.PCOMMA_DETECT (PCOMMA_DETECT_BINARY),
	.POWERDOWN (POWERDOWN_IN),
	.REFCLK (REFCLK_IN),
	.REFCLK2 (REFCLK2_IN),
	.REFCLKSEL (REFCLKSEL_IN),
	.REF_CLK_V_SEL (REF_CLK_V_SEL_BINARY),
	.RXBUFSTATUS (RXBUFSTATUS_OUT),
	.RXCHARISCOMMA (RXCHARISCOMMA_OUT),
	.RXCHARISK (RXCHARISK_OUT),
	.RXCHECKINGCRC (RXCHECKINGCRC_OUT),
	.RXCLKCORCNT (RXCLKCORCNT_OUT),
	.RXCOMMADET (RXCOMMADET_OUT),
	.RXCRCERR (RXCRCERR_OUT),
	.RXDATA (RXDATA_OUT),
	.RXDISPERR (RXDISPERR_OUT),
	.RXLOSSOFSYNC (RXLOSSOFSYNC_OUT),
	.RXN (RXN_IN),
	.RXNOTINTABLE (RXNOTINTABLE_OUT),
	.RXP (RXP_IN),
	.RXPOLARITY (RXPOLARITY_IN),
	.RXREALIGN (RXREALIGN_OUT),
	.RXRECCLK (RXRECCLK_OUT),
	.RXRESET (RXRESET_IN),
	.RXRUNDISP (RXRUNDISP_OUT),
	.RXUSRCLK (RXUSRCLK_IN),
	.RXUSRCLK2 (RXUSRCLK2_IN),
	.RX_BUFFER_USE (RX_BUFFER_USE_BINARY),
	.RX_CRC_USE (RX_CRC_USE_BINARY),
	.RX_DATA_WIDTH (RX_DATA_WIDTH_BINARY),
	.RX_DECODE_USE (RX_DECODE_USE_BINARY),
	.RX_LOSS_OF_SYNC_FSM (RX_LOSS_OF_SYNC_FSM_BINARY),
	.RX_LOS_INVALID_INCR (RX_LOS_INVALID_INCR_BINARY),
	.RX_LOS_THRESHOLD (RX_LOS_THRESHOLD_BINARY),
	.SERDES_10B (SERDES_10B_BINARY),
	.TERMINATION_IMP (TERMINATION_IMP_BINARY),
	.TXBUFERR (TXBUFERR_OUT),
	.TXBYPASS8B10B (TXBYPASS8B10B_IN),
	.TXCHARDISPMODE (TXCHARDISPMODE_IN),
	.TXCHARDISPVAL (TXCHARDISPVAL_IN),
	.TXCHARISK (TXCHARISK_IN),
	.TXDATA (TXDATA_IN),
	.TXFORCECRCERR (TXFORCECRCERR_IN),
	.TXINHIBIT (TXINHIBIT_IN),
	.TXKERR (TXKERR_OUT),
	.TXN (TXN),
	.TXP (TXP),
	.TXPOLARITY (TXPOLARITY_IN),
	.TXRESET (TXRESET_IN),
	.TXRUNDISP (TXRUNDISP_OUT),
	.TXUSRCLK (TXUSRCLK_IN),
	.TXUSRCLK2 (TXUSRCLK2_IN),
	.TX_BUFFER_USE (TX_BUFFER_USE_BINARY),
	.TX_CRC_FORCE_VALUE (TX_CRC_FORCE_VALUE),
	.TX_CRC_USE (TX_CRC_USE_BINARY),
	.TX_DATA_WIDTH (TX_DATA_WIDTH_BINARY),
	.TX_DIFF_CTRL (TX_DIFF_CTRL_BINARY),
	.TX_PREEMPHASIS (TX_PREEMPHASIS_BINARY)
);

specify
	specparam BREFCLK2DLYLH = 0:0:0, BREFCLK2DLYHL = 0:0:0;
	specparam BREFCLKDLYLH = 0:0:0, BREFCLKDLYHL = 0:0:0;
	specparam CHBONDDONEDLYLH = 0:0:0, CHBONDDONEDLYHL = 0:0:0;
	specparam CHBONDI0DLYLH = 0:0:0, CHBONDI0DLYHL = 0:0:0;
	specparam CHBONDI1DLYLH = 0:0:0, CHBONDI1DLYHL = 0:0:0;
	specparam CHBONDI2DLYLH = 0:0:0, CHBONDI2DLYHL = 0:0:0;
	specparam CHBONDI3DLYLH = 0:0:0, CHBONDI3DLYHL = 0:0:0;
	specparam CHBONDO0DLYLH = 0:0:0, CHBONDO0DLYHL = 0:0:0;
	specparam CHBONDO1DLYLH = 0:0:0, CHBONDO1DLYHL = 0:0:0;
	specparam CHBONDO2DLYLH = 0:0:0, CHBONDO2DLYHL = 0:0:0;
	specparam CHBONDO3DLYLH = 0:0:0, CHBONDO3DLYHL = 0:0:0;
	specparam CONFIGENABLEDLYLH = 0:0:0, CONFIGENABLEDLYHL = 0:0:0;
	specparam CONFIGINDLYLH = 0:0:0, CONFIGINDLYHL = 0:0:0;
	specparam CONFIGOUTDLYLH = 0:0:0, CONFIGOUTDLYHL = 0:0:0;
	specparam ENCHANSYNCDLYLH = 0:0:0, ENCHANSYNCDLYHL = 0:0:0;
	specparam ENMCOMMAALIGNDLYLH = 0:0:0, ENMCOMMAALIGNDLYHL = 0:0:0;
	specparam ENPCOMMAALIGNDLYLH = 0:0:0, ENPCOMMAALIGNDLYHL = 0:0:0;
	specparam GSRDLYLH = 0:0:0, GSRDLYHL = 0:0:0;
	specparam LOOPBACK0DLYLH = 0:0:0, LOOPBACK0DLYHL = 0:0:0;
	specparam LOOPBACK1DLYLH = 0:0:0, LOOPBACK1DLYHL = 0:0:0;
	specparam MINPERBREFCLK = 0:0:0;
	specparam MINPERBREFCLK2 = 0:0:0;
	specparam MINPERREFCLK = 0:0:0;
	specparam MINPERREFCLK2 = 0:0:0;
	specparam PATHPULSE$ = 0;
	specparam POWERDOWNDLYLH = 0:0:0, POWERDOWNDLYHL = 0:0:0;
	specparam PWBREFCLK2HI = 0:0:0, PWBREFCLK2LO = 0:0:0;
	specparam PWBREFCLKHI = 0:0:0, PWBREFCLKLO = 0:0:0;
	specparam PWREFCLK2HI = 0:0:0, PWREFCLK2LO = 0:0:0;
	specparam PWREFCLKHI = 0:0:0, PWREFCLKLO = 0:0:0;
	specparam REFCLK2DLYLH = 0:0:0, REFCLK2DLYHL = 0:0:0;
	specparam REFCLKDLYLH = 0:0:0, REFCLKDLYHL = 0:0:0;
	specparam REFCLKSELDLYLH = 0:0:0, REFCLKSELDLYHL = 0:0:0;
	specparam RXBUFSTATUS0DLYLH = 0:0:0, RXBUFSTATUS0DLYHL = 0:0:0;
	specparam RXBUFSTATUS1DLYLH = 0:0:0, RXBUFSTATUS1DLYHL = 0:0:0;
	specparam RXCHARISCOMMA0DLYLH = 0:0:0, RXCHARISCOMMA0DLYHL = 0:0:0;
	specparam RXCHARISCOMMA1DLYLH = 0:0:0, RXCHARISCOMMA1DLYHL = 0:0:0;
	specparam RXCHARISCOMMA2DLYLH = 0:0:0, RXCHARISCOMMA2DLYHL = 0:0:0;
	specparam RXCHARISCOMMA3DLYLH = 0:0:0, RXCHARISCOMMA3DLYHL = 0:0:0;
	specparam RXCHARISK0DLYLH = 0:0:0, RXCHARISK0DLYHL = 0:0:0;
	specparam RXCHARISK1DLYLH = 0:0:0, RXCHARISK1DLYHL = 0:0:0;
	specparam RXCHARISK2DLYLH = 0:0:0, RXCHARISK2DLYHL = 0:0:0;
	specparam RXCHARISK3DLYLH = 0:0:0, RXCHARISK3DLYHL = 0:0:0;
	specparam RXCHECKINGCRCDLYLH = 0:0:0, RXCHECKINGCRCDLYHL = 0:0:0;
	specparam RXCLKCORCNT0DLYLH = 0:0:0, RXCLKCORCNT0DLYHL = 0:0:0;
	specparam RXCLKCORCNT1DLYLH = 0:0:0, RXCLKCORCNT1DLYHL = 0:0:0;
	specparam RXCLKCORCNT2DLYLH = 0:0:0, RXCLKCORCNT2DLYHL = 0:0:0;
	specparam RXCOMMADETDLYLH = 0:0:0, RXCOMMADETDLYHL = 0:0:0;
	specparam RXCRCERRDLYLH = 0:0:0, RXCRCERRDLYHL = 0:0:0;
	specparam RXDATA0DLYLH = 0:0:0, RXDATA0DLYHL = 0:0:0;
	specparam RXDATA10DLYLH = 0:0:0, RXDATA10DLYHL = 0:0:0;
	specparam RXDATA11DLYLH = 0:0:0, RXDATA11DLYHL = 0:0:0;
	specparam RXDATA12DLYLH = 0:0:0, RXDATA12DLYHL = 0:0:0;
	specparam RXDATA13DLYLH = 0:0:0, RXDATA13DLYHL = 0:0:0;
	specparam RXDATA14DLYLH = 0:0:0, RXDATA14DLYHL = 0:0:0;
	specparam RXDATA15DLYLH = 0:0:0, RXDATA15DLYHL = 0:0:0;
	specparam RXDATA16DLYLH = 0:0:0, RXDATA16DLYHL = 0:0:0;
	specparam RXDATA17DLYLH = 0:0:0, RXDATA17DLYHL = 0:0:0;
	specparam RXDATA18DLYLH = 0:0:0, RXDATA18DLYHL = 0:0:0;
	specparam RXDATA19DLYLH = 0:0:0, RXDATA19DLYHL = 0:0:0;
	specparam RXDATA1DLYLH = 0:0:0, RXDATA1DLYHL = 0:0:0;
	specparam RXDATA20DLYLH = 0:0:0, RXDATA20DLYHL = 0:0:0;
	specparam RXDATA21DLYLH = 0:0:0, RXDATA21DLYHL = 0:0:0;
	specparam RXDATA22DLYLH = 0:0:0, RXDATA22DLYHL = 0:0:0;
	specparam RXDATA23DLYLH = 0:0:0, RXDATA23DLYHL = 0:0:0;
	specparam RXDATA24DLYLH = 0:0:0, RXDATA24DLYHL = 0:0:0;
	specparam RXDATA25DLYLH = 0:0:0, RXDATA25DLYHL = 0:0:0;
	specparam RXDATA26DLYLH = 0:0:0, RXDATA26DLYHL = 0:0:0;
	specparam RXDATA27DLYLH = 0:0:0, RXDATA27DLYHL = 0:0:0;
	specparam RXDATA28DLYLH = 0:0:0, RXDATA28DLYHL = 0:0:0;
	specparam RXDATA29DLYLH = 0:0:0, RXDATA29DLYHL = 0:0:0;
	specparam RXDATA2DLYLH = 0:0:0, RXDATA2DLYHL = 0:0:0;
	specparam RXDATA30DLYLH = 0:0:0, RXDATA30DLYHL = 0:0:0;
	specparam RXDATA31DLYLH = 0:0:0, RXDATA31DLYHL = 0:0:0;
	specparam RXDATA3DLYLH = 0:0:0, RXDATA3DLYHL = 0:0:0;
	specparam RXDATA4DLYLH = 0:0:0, RXDATA4DLYHL = 0:0:0;
	specparam RXDATA5DLYLH = 0:0:0, RXDATA5DLYHL = 0:0:0;
	specparam RXDATA6DLYLH = 0:0:0, RXDATA6DLYHL = 0:0:0;
	specparam RXDATA7DLYLH = 0:0:0, RXDATA7DLYHL = 0:0:0;
	specparam RXDATA8DLYLH = 0:0:0, RXDATA8DLYHL = 0:0:0;
	specparam RXDATA9DLYLH = 0:0:0, RXDATA9DLYHL = 0:0:0;
	specparam RXDISPERR0DLYLH = 0:0:0, RXDISPERR0DLYHL = 0:0:0;
	specparam RXDISPERR1DLYLH = 0:0:0, RXDISPERR1DLYHL = 0:0:0;
	specparam RXDISPERR2DLYLH = 0:0:0, RXDISPERR2DLYHL = 0:0:0;
	specparam RXDISPERR3DLYLH = 0:0:0, RXDISPERR3DLYHL = 0:0:0;
	specparam RXLOSSOFSYNC0DLYLH = 0:0:0, RXLOSSOFSYNC0DLYHL = 0:0:0;
	specparam RXLOSSOFSYNC1DLYLH = 0:0:0, RXLOSSOFSYNC1DLYHL = 0:0:0;
	specparam RXNDLYLH = 0:0:0, RXNDLYHL = 0:0:0;
	specparam RXNOTINTABLE0DLYLH = 0:0:0, RXNOTINTABLE0DLYHL = 0:0:0;
	specparam RXNOTINTABLE1DLYLH = 0:0:0, RXNOTINTABLE1DLYHL = 0:0:0;
	specparam RXNOTINTABLE2DLYLH = 0:0:0, RXNOTINTABLE2DLYHL = 0:0:0;
	specparam RXNOTINTABLE3DLYLH = 0:0:0, RXNOTINTABLE3DLYHL = 0:0:0;
	specparam RXPDLYLH = 0:0:0, RXPDLYHL = 0:0:0;
	specparam RXPOLARITYDLYLH = 0:0:0, RXPOLARITYDLYHL = 0:0:0;
	specparam RXREALIGNDLYLH = 0:0:0, RXREALIGNDLYHL = 0:0:0;
	specparam RXRECCLKDLYLH = 0:0:0, RXRECCLKDLYHL = 0:0:0;
	specparam RXRESETDLYLH = 0:0:0, RXRESETDLYHL = 0:0:0;
	specparam RXRUNDISP0DLYLH = 0:0:0, RXRUNDISP0DLYHL = 0:0:0;
	specparam RXRUNDISP1DLYLH = 0:0:0, RXRUNDISP1DLYHL = 0:0:0;
	specparam RXRUNDISP2DLYLH = 0:0:0, RXRUNDISP2DLYHL = 0:0:0;
	specparam RXRUNDISP3DLYLH = 0:0:0, RXRUNDISP3DLYHL = 0:0:0;
	specparam RXUSRCLK2DLYLH = 0:0:0, RXUSRCLK2DLYHL = 0:0:0;
	specparam RXUSRCLKDLYLH = 0:0:0, RXUSRCLKDLYHL = 0:0:0;
	specparam SUCHBONDI0HIRXUSRCLK = 0:0:0, HOLDCHBONDI0HIRXUSRCLK = 0:0:0;
	specparam SUCHBONDI0LORXUSRCLK = 0:0:0, HOLDCHBONDI0LORXUSRCLK = 0:0:0;
	specparam SUCHBONDI1HIRXUSRCLK = 0:0:0, HOLDCHBONDI1HIRXUSRCLK = 0:0:0;
	specparam SUCHBONDI1LORXUSRCLK = 0:0:0, HOLDCHBONDI1LORXUSRCLK = 0:0:0;
	specparam SUCHBONDI2HIRXUSRCLK = 0:0:0, HOLDCHBONDI2HIRXUSRCLK = 0:0:0;
	specparam SUCHBONDI2LORXUSRCLK = 0:0:0, HOLDCHBONDI2LORXUSRCLK = 0:0:0;
	specparam SUCHBONDI3HIRXUSRCLK = 0:0:0, HOLDCHBONDI3HIRXUSRCLK = 0:0:0;
	specparam SUCHBONDI3LORXUSRCLK = 0:0:0, HOLDCHBONDI3LORXUSRCLK = 0:0:0;
	specparam SUCONFIGENABLEHITXUSRCLK2 = 0:0:0, HOLDCONFIGENABLEHITXUSRCLK2 = 0:0:0;
	specparam SUCONFIGENABLELOTXUSRCLK2 = 0:0:0, HOLDCONFIGENABLELOTXUSRCLK2 = 0:0:0;
	specparam SUCONFIGINHITXUSRCLK2 = 0:0:0, HOLDCONFIGINHITXUSRCLK2 = 0:0:0;
	specparam SUCONFIGINLOTXUSRCLK2 = 0:0:0, HOLDCONFIGINLOTXUSRCLK2 = 0:0:0;
	specparam SUENCHANSYNCHIRXUSRCLK2 = 0:0:0, HOLDENCHANSYNCHIRXUSRCLK2 = 0:0:0;
	specparam SUENCHANSYNCLORXUSRCLK2 = 0:0:0, HOLDENCHANSYNCLORXUSRCLK2 = 0:0:0;
	specparam SULOOPBACK0HITXUSRCLK2 = 0:0:0, HOLDLOOPBACK0HITXUSRCLK2 = 0:0:0;
	specparam SULOOPBACK0LOTXUSRCLK2 = 0:0:0, HOLDLOOPBACK0LOTXUSRCLK2 = 0:0:0;
	specparam SULOOPBACK1HITXUSRCLK2 = 0:0:0, HOLDLOOPBACK1HITXUSRCLK2 = 0:0:0;
	specparam SULOOPBACK1LOTXUSRCLK2 = 0:0:0, HOLDLOOPBACK1LOTXUSRCLK2 = 0:0:0;
	specparam SURXPOLARITYHIRXUSRCLK2 = 0:0:0, HOLDRXPOLARITYHIRXUSRCLK2 = 0:0:0;
	specparam SURXPOLARITYLORXUSRCLK2 = 0:0:0, HOLDRXPOLARITYLORXUSRCLK2 = 0:0:0;
	specparam SURXRESETHIRXUSRCLK2 = 0:0:0, HOLDRXRESETHIRXUSRCLK2 = 0:0:0;
	specparam SURXRESETLORXUSRCLK2 = 0:0:0, HOLDRXRESETLORXUSRCLK2 = 0:0:0;
	specparam SUTXBYPASS8B10B0HITXUSRCLK2 = 0:0:0, HOLDTXBYPASS8B10B0HITXUSRCLK2 = 0:0:0;
	specparam SUTXBYPASS8B10B0LOTXUSRCLK2 = 0:0:0, HOLDTXBYPASS8B10B0LOTXUSRCLK2 = 0:0:0;
	specparam SUTXBYPASS8B10B1HITXUSRCLK2 = 0:0:0, HOLDTXBYPASS8B10B1HITXUSRCLK2 = 0:0:0;
	specparam SUTXBYPASS8B10B1LOTXUSRCLK2 = 0:0:0, HOLDTXBYPASS8B10B1LOTXUSRCLK2 = 0:0:0;
	specparam SUTXBYPASS8B10B2HITXUSRCLK2 = 0:0:0, HOLDTXBYPASS8B10B2HITXUSRCLK2 = 0:0:0;
	specparam SUTXBYPASS8B10B2LOTXUSRCLK2 = 0:0:0, HOLDTXBYPASS8B10B2LOTXUSRCLK2 = 0:0:0;
	specparam SUTXBYPASS8B10B3HITXUSRCLK2 = 0:0:0, HOLDTXBYPASS8B10B3HITXUSRCLK2 = 0:0:0;
	specparam SUTXBYPASS8B10B3LOTXUSRCLK2 = 0:0:0, HOLDTXBYPASS8B10B3LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPMODE0HITXUSRCLK2 = 0:0:0, HOLDTXCHARDISPMODE0HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPMODE0LOTXUSRCLK2 = 0:0:0, HOLDTXCHARDISPMODE0LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPMODE1HITXUSRCLK2 = 0:0:0, HOLDTXCHARDISPMODE1HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPMODE1LOTXUSRCLK2 = 0:0:0, HOLDTXCHARDISPMODE1LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPMODE2HITXUSRCLK2 = 0:0:0, HOLDTXCHARDISPMODE2HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPMODE2LOTXUSRCLK2 = 0:0:0, HOLDTXCHARDISPMODE2LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPMODE3HITXUSRCLK2 = 0:0:0, HOLDTXCHARDISPMODE3HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPMODE3LOTXUSRCLK2 = 0:0:0, HOLDTXCHARDISPMODE3LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPVAL0HITXUSRCLK2 = 0:0:0, HOLDTXCHARDISPVAL0HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPVAL0LOTXUSRCLK2 = 0:0:0, HOLDTXCHARDISPVAL0LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPVAL1HITXUSRCLK2 = 0:0:0, HOLDTXCHARDISPVAL1HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPVAL1LOTXUSRCLK2 = 0:0:0, HOLDTXCHARDISPVAL1LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPVAL2HITXUSRCLK2 = 0:0:0, HOLDTXCHARDISPVAL2HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPVAL2LOTXUSRCLK2 = 0:0:0, HOLDTXCHARDISPVAL2LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPVAL3HITXUSRCLK2 = 0:0:0, HOLDTXCHARDISPVAL3HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARDISPVAL3LOTXUSRCLK2 = 0:0:0, HOLDTXCHARDISPVAL3LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARISK0HITXUSRCLK2 = 0:0:0, HOLDTXCHARISK0HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARISK0LOTXUSRCLK2 = 0:0:0, HOLDTXCHARISK0LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARISK1HITXUSRCLK2 = 0:0:0, HOLDTXCHARISK1HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARISK1LOTXUSRCLK2 = 0:0:0, HOLDTXCHARISK1LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARISK2HITXUSRCLK2 = 0:0:0, HOLDTXCHARISK2HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARISK2LOTXUSRCLK2 = 0:0:0, HOLDTXCHARISK2LOTXUSRCLK2 = 0:0:0;
	specparam SUTXCHARISK3HITXUSRCLK2 = 0:0:0, HOLDTXCHARISK3HITXUSRCLK2 = 0:0:0;
	specparam SUTXCHARISK3LOTXUSRCLK2 = 0:0:0, HOLDTXCHARISK3LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA0HITXUSRCLK2 = 0:0:0, HOLDTXDATA0HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA0LOTXUSRCLK2 = 0:0:0, HOLDTXDATA0LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA10HITXUSRCLK2 = 0:0:0, HOLDTXDATA10HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA10LOTXUSRCLK2 = 0:0:0, HOLDTXDATA10LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA11HITXUSRCLK2 = 0:0:0, HOLDTXDATA11HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA11LOTXUSRCLK2 = 0:0:0, HOLDTXDATA11LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA12HITXUSRCLK2 = 0:0:0, HOLDTXDATA12HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA12LOTXUSRCLK2 = 0:0:0, HOLDTXDATA12LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA13HITXUSRCLK2 = 0:0:0, HOLDTXDATA13HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA13LOTXUSRCLK2 = 0:0:0, HOLDTXDATA13LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA14HITXUSRCLK2 = 0:0:0, HOLDTXDATA14HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA14LOTXUSRCLK2 = 0:0:0, HOLDTXDATA14LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA15HITXUSRCLK2 = 0:0:0, HOLDTXDATA15HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA15LOTXUSRCLK2 = 0:0:0, HOLDTXDATA15LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA16HITXUSRCLK2 = 0:0:0, HOLDTXDATA16HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA16LOTXUSRCLK2 = 0:0:0, HOLDTXDATA16LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA17HITXUSRCLK2 = 0:0:0, HOLDTXDATA17HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA17LOTXUSRCLK2 = 0:0:0, HOLDTXDATA17LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA18HITXUSRCLK2 = 0:0:0, HOLDTXDATA18HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA18LOTXUSRCLK2 = 0:0:0, HOLDTXDATA18LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA19HITXUSRCLK2 = 0:0:0, HOLDTXDATA19HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA19LOTXUSRCLK2 = 0:0:0, HOLDTXDATA19LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA1HITXUSRCLK2 = 0:0:0, HOLDTXDATA1HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA1LOTXUSRCLK2 = 0:0:0, HOLDTXDATA1LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA20HITXUSRCLK2 = 0:0:0, HOLDTXDATA20HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA20LOTXUSRCLK2 = 0:0:0, HOLDTXDATA20LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA21HITXUSRCLK2 = 0:0:0, HOLDTXDATA21HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA21LOTXUSRCLK2 = 0:0:0, HOLDTXDATA21LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA22HITXUSRCLK2 = 0:0:0, HOLDTXDATA22HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA22LOTXUSRCLK2 = 0:0:0, HOLDTXDATA22LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA23HITXUSRCLK2 = 0:0:0, HOLDTXDATA23HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA23LOTXUSRCLK2 = 0:0:0, HOLDTXDATA23LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA24HITXUSRCLK2 = 0:0:0, HOLDTXDATA24HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA24LOTXUSRCLK2 = 0:0:0, HOLDTXDATA24LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA25HITXUSRCLK2 = 0:0:0, HOLDTXDATA25HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA25LOTXUSRCLK2 = 0:0:0, HOLDTXDATA25LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA26HITXUSRCLK2 = 0:0:0, HOLDTXDATA26HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA26LOTXUSRCLK2 = 0:0:0, HOLDTXDATA26LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA27HITXUSRCLK2 = 0:0:0, HOLDTXDATA27HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA27LOTXUSRCLK2 = 0:0:0, HOLDTXDATA27LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA28HITXUSRCLK2 = 0:0:0, HOLDTXDATA28HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA28LOTXUSRCLK2 = 0:0:0, HOLDTXDATA28LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA29HITXUSRCLK2 = 0:0:0, HOLDTXDATA29HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA29LOTXUSRCLK2 = 0:0:0, HOLDTXDATA29LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA2HITXUSRCLK2 = 0:0:0, HOLDTXDATA2HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA2LOTXUSRCLK2 = 0:0:0, HOLDTXDATA2LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA30HITXUSRCLK2 = 0:0:0, HOLDTXDATA30HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA30LOTXUSRCLK2 = 0:0:0, HOLDTXDATA30LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA31HITXUSRCLK2 = 0:0:0, HOLDTXDATA31HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA31LOTXUSRCLK2 = 0:0:0, HOLDTXDATA31LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA3HITXUSRCLK2 = 0:0:0, HOLDTXDATA3HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA3LOTXUSRCLK2 = 0:0:0, HOLDTXDATA3LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA4HITXUSRCLK2 = 0:0:0, HOLDTXDATA4HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA4LOTXUSRCLK2 = 0:0:0, HOLDTXDATA4LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA5HITXUSRCLK2 = 0:0:0, HOLDTXDATA5HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA5LOTXUSRCLK2 = 0:0:0, HOLDTXDATA5LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA6HITXUSRCLK2 = 0:0:0, HOLDTXDATA6HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA6LOTXUSRCLK2 = 0:0:0, HOLDTXDATA6LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA7HITXUSRCLK2 = 0:0:0, HOLDTXDATA7HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA7LOTXUSRCLK2 = 0:0:0, HOLDTXDATA7LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA8HITXUSRCLK2 = 0:0:0, HOLDTXDATA8HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA8LOTXUSRCLK2 = 0:0:0, HOLDTXDATA8LOTXUSRCLK2 = 0:0:0;
	specparam SUTXDATA9HITXUSRCLK2 = 0:0:0, HOLDTXDATA9HITXUSRCLK2 = 0:0:0;
	specparam SUTXDATA9LOTXUSRCLK2 = 0:0:0, HOLDTXDATA9LOTXUSRCLK2 = 0:0:0;
	specparam SUTXFORCECRCERRHITXUSRCLK = 0:0:0, HOLDTXFORCECRCERRHITXUSRCLK = 0:0:0;
	specparam SUTXFORCECRCERRLOTXUSRCLK = 0:0:0, HOLDTXFORCECRCERRLOTXUSRCLK = 0:0:0;
	specparam SUTXINHIBITHITXUSRCLK2 = 0:0:0, HOLDTXINHIBITHITXUSRCLK2 = 0:0:0;
	specparam SUTXINHIBITLOTXUSRCLK2 = 0:0:0, HOLDTXINHIBITLOTXUSRCLK2 = 0:0:0;
	specparam SUTXPOLARITYHITXUSRCLK2 = 0:0:0, HOLDTXPOLARITYHITXUSRCLK2 = 0:0:0;
	specparam SUTXPOLARITYLOTXUSRCLK2 = 0:0:0, HOLDTXPOLARITYLOTXUSRCLK2 = 0:0:0;
	specparam SUTXRESETHITXUSRCLK2 = 0:0:0, HOLDTXRESETHITXUSRCLK2 = 0:0:0;
	specparam SUTXRESETLOTXUSRCLK2 = 0:0:0, HOLDTXRESETLOTXUSRCLK2 = 0:0:0;
	specparam TXBUFERRDLYLH = 0:0:0, TXBUFERRDLYHL = 0:0:0;
	specparam TXBYPASS8B10B0DLYLH = 0:0:0, TXBYPASS8B10B0DLYHL = 0:0:0;
	specparam TXBYPASS8B10B1DLYLH = 0:0:0, TXBYPASS8B10B1DLYHL = 0:0:0;
	specparam TXBYPASS8B10B2DLYLH = 0:0:0, TXBYPASS8B10B2DLYHL = 0:0:0;
	specparam TXBYPASS8B10B3DLYLH = 0:0:0, TXBYPASS8B10B3DLYHL = 0:0:0;
	specparam TXCHARDISPMODE0DLYLH = 0:0:0, TXCHARDISPMODE0DLYHL = 0:0:0;
	specparam TXCHARDISPMODE1DLYLH = 0:0:0, TXCHARDISPMODE1DLYHL = 0:0:0;
	specparam TXCHARDISPMODE2DLYLH = 0:0:0, TXCHARDISPMODE2DLYHL = 0:0:0;
	specparam TXCHARDISPMODE3DLYLH = 0:0:0, TXCHARDISPMODE3DLYHL = 0:0:0;
	specparam TXCHARDISPVAL0DLYLH = 0:0:0, TXCHARDISPVAL0DLYHL = 0:0:0;
	specparam TXCHARDISPVAL1DLYLH = 0:0:0, TXCHARDISPVAL1DLYHL = 0:0:0;
	specparam TXCHARDISPVAL2DLYLH = 0:0:0, TXCHARDISPVAL2DLYHL = 0:0:0;
	specparam TXCHARDISPVAL3DLYLH = 0:0:0, TXCHARDISPVAL3DLYHL = 0:0:0;
	specparam TXCHARISK0DLYLH = 0:0:0, TXCHARISK0DLYHL = 0:0:0;
	specparam TXCHARISK1DLYLH = 0:0:0, TXCHARISK1DLYHL = 0:0:0;
	specparam TXCHARISK2DLYLH = 0:0:0, TXCHARISK2DLYHL = 0:0:0;
	specparam TXCHARISK3DLYLH = 0:0:0, TXCHARISK3DLYHL = 0:0:0;
	specparam TXDATA0DLYLH = 0:0:0, TXDATA0DLYHL = 0:0:0;
	specparam TXDATA10DLYLH = 0:0:0, TXDATA10DLYHL = 0:0:0;
	specparam TXDATA11DLYLH = 0:0:0, TXDATA11DLYHL = 0:0:0;
	specparam TXDATA12DLYLH = 0:0:0, TXDATA12DLYHL = 0:0:0;
	specparam TXDATA13DLYLH = 0:0:0, TXDATA13DLYHL = 0:0:0;
	specparam TXDATA14DLYLH = 0:0:0, TXDATA14DLYHL = 0:0:0;
	specparam TXDATA15DLYLH = 0:0:0, TXDATA15DLYHL = 0:0:0;
	specparam TXDATA16DLYLH = 0:0:0, TXDATA16DLYHL = 0:0:0;
	specparam TXDATA17DLYLH = 0:0:0, TXDATA17DLYHL = 0:0:0;
	specparam TXDATA18DLYLH = 0:0:0, TXDATA18DLYHL = 0:0:0;
	specparam TXDATA19DLYLH = 0:0:0, TXDATA19DLYHL = 0:0:0;
	specparam TXDATA1DLYLH = 0:0:0, TXDATA1DLYHL = 0:0:0;
	specparam TXDATA20DLYLH = 0:0:0, TXDATA20DLYHL = 0:0:0;
	specparam TXDATA21DLYLH = 0:0:0, TXDATA21DLYHL = 0:0:0;
	specparam TXDATA22DLYLH = 0:0:0, TXDATA22DLYHL = 0:0:0;
	specparam TXDATA23DLYLH = 0:0:0, TXDATA23DLYHL = 0:0:0;
	specparam TXDATA24DLYLH = 0:0:0, TXDATA24DLYHL = 0:0:0;
	specparam TXDATA25DLYLH = 0:0:0, TXDATA25DLYHL = 0:0:0;
	specparam TXDATA26DLYLH = 0:0:0, TXDATA26DLYHL = 0:0:0;
	specparam TXDATA27DLYLH = 0:0:0, TXDATA27DLYHL = 0:0:0;
	specparam TXDATA28DLYLH = 0:0:0, TXDATA28DLYHL = 0:0:0;
	specparam TXDATA29DLYLH = 0:0:0, TXDATA29DLYHL = 0:0:0;
	specparam TXDATA2DLYLH = 0:0:0, TXDATA2DLYHL = 0:0:0;
	specparam TXDATA30DLYLH = 0:0:0, TXDATA30DLYHL = 0:0:0;
	specparam TXDATA31DLYLH = 0:0:0, TXDATA31DLYHL = 0:0:0;
	specparam TXDATA3DLYLH = 0:0:0, TXDATA3DLYHL = 0:0:0;
	specparam TXDATA4DLYLH = 0:0:0, TXDATA4DLYHL = 0:0:0;
	specparam TXDATA5DLYLH = 0:0:0, TXDATA5DLYHL = 0:0:0;
	specparam TXDATA6DLYLH = 0:0:0, TXDATA6DLYHL = 0:0:0;
	specparam TXDATA7DLYLH = 0:0:0, TXDATA7DLYHL = 0:0:0;
	specparam TXDATA8DLYLH = 0:0:0, TXDATA8DLYHL = 0:0:0;
	specparam TXDATA9DLYLH = 0:0:0, TXDATA9DLYHL = 0:0:0;
	specparam TXFORCECRCERRDLYLH = 0:0:0, TXFORCECRCERRDLYHL = 0:0:0;
	specparam TXINHIBITDLYLH = 0:0:0, TXINHIBITDLYHL = 0:0:0;
	specparam TXKERR0DLYLH = 0:0:0, TXKERR0DLYHL = 0:0:0;
	specparam TXKERR1DLYLH = 0:0:0, TXKERR1DLYHL = 0:0:0;
	specparam TXKERR2DLYLH = 0:0:0, TXKERR2DLYHL = 0:0:0;
	specparam TXKERR3DLYLH = 0:0:0, TXKERR3DLYHL = 0:0:0;
	specparam TXPOLARITYDLYLH = 0:0:0, TXPOLARITYDLYHL = 0:0:0;
	specparam TXRESETDLYLH = 0:0:0, TXRESETDLYHL = 0:0:0;
	specparam TXRUNDISP0DLYLH = 0:0:0, TXRUNDISP0DLYHL = 0:0:0;
	specparam TXRUNDISP1DLYLH = 0:0:0, TXRUNDISP1DLYHL = 0:0:0;
	specparam TXRUNDISP2DLYLH = 0:0:0, TXRUNDISP2DLYHL = 0:0:0;
	specparam TXRUNDISP3DLYLH = 0:0:0, TXRUNDISP3DLYHL = 0:0:0;
	specparam TXUSRCLK2DLYLH = 0:0:0, TXUSRCLK2DLYHL = 0:0:0;
	specparam TXUSRCLKDLYLH = 0:0:0, TXUSRCLKDLYHL = 0:0:0;


	$period (posedge BREFCLK, MINPERBREFCLK, notifier);
	$period (posedge BREFCLK2, MINPERBREFCLK2, notifier);
	$period (posedge REFCLK, MINPERREFCLK, notifier);
	$period (posedge REFCLK2, MINPERREFCLK2, notifier);
	$setuphold (posedge RXUSRCLK, negedge CHBONDI[0], SUCHBONDI0LORXUSRCLK, HOLDCHBONDI0LORXUSRCLK);
	$setuphold (posedge RXUSRCLK, negedge CHBONDI[1], SUCHBONDI1LORXUSRCLK, HOLDCHBONDI1LORXUSRCLK);
	$setuphold (posedge RXUSRCLK, negedge CHBONDI[2], SUCHBONDI2LORXUSRCLK, HOLDCHBONDI2LORXUSRCLK);
	$setuphold (posedge RXUSRCLK, negedge CHBONDI[3], SUCHBONDI3LORXUSRCLK, HOLDCHBONDI3LORXUSRCLK);
	$setuphold (posedge RXUSRCLK, posedge CHBONDI[0], SUCHBONDI0HIRXUSRCLK, HOLDCHBONDI0HIRXUSRCLK);
	$setuphold (posedge RXUSRCLK, posedge CHBONDI[1], SUCHBONDI1HIRXUSRCLK, HOLDCHBONDI1HIRXUSRCLK);
	$setuphold (posedge RXUSRCLK, posedge CHBONDI[2], SUCHBONDI2HIRXUSRCLK, HOLDCHBONDI2HIRXUSRCLK);
	$setuphold (posedge RXUSRCLK, posedge CHBONDI[3], SUCHBONDI3HIRXUSRCLK, HOLDCHBONDI3HIRXUSRCLK);
	$setuphold (posedge RXUSRCLK2, negedge ENCHANSYNC, SUENCHANSYNCLORXUSRCLK2, HOLDENCHANSYNCLORXUSRCLK2);
	$setuphold (posedge RXUSRCLK2, negedge RXPOLARITY, SURXPOLARITYLORXUSRCLK2, HOLDRXPOLARITYLORXUSRCLK2);
	$setuphold (posedge RXUSRCLK2, negedge RXRESET, SURXRESETLORXUSRCLK2, HOLDRXRESETLORXUSRCLK2);
	$setuphold (posedge RXUSRCLK2, posedge ENCHANSYNC, SUENCHANSYNCHIRXUSRCLK2, HOLDENCHANSYNCHIRXUSRCLK2);
	$setuphold (posedge RXUSRCLK2, posedge RXPOLARITY, SURXPOLARITYHIRXUSRCLK2, HOLDRXPOLARITYHIRXUSRCLK2);
	$setuphold (posedge RXUSRCLK2, posedge RXRESET, SURXRESETHIRXUSRCLK2, HOLDRXRESETHIRXUSRCLK2);
	$setuphold (posedge TXUSRCLK, negedge TXFORCECRCERR, SUTXFORCECRCERRLOTXUSRCLK, HOLDTXFORCECRCERRLOTXUSRCLK);
	$setuphold (posedge TXUSRCLK, posedge TXFORCECRCERR, SUTXFORCECRCERRHITXUSRCLK, HOLDTXFORCECRCERRHITXUSRCLK);
	$setuphold (posedge TXUSRCLK2, negedge CONFIGENABLE, SUCONFIGENABLELOTXUSRCLK2, HOLDCONFIGENABLELOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge CONFIGIN, SUCONFIGINLOTXUSRCLK2, HOLDCONFIGINLOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge LOOPBACK[0], SULOOPBACK0LOTXUSRCLK2, HOLDLOOPBACK0LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge LOOPBACK[1], SULOOPBACK1LOTXUSRCLK2, HOLDLOOPBACK1LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXBYPASS8B10B[0], SUTXBYPASS8B10B0LOTXUSRCLK2, HOLDTXBYPASS8B10B0LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXBYPASS8B10B[1], SUTXBYPASS8B10B1LOTXUSRCLK2, HOLDTXBYPASS8B10B1LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXBYPASS8B10B[2], SUTXBYPASS8B10B2LOTXUSRCLK2, HOLDTXBYPASS8B10B2LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXBYPASS8B10B[3], SUTXBYPASS8B10B3LOTXUSRCLK2, HOLDTXBYPASS8B10B3LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARDISPMODE[0], SUTXCHARDISPMODE0LOTXUSRCLK2, HOLDTXCHARDISPMODE0LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARDISPMODE[1], SUTXCHARDISPMODE1LOTXUSRCLK2, HOLDTXCHARDISPMODE1LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARDISPMODE[2], SUTXCHARDISPMODE2LOTXUSRCLK2, HOLDTXCHARDISPMODE2LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARDISPMODE[3], SUTXCHARDISPMODE3LOTXUSRCLK2, HOLDTXCHARDISPMODE3LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARDISPVAL[0], SUTXCHARDISPVAL0LOTXUSRCLK2, HOLDTXCHARDISPVAL0LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARDISPVAL[1], SUTXCHARDISPVAL1LOTXUSRCLK2, HOLDTXCHARDISPVAL1LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARDISPVAL[2], SUTXCHARDISPVAL2LOTXUSRCLK2, HOLDTXCHARDISPVAL2LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARDISPVAL[3], SUTXCHARDISPVAL3LOTXUSRCLK2, HOLDTXCHARDISPVAL3LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARISK[0], SUTXCHARISK0LOTXUSRCLK2, HOLDTXCHARISK0LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARISK[1], SUTXCHARISK1LOTXUSRCLK2, HOLDTXCHARISK1LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARISK[2], SUTXCHARISK2LOTXUSRCLK2, HOLDTXCHARISK2LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXCHARISK[3], SUTXCHARISK3LOTXUSRCLK2, HOLDTXCHARISK3LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[0], SUTXDATA0LOTXUSRCLK2, HOLDTXDATA0LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[10], SUTXDATA10LOTXUSRCLK2, HOLDTXDATA10LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[11], SUTXDATA11LOTXUSRCLK2, HOLDTXDATA11LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[12], SUTXDATA12LOTXUSRCLK2, HOLDTXDATA12LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[13], SUTXDATA13LOTXUSRCLK2, HOLDTXDATA13LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[14], SUTXDATA14LOTXUSRCLK2, HOLDTXDATA14LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[15], SUTXDATA15LOTXUSRCLK2, HOLDTXDATA15LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[16], SUTXDATA16LOTXUSRCLK2, HOLDTXDATA16LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[17], SUTXDATA17LOTXUSRCLK2, HOLDTXDATA17LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[18], SUTXDATA18LOTXUSRCLK2, HOLDTXDATA18LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[19], SUTXDATA19LOTXUSRCLK2, HOLDTXDATA19LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[1], SUTXDATA1LOTXUSRCLK2, HOLDTXDATA1LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[20], SUTXDATA20LOTXUSRCLK2, HOLDTXDATA20LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[21], SUTXDATA21LOTXUSRCLK2, HOLDTXDATA21LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[22], SUTXDATA22LOTXUSRCLK2, HOLDTXDATA22LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[23], SUTXDATA23LOTXUSRCLK2, HOLDTXDATA23LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[24], SUTXDATA24LOTXUSRCLK2, HOLDTXDATA24LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[25], SUTXDATA25LOTXUSRCLK2, HOLDTXDATA25LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[26], SUTXDATA26LOTXUSRCLK2, HOLDTXDATA26LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[27], SUTXDATA27LOTXUSRCLK2, HOLDTXDATA27LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[28], SUTXDATA28LOTXUSRCLK2, HOLDTXDATA28LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[29], SUTXDATA29LOTXUSRCLK2, HOLDTXDATA29LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[2], SUTXDATA2LOTXUSRCLK2, HOLDTXDATA2LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[30], SUTXDATA30LOTXUSRCLK2, HOLDTXDATA30LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[31], SUTXDATA31LOTXUSRCLK2, HOLDTXDATA31LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[3], SUTXDATA3LOTXUSRCLK2, HOLDTXDATA3LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[4], SUTXDATA4LOTXUSRCLK2, HOLDTXDATA4LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[5], SUTXDATA5LOTXUSRCLK2, HOLDTXDATA5LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[6], SUTXDATA6LOTXUSRCLK2, HOLDTXDATA6LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[7], SUTXDATA7LOTXUSRCLK2, HOLDTXDATA7LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[8], SUTXDATA8LOTXUSRCLK2, HOLDTXDATA8LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXDATA[9], SUTXDATA9LOTXUSRCLK2, HOLDTXDATA9LOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXINHIBIT, SUTXINHIBITLOTXUSRCLK2, HOLDTXINHIBITLOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXPOLARITY, SUTXPOLARITYLOTXUSRCLK2, HOLDTXPOLARITYLOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, negedge TXRESET, SUTXRESETLOTXUSRCLK2, HOLDTXRESETLOTXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge CONFIGENABLE, SUCONFIGENABLEHITXUSRCLK2, HOLDCONFIGENABLEHITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge CONFIGIN, SUCONFIGINHITXUSRCLK2, HOLDCONFIGINHITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge LOOPBACK[0], SULOOPBACK0HITXUSRCLK2, HOLDLOOPBACK0HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge LOOPBACK[1], SULOOPBACK1HITXUSRCLK2, HOLDLOOPBACK1HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXBYPASS8B10B[0], SUTXBYPASS8B10B0HITXUSRCLK2, HOLDTXBYPASS8B10B0HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXBYPASS8B10B[1], SUTXBYPASS8B10B1HITXUSRCLK2, HOLDTXBYPASS8B10B1HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXBYPASS8B10B[2], SUTXBYPASS8B10B2HITXUSRCLK2, HOLDTXBYPASS8B10B2HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXBYPASS8B10B[3], SUTXBYPASS8B10B3HITXUSRCLK2, HOLDTXBYPASS8B10B3HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARDISPMODE[0], SUTXCHARDISPMODE0HITXUSRCLK2, HOLDTXCHARDISPMODE0HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARDISPMODE[1], SUTXCHARDISPMODE1HITXUSRCLK2, HOLDTXCHARDISPMODE1HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARDISPMODE[2], SUTXCHARDISPMODE2HITXUSRCLK2, HOLDTXCHARDISPMODE2HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARDISPMODE[3], SUTXCHARDISPMODE3HITXUSRCLK2, HOLDTXCHARDISPMODE3HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARDISPVAL[0], SUTXCHARDISPVAL0HITXUSRCLK2, HOLDTXCHARDISPVAL0HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARDISPVAL[1], SUTXCHARDISPVAL1HITXUSRCLK2, HOLDTXCHARDISPVAL1HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARDISPVAL[2], SUTXCHARDISPVAL2HITXUSRCLK2, HOLDTXCHARDISPVAL2HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARDISPVAL[3], SUTXCHARDISPVAL3HITXUSRCLK2, HOLDTXCHARDISPVAL3HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARISK[0], SUTXCHARISK0HITXUSRCLK2, HOLDTXCHARISK0HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARISK[1], SUTXCHARISK1HITXUSRCLK2, HOLDTXCHARISK1HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARISK[2], SUTXCHARISK2HITXUSRCLK2, HOLDTXCHARISK2HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXCHARISK[3], SUTXCHARISK3HITXUSRCLK2, HOLDTXCHARISK3HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[0], SUTXDATA0HITXUSRCLK2, HOLDTXDATA0HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[10], SUTXDATA10HITXUSRCLK2, HOLDTXDATA10HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[11], SUTXDATA11HITXUSRCLK2, HOLDTXDATA11HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[12], SUTXDATA12HITXUSRCLK2, HOLDTXDATA12HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[13], SUTXDATA13HITXUSRCLK2, HOLDTXDATA13HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[14], SUTXDATA14HITXUSRCLK2, HOLDTXDATA14HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[15], SUTXDATA15HITXUSRCLK2, HOLDTXDATA15HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[16], SUTXDATA16HITXUSRCLK2, HOLDTXDATA16HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[17], SUTXDATA17HITXUSRCLK2, HOLDTXDATA17HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[18], SUTXDATA18HITXUSRCLK2, HOLDTXDATA18HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[19], SUTXDATA19HITXUSRCLK2, HOLDTXDATA19HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[1], SUTXDATA1HITXUSRCLK2, HOLDTXDATA1HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[20], SUTXDATA20HITXUSRCLK2, HOLDTXDATA20HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[21], SUTXDATA21HITXUSRCLK2, HOLDTXDATA21HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[22], SUTXDATA22HITXUSRCLK2, HOLDTXDATA22HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[23], SUTXDATA23HITXUSRCLK2, HOLDTXDATA23HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[24], SUTXDATA24HITXUSRCLK2, HOLDTXDATA24HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[25], SUTXDATA25HITXUSRCLK2, HOLDTXDATA25HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[26], SUTXDATA26HITXUSRCLK2, HOLDTXDATA26HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[27], SUTXDATA27HITXUSRCLK2, HOLDTXDATA27HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[28], SUTXDATA28HITXUSRCLK2, HOLDTXDATA28HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[29], SUTXDATA29HITXUSRCLK2, HOLDTXDATA29HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[2], SUTXDATA2HITXUSRCLK2, HOLDTXDATA2HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[30], SUTXDATA30HITXUSRCLK2, HOLDTXDATA30HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[31], SUTXDATA31HITXUSRCLK2, HOLDTXDATA31HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[3], SUTXDATA3HITXUSRCLK2, HOLDTXDATA3HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[4], SUTXDATA4HITXUSRCLK2, HOLDTXDATA4HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[5], SUTXDATA5HITXUSRCLK2, HOLDTXDATA5HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[6], SUTXDATA6HITXUSRCLK2, HOLDTXDATA6HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[7], SUTXDATA7HITXUSRCLK2, HOLDTXDATA7HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[8], SUTXDATA8HITXUSRCLK2, HOLDTXDATA8HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXDATA[9], SUTXDATA9HITXUSRCLK2, HOLDTXDATA9HITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXINHIBIT, SUTXINHIBITHITXUSRCLK2, HOLDTXINHIBITHITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXPOLARITY, SUTXPOLARITYHITXUSRCLK2, HOLDTXPOLARITYHITXUSRCLK2);
	$setuphold (posedge TXUSRCLK2, posedge TXRESET, SUTXRESETHITXUSRCLK2, HOLDTXRESETHITXUSRCLK2);
	$width (negedge BREFCLK, PWBREFCLKLO, 0, notifier);
	$width (negedge BREFCLK2, PWBREFCLK2LO, 0, notifier);
	$width (negedge REFCLK, PWREFCLKLO, 0, notifier);
	$width (negedge REFCLK2, PWREFCLK2LO, 0, notifier);
	$width (posedge BREFCLK, PWBREFCLKHI, 0, notifier);
	$width (posedge BREFCLK2, PWBREFCLK2HI, 0, notifier);
	$width (posedge REFCLK, PWREFCLKHI, 0, notifier);
	$width (posedge REFCLK2, PWREFCLK2HI, 0, notifier);
	(RXUSRCLK => CHBONDO[0]) = (RXUSRCLKDLYLH + CHBONDO0DLYLH, RXUSRCLKDLYHL + CHBONDO0DLYHL);
	(RXUSRCLK => CHBONDO[1]) = (RXUSRCLKDLYLH + CHBONDO1DLYLH, RXUSRCLKDLYHL + CHBONDO1DLYHL);
	(RXUSRCLK => CHBONDO[2]) = (RXUSRCLKDLYLH + CHBONDO2DLYLH, RXUSRCLKDLYHL + CHBONDO2DLYHL);
	(RXUSRCLK => CHBONDO[3]) = (RXUSRCLKDLYLH + CHBONDO3DLYLH, RXUSRCLKDLYHL + CHBONDO3DLYHL);
	(RXUSRCLK2 => CHBONDDONE) = (RXUSRCLK2DLYLH + CHBONDDONEDLYLH, RXUSRCLK2DLYHL + CHBONDDONEDLYHL);
	(RXUSRCLK2 => RXBUFSTATUS[0]) = (RXUSRCLK2DLYLH + RXBUFSTATUS0DLYLH, RXUSRCLK2DLYHL + RXBUFSTATUS0DLYHL);
	(RXUSRCLK2 => RXBUFSTATUS[1]) = (RXUSRCLK2DLYLH + RXBUFSTATUS1DLYLH, RXUSRCLK2DLYHL + RXBUFSTATUS1DLYHL);
	(RXUSRCLK2 => RXCHARISCOMMA[0]) = (RXUSRCLK2DLYLH + RXCHARISCOMMA0DLYLH, RXUSRCLK2DLYHL + RXCHARISCOMMA0DLYHL);
	(RXUSRCLK2 => RXCHARISCOMMA[1]) = (RXUSRCLK2DLYLH + RXCHARISCOMMA1DLYLH, RXUSRCLK2DLYHL + RXCHARISCOMMA1DLYHL);
	(RXUSRCLK2 => RXCHARISCOMMA[2]) = (RXUSRCLK2DLYLH + RXCHARISCOMMA2DLYLH, RXUSRCLK2DLYHL + RXCHARISCOMMA2DLYHL);
	(RXUSRCLK2 => RXCHARISCOMMA[3]) = (RXUSRCLK2DLYLH + RXCHARISCOMMA3DLYLH, RXUSRCLK2DLYHL + RXCHARISCOMMA3DLYHL);
	(RXUSRCLK2 => RXCHARISK[0]) = (RXUSRCLK2DLYLH + RXCHARISK0DLYLH, RXUSRCLK2DLYHL + RXCHARISK0DLYHL);
	(RXUSRCLK2 => RXCHARISK[1]) = (RXUSRCLK2DLYLH + RXCHARISK1DLYLH, RXUSRCLK2DLYHL + RXCHARISK1DLYHL);
	(RXUSRCLK2 => RXCHARISK[2]) = (RXUSRCLK2DLYLH + RXCHARISK2DLYLH, RXUSRCLK2DLYHL + RXCHARISK2DLYHL);
	(RXUSRCLK2 => RXCHARISK[3]) = (RXUSRCLK2DLYLH + RXCHARISK3DLYLH, RXUSRCLK2DLYHL + RXCHARISK3DLYHL);
	(RXUSRCLK2 => RXCHECKINGCRC) = (RXUSRCLK2DLYLH + RXCHECKINGCRCDLYLH, RXUSRCLK2DLYHL + RXCHECKINGCRCDLYHL);
	(RXUSRCLK2 => RXCLKCORCNT[0]) = (RXUSRCLK2DLYLH + RXCLKCORCNT0DLYLH, RXUSRCLK2DLYHL + RXCLKCORCNT0DLYHL);
	(RXUSRCLK2 => RXCLKCORCNT[1]) = (RXUSRCLK2DLYLH + RXCLKCORCNT1DLYLH, RXUSRCLK2DLYHL + RXCLKCORCNT1DLYHL);
	(RXUSRCLK2 => RXCLKCORCNT[2]) = (RXUSRCLK2DLYLH + RXCLKCORCNT2DLYLH, RXUSRCLK2DLYHL + RXCLKCORCNT2DLYHL);
	(RXUSRCLK2 => RXCOMMADET) = (RXUSRCLK2DLYLH + RXCOMMADETDLYLH, RXUSRCLK2DLYHL + RXCOMMADETDLYHL);
	(RXUSRCLK2 => RXCRCERR) = (RXUSRCLK2DLYLH + RXCRCERRDLYLH, RXUSRCLK2DLYHL + RXCRCERRDLYHL);
	(RXUSRCLK2 => RXDATA[0]) = (RXUSRCLK2DLYLH + RXDATA0DLYLH, RXUSRCLK2DLYHL + RXDATA0DLYHL);
	(RXUSRCLK2 => RXDATA[10]) = (RXUSRCLK2DLYLH + RXDATA10DLYLH, RXUSRCLK2DLYHL + RXDATA10DLYHL);
	(RXUSRCLK2 => RXDATA[11]) = (RXUSRCLK2DLYLH + RXDATA11DLYLH, RXUSRCLK2DLYHL + RXDATA11DLYHL);
	(RXUSRCLK2 => RXDATA[12]) = (RXUSRCLK2DLYLH + RXDATA12DLYLH, RXUSRCLK2DLYHL + RXDATA12DLYHL);
	(RXUSRCLK2 => RXDATA[13]) = (RXUSRCLK2DLYLH + RXDATA13DLYLH, RXUSRCLK2DLYHL + RXDATA13DLYHL);
	(RXUSRCLK2 => RXDATA[14]) = (RXUSRCLK2DLYLH + RXDATA14DLYLH, RXUSRCLK2DLYHL + RXDATA14DLYHL);
	(RXUSRCLK2 => RXDATA[15]) = (RXUSRCLK2DLYLH + RXDATA15DLYLH, RXUSRCLK2DLYHL + RXDATA15DLYHL);
	(RXUSRCLK2 => RXDATA[16]) = (RXUSRCLK2DLYLH + RXDATA16DLYLH, RXUSRCLK2DLYHL + RXDATA16DLYHL);
	(RXUSRCLK2 => RXDATA[17]) = (RXUSRCLK2DLYLH + RXDATA17DLYLH, RXUSRCLK2DLYHL + RXDATA17DLYHL);
	(RXUSRCLK2 => RXDATA[18]) = (RXUSRCLK2DLYLH + RXDATA18DLYLH, RXUSRCLK2DLYHL + RXDATA18DLYHL);
	(RXUSRCLK2 => RXDATA[19]) = (RXUSRCLK2DLYLH + RXDATA19DLYLH, RXUSRCLK2DLYHL + RXDATA19DLYHL);
	(RXUSRCLK2 => RXDATA[1]) = (RXUSRCLK2DLYLH + RXDATA1DLYLH, RXUSRCLK2DLYHL + RXDATA1DLYHL);
	(RXUSRCLK2 => RXDATA[20]) = (RXUSRCLK2DLYLH + RXDATA20DLYLH, RXUSRCLK2DLYHL + RXDATA20DLYHL);
	(RXUSRCLK2 => RXDATA[21]) = (RXUSRCLK2DLYLH + RXDATA21DLYLH, RXUSRCLK2DLYHL + RXDATA21DLYHL);
	(RXUSRCLK2 => RXDATA[22]) = (RXUSRCLK2DLYLH + RXDATA22DLYLH, RXUSRCLK2DLYHL + RXDATA22DLYHL);
	(RXUSRCLK2 => RXDATA[23]) = (RXUSRCLK2DLYLH + RXDATA23DLYLH, RXUSRCLK2DLYHL + RXDATA23DLYHL);
	(RXUSRCLK2 => RXDATA[24]) = (RXUSRCLK2DLYLH + RXDATA24DLYLH, RXUSRCLK2DLYHL + RXDATA24DLYHL);
	(RXUSRCLK2 => RXDATA[25]) = (RXUSRCLK2DLYLH + RXDATA25DLYLH, RXUSRCLK2DLYHL + RXDATA25DLYHL);
	(RXUSRCLK2 => RXDATA[26]) = (RXUSRCLK2DLYLH + RXDATA26DLYLH, RXUSRCLK2DLYHL + RXDATA26DLYHL);
	(RXUSRCLK2 => RXDATA[27]) = (RXUSRCLK2DLYLH + RXDATA27DLYLH, RXUSRCLK2DLYHL + RXDATA27DLYHL);
	(RXUSRCLK2 => RXDATA[28]) = (RXUSRCLK2DLYLH + RXDATA28DLYLH, RXUSRCLK2DLYHL + RXDATA28DLYHL);
	(RXUSRCLK2 => RXDATA[29]) = (RXUSRCLK2DLYLH + RXDATA29DLYLH, RXUSRCLK2DLYHL + RXDATA29DLYHL);
	(RXUSRCLK2 => RXDATA[2]) = (RXUSRCLK2DLYLH + RXDATA2DLYLH, RXUSRCLK2DLYHL + RXDATA2DLYHL);
	(RXUSRCLK2 => RXDATA[30]) = (RXUSRCLK2DLYLH + RXDATA30DLYLH, RXUSRCLK2DLYHL + RXDATA30DLYHL);
	(RXUSRCLK2 => RXDATA[31]) = (RXUSRCLK2DLYLH + RXDATA31DLYLH, RXUSRCLK2DLYHL + RXDATA31DLYHL);
	(RXUSRCLK2 => RXDATA[3]) = (RXUSRCLK2DLYLH + RXDATA3DLYLH, RXUSRCLK2DLYHL + RXDATA3DLYHL);
	(RXUSRCLK2 => RXDATA[4]) = (RXUSRCLK2DLYLH + RXDATA4DLYLH, RXUSRCLK2DLYHL + RXDATA4DLYHL);
	(RXUSRCLK2 => RXDATA[5]) = (RXUSRCLK2DLYLH + RXDATA5DLYLH, RXUSRCLK2DLYHL + RXDATA5DLYHL);
	(RXUSRCLK2 => RXDATA[6]) = (RXUSRCLK2DLYLH + RXDATA6DLYLH, RXUSRCLK2DLYHL + RXDATA6DLYHL);
	(RXUSRCLK2 => RXDATA[7]) = (RXUSRCLK2DLYLH + RXDATA7DLYLH, RXUSRCLK2DLYHL + RXDATA7DLYHL);
	(RXUSRCLK2 => RXDATA[8]) = (RXUSRCLK2DLYLH + RXDATA8DLYLH, RXUSRCLK2DLYHL + RXDATA8DLYHL);
	(RXUSRCLK2 => RXDATA[9]) = (RXUSRCLK2DLYLH + RXDATA9DLYLH, RXUSRCLK2DLYHL + RXDATA9DLYHL);
	(RXUSRCLK2 => RXDISPERR[0]) = (RXUSRCLK2DLYLH + RXDISPERR0DLYLH, RXUSRCLK2DLYHL + RXDISPERR0DLYHL);
	(RXUSRCLK2 => RXDISPERR[1]) = (RXUSRCLK2DLYLH + RXDISPERR1DLYLH, RXUSRCLK2DLYHL + RXDISPERR1DLYHL);
	(RXUSRCLK2 => RXDISPERR[2]) = (RXUSRCLK2DLYLH + RXDISPERR2DLYLH, RXUSRCLK2DLYHL + RXDISPERR2DLYHL);
	(RXUSRCLK2 => RXDISPERR[3]) = (RXUSRCLK2DLYLH + RXDISPERR3DLYLH, RXUSRCLK2DLYHL + RXDISPERR3DLYHL);
	(RXUSRCLK2 => RXLOSSOFSYNC[0]) = (RXUSRCLK2DLYLH + RXLOSSOFSYNC0DLYLH, RXUSRCLK2DLYHL + RXLOSSOFSYNC0DLYHL);
	(RXUSRCLK2 => RXLOSSOFSYNC[1]) = (RXUSRCLK2DLYLH + RXLOSSOFSYNC1DLYLH, RXUSRCLK2DLYHL + RXLOSSOFSYNC1DLYHL);
	(RXUSRCLK2 => RXNOTINTABLE[0]) = (RXUSRCLK2DLYLH + RXNOTINTABLE0DLYLH, RXUSRCLK2DLYHL + RXNOTINTABLE0DLYHL);
	(RXUSRCLK2 => RXNOTINTABLE[1]) = (RXUSRCLK2DLYLH + RXNOTINTABLE1DLYLH, RXUSRCLK2DLYHL + RXNOTINTABLE1DLYHL);
	(RXUSRCLK2 => RXNOTINTABLE[2]) = (RXUSRCLK2DLYLH + RXNOTINTABLE2DLYLH, RXUSRCLK2DLYHL + RXNOTINTABLE2DLYHL);
	(RXUSRCLK2 => RXNOTINTABLE[3]) = (RXUSRCLK2DLYLH + RXNOTINTABLE3DLYLH, RXUSRCLK2DLYHL + RXNOTINTABLE3DLYHL);
	(RXUSRCLK2 => RXREALIGN) = (RXUSRCLK2DLYLH + RXREALIGNDLYLH, RXUSRCLK2DLYHL + RXREALIGNDLYHL);
	(RXUSRCLK2 => RXRUNDISP[0]) = (RXUSRCLK2DLYLH + RXRUNDISP0DLYLH, RXUSRCLK2DLYHL + RXRUNDISP0DLYHL);
	(RXUSRCLK2 => RXRUNDISP[1]) = (RXUSRCLK2DLYLH + RXRUNDISP1DLYLH, RXUSRCLK2DLYHL + RXRUNDISP1DLYHL);
	(RXUSRCLK2 => RXRUNDISP[2]) = (RXUSRCLK2DLYLH + RXRUNDISP2DLYLH, RXUSRCLK2DLYHL + RXRUNDISP2DLYHL);
	(RXUSRCLK2 => RXRUNDISP[3]) = (RXUSRCLK2DLYLH + RXRUNDISP3DLYLH, RXUSRCLK2DLYHL + RXRUNDISP3DLYHL);
	(TXUSRCLK2 => CONFIGOUT) = (TXUSRCLK2DLYLH + CONFIGOUTDLYLH, TXUSRCLK2DLYHL + CONFIGOUTDLYHL);
	(TXUSRCLK2 => TXBUFERR) = (TXUSRCLK2DLYLH + TXBUFERRDLYLH, TXUSRCLK2DLYHL + TXBUFERRDLYHL);
	(TXUSRCLK2 => TXKERR[0]) = (TXUSRCLK2DLYLH + TXKERR0DLYLH, TXUSRCLK2DLYHL + TXKERR0DLYHL);
	(TXUSRCLK2 => TXKERR[1]) = (TXUSRCLK2DLYLH + TXKERR1DLYLH, TXUSRCLK2DLYHL + TXKERR1DLYHL);
	(TXUSRCLK2 => TXKERR[2]) = (TXUSRCLK2DLYLH + TXKERR2DLYLH, TXUSRCLK2DLYHL + TXKERR2DLYHL);
	(TXUSRCLK2 => TXKERR[3]) = (TXUSRCLK2DLYLH + TXKERR3DLYLH, TXUSRCLK2DLYHL + TXKERR3DLYHL);
	(TXUSRCLK2 => TXRUNDISP[0]) = (TXUSRCLK2DLYLH + TXRUNDISP0DLYLH, TXUSRCLK2DLYHL + TXRUNDISP0DLYHL);
	(TXUSRCLK2 => TXRUNDISP[1]) = (TXUSRCLK2DLYLH + TXRUNDISP1DLYLH, TXUSRCLK2DLYHL + TXRUNDISP1DLYHL);
	(TXUSRCLK2 => TXRUNDISP[2]) = (TXUSRCLK2DLYLH + TXRUNDISP2DLYLH, TXUSRCLK2DLYHL + TXRUNDISP2DLYHL);
	(TXUSRCLK2 => TXRUNDISP[3]) = (TXUSRCLK2DLYLH + TXRUNDISP3DLYLH, TXUSRCLK2DLYHL + TXRUNDISP3DLYHL);
endspecify
endmodule
