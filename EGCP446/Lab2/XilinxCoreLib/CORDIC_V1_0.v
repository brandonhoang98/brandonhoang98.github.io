//------------------------------------------------------------------------------
// Copyright 2000 Xilinx, Inc. All rights reserved.
// ================================================
// $Header: /devl/xcs/repo/env/Databases/ip/src/com/xilinx/ip/cordic_v1_0/simulation/CORDIC_V1_0.v,v 1.2 2002/03/29 15:55:15 janeh Exp $
//------------------------------------------------------------------------------
// Project  : cordic_v1_0
// CORDIC_v1_0.v
//-------------------------------------------------------------
//-------------------------------------------------------------
//
//
//-------------------------------------------------------------

`timescale 1ns/10ps

`define C_SET 0
`define C_CLEAR 1
`define C_OVERRIDE 0
`define C_NO_OVERRIDE 1
`define C_ADD 0
`define C_SUB 1
`define C_ADD_SUB 2
`define C_SIGNED 0
`define C_UNSIGNED 1
`define C_PIN 2
`define all1s {C_WIDTH{1'b1}}
`define all0s 'b0
`define allXs {C_WIDTH{1'bx}}

// Used to set c_cordic_function
`define C_F_ROTATE 0
`define C_F_TRANSLATE 1
`define C_F_SIN_COS 2
`define C_F_ATAN 3
`define C_F_SINH_COSH 4
`define C_F_ATANH 5
`define C_F_SQRT 6
`define C_F_DEFAULT 7
// Used to set c_architecture
`define C_BSER_ARCH 0
`define C_WSER_ARCH 1
`define C_PARA_ARCH 2
// Used to set Data FORMAT
`define C_FORMAT_RADS 0
`define C_FORMAT_JRADS 1
// Used to set c_round_mode
`define C_ROUND_TRUNCATE 0
`define C_ROUND_POS_INF 1
`define C_ROUND_POS_NEG_INF 2
// Used to set c_scale_comp
`define C_SCALE_NONE 0
`define C_SCALE_CCM 1
// Used to set c_pipeline_mode
`define C_PIPE_NONE 0
`define C_PIPE_OPT -1
`define C_PIPE_MAX -2
// Used to set c_replications
`define C_REPL_NONE 0
`define C_REPL_OPT -1
`define C_REPL_MAX -2
// Used to set engine mode
`define C_EM_ROTATIONAL 1'b0
`define C_EM_TRANSLATION 1'b1

`define C_CORDIC_IO_CNT 6

`define C_WSER_SLICE_OPT 16

`define C_MAX_ROM_WIDTH 72
`define C_MAX_ROM_LENGTH 64

`define C_CTRL_WIDTH_F_TRANSLATE 4
`define C_CTRL_WIDTH_F_ROTATE 4

`define C_NEG_PI_RADS_CONST `C_MAX_ROM_WIDTH'b100110110111100000010010101011101110111101001011100111101110010110011110
`define C_NEG_PI_3_4_RADS_CONST `C_MAX_ROM_WIDTH'b101101001001101000001110000000110011001101111000101101110010110000110110
`define C_NEG_PI_2_4_RADS_CONST `C_MAX_ROM_WIDTH'b110011011011110000001001010101110111011110100101110011110111001011001110
`define C_NEG_PI_1_4_RADS_CONST `C_MAX_ROM_WIDTH'b111001101101111000000100101010111011101111010010111001111011100101101000
`define C_NEG_PI_JRADS_CONST `C_MAX_ROM_WIDTH'b100000000000000000000000000000000000000000000000000000000000000000000000
`define C_NEG_PI_3_4_JRADS_CONST `C_MAX_ROM_WIDTH'b101000000000000000000000000000000000000000000000000000000000000000000000
`define C_NEG_PI_2_4_JRADS_CONST `C_MAX_ROM_WIDTH'b110000000000000000000000000000000000000000000000000000000000000000000000
`define C_NEG_PI_1_4_JRADS_CONST `C_MAX_ROM_WIDTH'b111000000000000000000000000000000000000000000000000000000000000000000000

module CORDIC_V1_0(X_IN, Y_IN, PHASE_IN, ND, X_OUT, 
         Y_OUT, PHASE_OUT, RDY, RFD, CLK, ACLR, SCLR, CE);

  parameter C_ARCHITECTURE = `C_PARA_ARCH; 
  parameter C_CORDIC_FUNCTION = `C_F_ROTATE;
  parameter C_ENABLE_RLOCS = 1;
  parameter C_HAS_ACLR = 0;
  parameter C_HAS_CE = 0;
  parameter C_HAS_PHASE_IN = 0;
  parameter C_HAS_PHASE_OUT = 0;
  parameter C_HAS_RDY = 0;
  parameter C_HAS_RFD = 0;
  parameter C_HAS_SCLR = 0;
  parameter C_HAS_X_IN = 0;
  parameter C_HAS_X_OUT = 0;
  parameter C_HAS_Y_IN = 0;
  parameter C_HAS_Y_OUT = 0;
  parameter C_INPUT_WIDTH = 32;
  parameter C_MIF_FILE_PREFIX = "cor1";
  parameter C_OUTPUT_WIDTH = 32;
  parameter C_PHASE_FORMAT = `C_FORMAT_RADS;
  parameter C_PIPELINE_MODE = `C_PIPE_MAX;
  parameter C_REG_INPUTS = 0;
  parameter C_REPLICATIONS = `C_REPL_NONE;
  parameter C_ROUND_MODE = `C_ROUND_POS_NEG_INF;
  parameter C_SCALE_COMP = `C_SCALE_NONE;

  input [C_INPUT_WIDTH-1 : 0] X_IN;
  input [C_INPUT_WIDTH-1 : 0] Y_IN;
  input [C_INPUT_WIDTH-1 : 0] PHASE_IN;
  input ND;
  output [C_OUTPUT_WIDTH-1 : 0] X_OUT;
  output [C_OUTPUT_WIDTH-1 : 0] Y_OUT;
  output [C_OUTPUT_WIDTH-1 : 0] PHASE_OUT;
  output RDY;
  output RFD;
  input CLK;
  input ACLR;
  input SCLR;
  input CE;

  //C_ARCHITECTURE, C_CORDIC_FUNCT, C_ENABLE_RLOCS, C_HAS_ACLR,
  //C_HAS_CE, C_HAS_ND, C_HAS_RDY, C_HAS_RFD, C_HAS_SCLR, C_INPUT_WIDTH, C_MIF_FILE_PREFIX,
  //C_OUTPUT_WIDTH, C_PHASE_FORMAT, C_PIPELINE_MODE, C_REG_INPUTS, C_REPLICATIONS,
  //C_ROUND_MODE, C_SCALE_COMP
  cordic_main_v1_0_v #(C_ARCHITECTURE, C_CORDIC_FUNCTION, C_ENABLE_RLOCS, C_HAS_ACLR, 
      C_HAS_CE, 1, C_HAS_RDY, C_HAS_RFD, C_HAS_SCLR, C_INPUT_WIDTH, C_MIF_FILE_PREFIX,
	  C_OUTPUT_WIDTH, C_PHASE_FORMAT, C_PIPELINE_MODE, C_REG_INPUTS, C_REPLICATIONS,
	  C_ROUND_MODE, C_SCALE_COMP)
    inst_cordic(.X_IN(X_IN), .Y_IN(Y_IN), .PHASE_IN(PHASE_IN), .ND(ND), .X_OUT(X_OUT),
      .Y_OUT(Y_OUT), .PHASE_OUT(PHASE_OUT), .RDY(RDY), .RFD(RFD), .CLK(CLK),
      .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  
endmodule

`undef C_SET
`undef C_CLEAR
`undef C_OVERRIDE
`undef C_NO_OVERRIDE
`undef C_ADD
`undef C_SUB
`undef C_ADD_SUB
`undef C_SIGNED
`undef C_UNSIGNED
`undef C_PIN
`undef all1s
`undef all0s
`undef allXs
`undef C_F_ROTATE
`undef C_F_TRANSLATE
`undef C_F_SIN_COS
`undef C_F_ATAN
`undef C_F_SINH_COSH
`undef C_F_ATANH
`undef C_F_SQRT
`undef C_F_DEFAULT
`undef C_BSER_ARCH
`undef C_WSER_ARCH
`undef C_PARA_ARCH
`undef C_FORMAT_RADS
`undef C_FORMAT_JRADS
`undef C_ROUND_TRUNCATE
`undef C_ROUND_POS_INF
`undef C_ROUND_POS_NEG_INF
`undef C_SCALE_NONE
`undef C_SCALE_CCM
`undef C_PIPE_NONE
`undef C_PIPE_OPT
`undef C_PIPE_MAX
`undef C_REPL_NONE
`undef C_REPL_OPT
`undef C_REPL_MAX
`undef C_EM_ROTATIONAL
`undef C_EM_TRANSLATION
`undef C_MAX_ROM_WIDTH
`undef C_MAX_ROM_LENGTH
`undef C_CORDIC_IO_CNT
`undef C_WSER_SLICE_OPT
`undef C_CTRL_WIDTH_F_TRANSLATE
`undef C_CTRL_WIDTH_F_ROTATE
`undef C_NEG_PI_RADS_CONST
`undef C_NEG_PI_3_4_RADS_CONST
`undef C_NEG_PI_2_4_RADS_CONST
`undef C_NEG_PI_1_4_RADS_CONST
`undef C_NEG_PI_JRADS_CONST
`undef C_NEG_PI_3_4_JRADS_CONST
`undef C_NEG_PI_2_4_JRADS_CONST
`undef C_NEG_PI_1_4_JRADS_CONST

`define c_set 0
`define c_clear 1
`define c_override 0
`define c_no_override 1

`define all1s {C_WIDTH{1'b1}}
`define all0s 'b0
`define allXs {C_WIDTH{1'bx}}

module C_REG_FD_V5_0_V (D, CLK, CE, ACLR, ASET, AINIT, SCLR, SSET, SINIT, Q);

	parameter C_AINIT_VAL 		= "";
	parameter C_ENABLE_RLOCS	= 1;
	parameter C_HAS_ACLR 		= 0;
	parameter C_HAS_AINIT 		= 0;
	parameter C_HAS_ASET 		= 0;
	parameter C_HAS_CE 			= 0;
	parameter C_HAS_SCLR 		= 0;
	parameter C_HAS_SINIT 		= 0;
	parameter C_HAS_SSET 		= 0;
	parameter C_SINIT_VAL 		= "";
	parameter C_SYNC_ENABLE 	= `c_override;	
	parameter C_SYNC_PRIORITY 	= `c_clear;	
	parameter C_WIDTH 			= 16; 		

	input [C_WIDTH-1 : 0] D;
	input CLK;
	input CE;
	input ACLR;
	input ASET;
	input AINIT;
	input SCLR;
	input SSET;
	input SINIT;
	output [C_WIDTH-1 : 0] Q;
	 
	reg [C_WIDTH-1 : 0] data;
	reg [C_WIDTH-1 : 0] datatmp;
	// Internal values to drive signals when input is missing
	wire intCE;
	wire intACLR;
	wire intASET;
	wire intAINIT;
	wire intSCLR;
	wire intSSET;
	wire intSINIT;
	wire intCLK;
	 
	wire [C_WIDTH-1 : 0] #1 Q = data;

	// Sort out default values for missing ports
	
	assign intCLK = CLK;
	assign intACLR = defval(ACLR, C_HAS_ACLR, 0);
	assign intASET = defval(ASET, C_HAS_ASET, 0);
	assign intAINIT = defval(AINIT, C_HAS_AINIT, 0);
	assign intSCLR = defval(SCLR, C_HAS_SCLR, 0);
	assign intSSET = defval(SSET, C_HAS_SSET, 0);
	assign intSINIT = defval(SINIT, C_HAS_SINIT, 0);
	assign intCE = ((((C_HAS_ACLR == 1 || C_HAS_ASET == 1 || C_HAS_AINIT == 1) &&
					(C_HAS_SCLR == 1 || C_HAS_SSET == 1 || C_HAS_SINIT == 1)) ||
					(C_HAS_SCLR == 1 && C_HAS_SSET == 1 && C_SYNC_PRIORITY == `c_set)) &&
					(C_HAS_CE == 1) && (C_SYNC_ENABLE == `c_override) ? 
						(CE | intSCLR | intSSET | intSINIT) : ((C_HAS_CE == 1) ? CE : 1'b1));
	
	reg lastCLK;
	reg lastintACLR;
	reg lastintASET;
	
	reg [C_WIDTH-1 : 0] AIV;
	reg [C_WIDTH-1 : 0] SIV;
	
	
	integer i;
	integer ASYNC_CTRL;
	
	initial 
	begin
		ASYNC_CTRL <= 1;
		lastCLK = #1 1'b0;
		lastintACLR <= 1'b0;
		lastintASET <= 1'b0;
		AIV = to_bits(C_AINIT_VAL);
		SIV = to_bits(C_SINIT_VAL);
		if(C_HAS_ACLR === 1)
			data <= #1 `all0s;
		else if(C_HAS_ASET === 1)
			data <= #1 `all1s;
		else if(C_HAS_AINIT === 1)
		    data <= #1 AIV;
		else if(C_HAS_SCLR === 1)
			data <= #1 `all0s;
		else if(C_HAS_SSET === 1)
			data <= #1 `all1s;
		else if(C_HAS_SINIT === 1)
			data <= #1 SIV;
		else
			data <= #1 AIV;			
	end

        // intCE removed from sensitivity list.  
        // Fix CR 128989
        //Neil Ritchie 8 Dec 2000
	
	always@(posedge intCLK or intACLR or intASET or intAINIT)
	begin
		datatmp = data;
		
		for(i = 0; i < C_WIDTH; i = i + 1)
		begin
			if(intACLR === 1'b1)
				datatmp[i] = 1'b0;
			else if(intACLR === 1'b0 && intASET === 1'b1)
				datatmp[i] = 1'b1;
			else if(intAINIT === 1'b1)
				datatmp[i] = AIV[i];
			else if(intACLR === 1'bx && intASET !== 1'b0)
				datatmp[i] = 1'bx;
			else if(intACLR != lastintACLR && lastintASET != intASET 
						&& lastintACLR === 1'b1 && lastintASET === 1'b1
						&& intACLR === 1'b0 && intASET === 1'b0)
				datatmp[i] = 1'bx;
			else 
			begin
				ASYNC_CTRL = 0;
				if(lastCLK !== intCLK && lastCLK === 1'b0 && intCLK === 1'b1)
				begin
					if((intCE !== 1'b0 || C_SYNC_ENABLE === 0) &&
						(C_SYNC_PRIORITY == 0 && intSSET === 1'bx && intSCLR !== 1'b0))
					begin
						datatmp[i] = 1'bx;
						ASYNC_CTRL = 1;
					end
					if((intCE !== 1'b0 || C_SYNC_ENABLE === 0) &&
					(C_SYNC_PRIORITY == 1 && intSSET !== 1'b0 && intSCLR === 1'bx))
					begin
						datatmp[i] = 1'bx;
						ASYNC_CTRL = 1;
					end
					if(intCE === 1'b1 && intSCLR !== 1'b1 && intSSET !== 1'b1 && intSINIT !== 1'b1 && ASYNC_CTRL == 0)
						datatmp[i] = D[i];
					else if(intCE === 1'bx && datatmp[i] !== D[i] && intSCLR !== 1'b1 && intSSET !== 1'b1 && intSINIT !== 1'b1 && ASYNC_CTRL == 0)
						datatmp[i] = 1'bx;

					if(intSINIT === 1'b1 && (intCE === 1'b1 || C_SYNC_ENABLE == 0) && ASYNC_CTRL == 0)
						datatmp[i] = SIV[i];
					else if(intSINIT === 1'b1 && (intCE === 1'bx && C_SYNC_ENABLE == 1) && datatmp[i] !== SIV[i])
						datatmp[i] = 1'bx;
					else if(intSINIT === 1'bx && (intCE !== 1'b0 || C_SYNC_ENABLE == 0) && datatmp[i] !== SIV[i])
						datatmp[i] = 1'bx;

					if(intSCLR === 1'b1 && (intCE === 1'b1 || C_SYNC_ENABLE == 0) && (C_SYNC_PRIORITY == 1 || intSSET === 1'b0) && ASYNC_CTRL == 0)
						datatmp[i] = 1'b0;
					else if(intSCLR === 1'b1 && (intCE === 1'bx && C_SYNC_ENABLE == 1) && datatmp[i] !== 1'b0 && (C_SYNC_PRIORITY == 1 || intSSET === 1'b0))
						datatmp[i] = 1'bx;
					else if(intSCLR === 1'bx && (intCE !== 1'b0 || C_SYNC_ENABLE == 0) && datatmp[i] !== 1'b0 && (C_SYNC_PRIORITY == 1 || intSSET === 1'b0))
						datatmp[i] = 1'bx;
						
					if(intSSET === 1'b1 && (intCE === 1'b1 || C_SYNC_ENABLE == 0) && (C_SYNC_PRIORITY == 0 || intSCLR === 1'b0) && ASYNC_CTRL == 0)
						datatmp[i] = 1'b1;
					else if(intSSET === 1'b1 && (intCE === 1'bx && C_SYNC_ENABLE == 1) && datatmp[i] !== 1'b1 && (C_SYNC_PRIORITY == 0 || intSCLR === 1'b0))
						datatmp[i] = 1'bx;
					else if(intSSET === 1'bx && (intCE !== 1'b0 || C_SYNC_ENABLE == 0) && datatmp[i] !== 1'b1 && (C_SYNC_PRIORITY == 0 || intSCLR === 1'b0))
						datatmp[i] = 1'bx;
				end
				else if(lastCLK !== intCLK && ((lastCLK === 1'b0 && intCLK === 1'bx)
							|| (lastCLK === 1'bx && intCLK === 1'b1)))
				begin
					if((intCE !== 1'b0 || C_SYNC_ENABLE == 0) && (C_SYNC_PRIORITY == 0 && intSSET === 1'bx && intSCLR !== 1'b0))
						datatmp[i] = 1'bx;
					else if((intCE !== 1'b0 || C_SYNC_ENABLE == 0) && (C_SYNC_PRIORITY == 1 && intSSET !== 1'b0 && intSCLR === 1'bx))
						datatmp[i] = 1'bx;
					
					if(intCE !== 1'b0 && intSCLR !== 1'b1 && intSSET !== 1'b1 && intSINIT !== 1'b1 && datatmp[i] !== D[i])
						datatmp[i] = 1'bx;
					
					if(intSINIT !== 1'b0 && (intCE !== 1'b0 || C_SYNC_ENABLE == 0) && datatmp[i] !== SIV[i])
						datatmp[i] = 1'bx;
						
					if(intSCLR !== 1'b0 && (intCE !== 1'b0 || C_SYNC_ENABLE == 0) && (C_SYNC_PRIORITY == 1 || intSSET === 1'b0) && datatmp[i] !== 1'b0)
						datatmp[i] = 1'bx;
						
					if(intSSET !== 1'b0 && (intCE !== 1'b0 || C_SYNC_ENABLE == 0) && (C_SYNC_PRIORITY == 0 || intSCLR === 1'b0) && datatmp[i] !== 1'b1)
						datatmp[i] = 1'bx;
				end

				if(intACLR === 1'b0 && intASET === 1'bx)
				begin
					if(datatmp[i] !== 1'b1)
					begin
						datatmp[i] = 1'bx;
						ASYNC_CTRL = 1;
					end
				end
				else if(intACLR === 1'bx && intASET === 1'b0)
				begin
					if(datatmp[i] !== 1'b0)
					begin
						datatmp[i] = 1'bx;
						ASYNC_CTRL = 1;
					end
				end
				else if(intAINIT === 1'bx)
				begin
					if(datatmp[i] !== AIV[i])
					begin
						datatmp[i] = 1'bx;
						ASYNC_CTRL = 1;
					end
				end
			end
		end
		
		data <= datatmp;
	end	
							
	
	always@(intACLR or intASET)
	begin
		lastintACLR <= intACLR;
		lastintASET <= intASET;
		if($time != 0)
			if(intACLR === 1'b0 && intASET === 1'b0 && lastintACLR !== 1'b0 && lastintASET !== 1'b0) // RACE
				data <= `allXs;
	end
	
	always@(intCLK)
		lastCLK <= intCLK;
	
	
	function defval;
	input i;
	input hassig;
	input val;
		begin
			if(hassig == 1)
				defval = i;
			else
				defval = val;
		end
	endfunction
	
	function [C_WIDTH - 1 : 0] to_bits;
	input [C_WIDTH*8 : 1] instring;
	integer i;
	integer non_null_string;
	begin
		non_null_string = 0;
		for(i = C_WIDTH; i > 0; i = i - 1)
		begin // Is the string empty?
			if(instring[(i*8)] == 0 && 
				instring[(i*8)-1] == 0 && 
				instring[(i*8)-2] == 0 && 
				instring[(i*8)-3] == 0 && 
				instring[(i*8)-4] == 0 && 
				instring[(i*8)-5] == 0 && 
				instring[(i*8)-6] == 0 && 
				instring[(i*8)-7] == 0 &&
				non_null_string == 0)
					non_null_string = 0; // Use the return value to flag a non-empty string
			else
					non_null_string = 1; // Non-null character!
		end
		if(non_null_string == 0) // String IS empty! Just return the value to be all '0's
		begin
			for(i = C_WIDTH; i > 0; i = i - 1)
				to_bits[i-1] = 0;
		end
		else
		begin
			for(i = C_WIDTH; i > 0; i = i - 1)
			begin // Is this character a '0'? (ASCII = 48 = 00110000)
				if(instring[(i*8)] == 0 && 
					instring[(i*8)-1] == 0 && 
					instring[(i*8)-2] == 1 && 
					instring[(i*8)-3] == 1 && 
					instring[(i*8)-4] == 0 && 
					instring[(i*8)-5] == 0 && 
					instring[(i*8)-6] == 0 && 
					instring[(i*8)-7] == 0)
						to_bits[i-1] = 0;
				  // Or is it a '1'? 
				else if(instring[(i*8)] == 0 && 
					instring[(i*8)-1] == 0 && 
					instring[(i*8)-2] == 1 && 
					instring[(i*8)-3] == 1 && 
					instring[(i*8)-4] == 0 && 
					instring[(i*8)-5] == 0 && 
					instring[(i*8)-6] == 0 && 
					instring[(i*8)-7] == 1)		
						to_bits[i-1] = 1;
				  // Or is it a ' '? (a null char - in which case insert a '0')
				else if(instring[(i*8)] == 0 && 
					instring[(i*8)-1] == 0 && 
					instring[(i*8)-2] == 0 && 
					instring[(i*8)-3] == 0 && 
					instring[(i*8)-4] == 0 && 
					instring[(i*8)-5] == 0 && 
					instring[(i*8)-6] == 0 && 
					instring[(i*8)-7] == 0)		
						to_bits[i-1] = 0;
				else
				begin
					$display("Error in %m at time %d ns: non-binary digit in string \"%s\"\nExiting simulation...", $time, instring);
				end
			end
		end 
	end
	endfunction
	
endmodule

`undef c_set
`undef c_clear
`undef c_override
`undef c_no_override

`undef all1s
`undef all0s
`undef allXs

`define C_SET 0
`define C_CLEAR 1
`define C_OVERRIDE 0
`define C_NO_OVERRIDE 1
`define C_ADD 0
`define C_SUB 1
`define C_ADD_SUB 2
`define C_SIGNED 0
`define C_UNSIGNED 1
`define C_PIN 2
`define all1s {C_WIDTH{1'b1}}
`define all0s 'b0
`define allXs {C_WIDTH{1'bx}}

// Used to set c_cordic_function
`define C_F_ROTATE 0
`define C_F_TRANSLATE 1
`define C_F_SIN_COS 2
`define C_F_ATAN 3
`define C_F_SINH_COSH 4
`define C_F_ATANH 5
`define C_F_SQRT 6
`define C_F_DEFAULT 7
// Used to set c_architecture
`define C_BSER_ARCH 0
`define C_WSER_ARCH 1
`define C_PARA_ARCH 2
// Used to set Data FORMAT
`define C_FORMAT_RADS 0
`define C_FORMAT_JRADS 1
// Used to set c_round_mode
`define C_ROUND_TRUNCATE 0
`define C_ROUND_POS_INF 1
`define C_ROUND_POS_NEG_INF 2
// Used to set c_scale_comp
`define C_SCALE_NONE 0
`define C_SCALE_CCM 1
// Used to set c_pipeline_mode
`define C_PIPE_NONE 0
`define C_PIPE_OPT -1
`define C_PIPE_MAX -2
// Used to set c_replications
`define C_REPL_NONE 0
`define C_REPL_OPT -1
`define C_REPL_MAX -2
// Used to set engine mode
`define C_EM_ROTATIONAL 1'b0
`define C_EM_TRANSLATION 1'b1

`define C_CORDIC_IO_CNT 6

`define C_WSER_SLICE_OPT 16

`define C_MAX_ROM_WIDTH 72
`define C_MAX_ROM_LENGTH 64

`define C_CTRL_WIDTH_F_TRANSLATE 4
`define C_CTRL_WIDTH_F_ROTATE 4

`define C_NEG_PI_RADS_CONST `C_MAX_ROM_WIDTH'b100110110111100000010010101011101110111101001011100111101110010110011110
`define C_NEG_PI_3_4_RADS_CONST `C_MAX_ROM_WIDTH'b101101001001101000001110000000110011001101111000101101110010110000110110
`define C_NEG_PI_2_4_RADS_CONST `C_MAX_ROM_WIDTH'b110011011011110000001001010101110111011110100101110011110111001011001110
`define C_NEG_PI_1_4_RADS_CONST `C_MAX_ROM_WIDTH'b111001101101111000000100101010111011101111010010111001111011100101101000
`define C_NEG_PI_JRADS_CONST `C_MAX_ROM_WIDTH'b100000000000000000000000000000000000000000000000000000000000000000000000
`define C_NEG_PI_3_4_JRADS_CONST `C_MAX_ROM_WIDTH'b101000000000000000000000000000000000000000000000000000000000000000000000
`define C_NEG_PI_2_4_JRADS_CONST `C_MAX_ROM_WIDTH'b110000000000000000000000000000000000000000000000000000000000000000000000
`define C_NEG_PI_1_4_JRADS_CONST `C_MAX_ROM_WIDTH'b111000000000000000000000000000000000000000000000000000000000000000000000

//******************************************************//
// Module Definitions for Library BaseBlock Version V5  //
//******************************************************//

module lib_base_reg_fd_cordic_v1_0_v (D, CLK, CE, ACLR, ASET, AINIT, SCLR, SSET, SINIT, Q);

	parameter C_AINIT_VAL 		= "";
	parameter C_ENABLE_RLOCS	= 1;
	parameter C_HAS_ACLR 		= 0;
	parameter C_HAS_AINIT 		= 0;
	parameter C_HAS_ASET 		= 0;
	parameter C_HAS_CE 			= 0;
	parameter C_HAS_SCLR 		= 0;
	parameter C_HAS_SINIT 		= 0;
	parameter C_HAS_SSET 		= 0;
	parameter C_SINIT_VAL 		= "";
	parameter C_SYNC_ENABLE 	= `C_OVERRIDE;	
	parameter C_SYNC_PRIORITY 	= `C_CLEAR;	
	parameter C_WIDTH 			= 16; 		

	input [C_WIDTH-1 : 0] D;
	input CLK;
	input CE;
	input ACLR;
	input ASET;
	input AINIT;
	input SCLR;
	input SSET;
	input SINIT;
	output [C_WIDTH-1 : 0] Q;

  // C_AINIT_VAL, C_ENABLE_RLOCS, C_HAS_ACLR, C_HAS_AINIT, 
  // C_HAS_ASET, C_HAS_CE, C_HAS_SCLR, C_HAS_SINIT, C_HAS_SSET, 
  // C_SINIT_VAL, C_SYNC_ENABLE, C_SYNC_PRIORITY, C_WIDTH
  C_REG_FD_V5_0_V #(C_AINIT_VAL, C_ENABLE_RLOCS, C_HAS_ACLR, C_HAS_AINIT, 
                  C_HAS_ASET, C_HAS_CE, C_HAS_SCLR, C_HAS_SINIT, C_HAS_SSET,
				  C_SINIT_VAL, C_SYNC_ENABLE, C_SYNC_PRIORITY, C_WIDTH)
          reg_fd(.D(D), .CLK(CLK), .CE(CE), .ACLR(ACLR), .ASET(ASET), .AINIT(AINIT), 
              .SCLR(SCLR), .SSET(SSET), .SINIT(SINIT), .Q(Q));

endmodule  //lib_base_fd_cordic_v1_0_v

//******************************************************//
// Module Definitions for Cordic Library                //
//******************************************************//

module lib_fd_cordic_v1_0_v (D, CLK, CE, ACLR, SCLR, Q);

  parameter C_ENABLE_RLOCS    = 0;
  parameter C_HAS_ACLR        = 0;
  parameter C_HAS_CE          = 0;
  parameter C_HAS_SCLR        = 0;
  parameter C_WIDTH	        = 16;

  input [C_WIDTH - 1 : 0] D;
  input CLK;
  input CE;
  input ACLR;
  input SCLR;
  output [C_WIDTH - 1 : 0] Q;

  wire zero = 1'b0;

  // C_AINIT_VAL, C_ENABLE_RLOCS, C_HAS_ACLR, C_HAS_AINIT, C_HAS_ASET,
  // C_HAS_CE, C_HAS_SCLR, C_HAS_SINIT, C_HAS_SSET, C_SINIT_VAL,
  //  C_SYNC_ENABLE, C_SYNC_PRIORITY, C_WIDTH
  lib_base_reg_fd_cordic_v1_0_v #("",C_ENABLE_RLOCS, C_HAS_ACLR, 0, 0, 
               C_HAS_CE, C_HAS_SCLR, 0, 0, "",
              `C_OVERRIDE, `C_CLEAR , C_WIDTH)
          fd(.D(D), .CLK(CLK), .CE(CE), .ACLR(ACLR), .ASET(zero), 
              .AINIT(zero), .SCLR(SCLR), .SSET(zero), .SINIT(zero), .Q(Q));

endmodule  //lib_fd_cordic_v1_0_v

module lib_fd1_cordic_v1_0_v (D, CLK, CE, ACLR, SCLR, Q);

  parameter C_ENABLE_RLOCS    = 0;
  parameter C_HAS_ACLR        = 0;
  parameter C_HAS_CE          = 0;
  parameter C_HAS_SCLR        = 0;

  input D;
  input CLK;
  input CE;
  input ACLR;
  input SCLR;
  output Q;

  wire zero = 1'b0;
  wire [0 :0]D_VECT;
  wire [0 :0]Q_VECT;

  assign D_VECT[0] = D;
  assign Q = Q_VECT[0];

  // C_AINIT_VAL, C_ENABLE_RLOCS, C_HAS_ACLR, C_HAS_AINIT, C_HAS_ASET,
  // C_HAS_CE, C_HAS_SCLR, C_HAS_SINIT, C_HAS_SSET, C_SINIT_VAL,
  //  C_SYNC_ENABLE, C_SYNC_PRIORITY, C_WIDTH
  lib_base_reg_fd_cordic_v1_0_v #("",C_ENABLE_RLOCS, C_HAS_ACLR, 0, 0, 
               C_HAS_CE, C_HAS_SCLR, 0, 0, "", 
               `C_OVERRIDE, `C_CLEAR, 1)
          fd1(.D(D_VECT), .CLK(CLK), .CE(CE), .ACLR(ACLR), .ASET(zero), 
              .AINIT(zero), .SCLR(SCLR), .SSET(zero), .SINIT(zero), .Q(Q_VECT));

endmodule  //lib_fd1_cordic_v1_0_v

module lib_fd1i_cordic_v1_0_v (D, CLK, CE, AINIT, SINIT, Q);

  parameter C_ENABLE_RLOCS    = 0;
  parameter C_HAS_AINIT       = 0;
  parameter C_HAS_CE          = 0;
  parameter C_HAS_SINIT        = 0;
  parameter C_INIT            = "";

  input D;
  input CLK;
  input CE;
  input AINIT;
  input SINIT;
  output Q;

  wire zero = 1'b0;
  wire [0 :0]D_VECT;
  wire [0 :0]Q_VECT;

  wire CE_INT;
  wire AINIT_INT;
  wire SINIT_INT;

  assign D_VECT[0] = D;
  assign Q = Q_VECT[0];

  assign CE_INT = ((C_HAS_CE == 0) ? 1'b1 : CE);
  assign AINIT_INT = ((C_HAS_AINIT == 0) ? 1'b0 : AINIT);
  assign SINIT_INT = ((C_HAS_SINIT == 0) ? 1'b0 : SINIT);

  // C_AINIT_VAL, C_ENABLE_RLOCS, C_HAS_ACLR, C_HAS_AINIT, C_HAS_ASET,
  // C_HAS_CE, C_HAS_SCLR, C_HAS_SINIT, C_HAS_SSET, C_SINIT_VAL,
  //  C_SYNC_ENABLE, C_SYNC_PRIORITY, C_WIDTH
  lib_base_reg_fd_cordic_v1_0_v #(C_INIT,C_ENABLE_RLOCS, 0, 1, 0, 
                  C_HAS_CE, 0, C_HAS_SINIT, 0, C_INIT,
                  `C_OVERRIDE, `C_CLEAR, 1)
          fd1i(.D(D_VECT), .CLK(CLK), .CE(CE_INT), .ACLR(zero), .ASET(zero), 
              .AINIT(AINIT_INT), .SCLR(zero), .SSET(zero), .SINIT(SINIT_INT), .Q(Q_VECT));

endmodule  //lib_fd1i_cordic_v1_0_v

module lib_fifo_cordic_v1_0_v (D, CLK, CE, ACLR, SCLR, Q);
  parameter P_DEPTH           = 8;
  parameter P_ENABLE_RLOCS    = 0;
  parameter P_HAS_ACLR        = 0;
  parameter P_HAS_CE          = 0;
  parameter P_HAS_SCLR        = 0;
  parameter P_WIDTH           = 8;

  parameter P_DEPTH_INT = ((P_DEPTH < 2) ? 2 : P_DEPTH);

  input [P_WIDTH-1 : 0]D;
  output [P_WIDTH-1 : 0]Q;
  input CLK;
  input ACLR;
  input SCLR;
  input CE;

  wire [P_DEPTH_INT*P_WIDTH-1 : 0] D_INT; 
  wire [P_DEPTH_INT*P_WIDTH-1 : 0] Q_INT; 
  integer ii;

  wire ACLR_INT;
  wire SCLR_INT;
  wire CE_INT;

  assign ACLR_INT = (P_HAS_ACLR == 1 ? ACLR : 1'b0); 
  assign SCLR_INT = (P_HAS_SCLR == 1 ? SCLR : 1'b0); 
  assign CE_INT = (P_HAS_CE == 1 ? CE : 1'b1); 

  assign D_INT[P_WIDTH-1 : 0] = D;
  assign D_INT[P_DEPTH_INT*P_WIDTH-1 : P_WIDTH] = Q_INT[(P_DEPTH_INT-1)*P_WIDTH-1 : 0];

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DEPTH_INT*P_WIDTH)
     inst_reg_array (.D(D_INT[P_DEPTH_INT*P_WIDTH-1 : 0]), .CLK(CLK), .CE(CE), .ACLR(ACLR),
                     .SCLR(SCLR),.Q(Q_INT[P_DEPTH_INT*P_WIDTH-1 : 0]));
  
  assign Q = ((P_DEPTH == 0) ? D_INT[P_WIDTH-1 : 0] : 
              (P_DEPTH == 1) ? Q_INT[P_WIDTH-1 : 0] :
              Q_INT[P_DEPTH_INT*P_WIDTH-1 : (P_DEPTH_INT-1)*P_WIDTH]);

endmodule  //lib_fifo_cordic_v1_0_v

//******************************************************//
// Module Definitions for Cordic Computational Engine   //
//******************************************************//

module cordic_eng_slice_par_v1_0_v(ENGINE_MODE, DATA_X_IN, DATA_Y_IN, PHASE_IN, DATA_X_OUT,
         DATA_Y_OUT, PHASE_OUT, CTRL_VECT_IN, CTRL_VECT_OUT, CLK, ACLR, SCLR, CE);
  parameter P_CORDIC_FUNCT = `C_F_TRANSLATE;
  parameter P_CTRL_WIDTH = 4;
  parameter P_DATA_WIDTH_INT = 32+5;
  parameter P_ENABLE_RLOCS = 1;
  parameter P_HARDWIRED_SHIFT = 0;
  parameter P_HAS_ACLR = 0;
  parameter P_HAS_CE = 0;
  parameter P_HAS_SCLR = 0;
  parameter P_ITERATION = 0;
  parameter P_PHASE_FORMAT = `C_FORMAT_RADS;

  input ENGINE_MODE;
  input [P_DATA_WIDTH_INT-1 : 0] DATA_X_IN;
  input [P_DATA_WIDTH_INT-1 : 0] DATA_Y_IN;
  input [P_DATA_WIDTH_INT-1 : 0] PHASE_IN;
  output [P_DATA_WIDTH_INT-1 : 0] DATA_X_OUT;
  output [P_DATA_WIDTH_INT-1 : 0] DATA_Y_OUT;
  output [P_DATA_WIDTH_INT-1 : 0] PHASE_OUT;
  input [P_CTRL_WIDTH-1 : 0] CTRL_VECT_IN;
  output [P_CTRL_WIDTH-1 : 0] CTRL_VECT_OUT;
  input CLK; 
  input ACLR;
  input SCLR;
  input CE;

  wire [P_DATA_WIDTH_INT-1 : 0] DATA_X_HW_SHIFT;
  wire [P_DATA_WIDTH_INT-1 : 0] DATA_X_ADD;
  wire [P_DATA_WIDTH_INT-1 : 0] DATA_X_TMP;
  wire [P_DATA_WIDTH_INT-1 : 0] DATA_Y_HW_SHIFT;
  wire [P_DATA_WIDTH_INT-1 : 0] DATA_Y_ADD;
  wire [P_DATA_WIDTH_INT-1 : 0] DATA_Y_TMP;
  wire [P_DATA_WIDTH_INT-1 : 0] PHASE_ADD;
  wire [P_DATA_WIDTH_INT-1 : 0] PHASE_TMP;

  wire [P_DATA_WIDTH_INT-1 : 0] PHASE_ADD_T0;
  wire [P_DATA_WIDTH_INT-1 : 0] PHASE_ADD_T1;

  wire [P_CTRL_WIDTH-1 : 0] CTRL_VECT_INT;
  wire ND_AND_CE;
 
  wire ADD_NSUB_INT;

  reg ii;

    parameter P_ATAN_RADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000100000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000100000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000100000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000100000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000100000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000100000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000100000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000100000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000100000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000100000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000100000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000100000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000100000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000100000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000011111111111111111111111111111111111111111111101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000111111111111111111111111111111111111111111101011,
  `C_MAX_ROM_WIDTH'b000000000000000000000001111111111111111111111111111111111111111101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000000011111111111111111111111111111111111111101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000000111111111111111111111111111111111111101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000001111111111111111111111111111111111101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000011111111111111111111111111111111101010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000111111111111111111111111111111101010101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000001111111111111111111111111111101010101010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000011111111111111111111111111101010101010101010101010101110,
  `C_MAX_ROM_WIDTH'b000000000000000111111111111111111111111101010101010101010101010110111100,
  `C_MAX_ROM_WIDTH'b000000000000001111111111111111111111101010101010101010101011011101110111,
  `C_MAX_ROM_WIDTH'b000000000000011111111111111111111101010101010101010101101110111011101111,
  `C_MAX_ROM_WIDTH'b000000000000111111111111111111101010101010101010110111011101110111010101,
  `C_MAX_ROM_WIDTH'b000000000001111111111111111101010101010101011011101110111011011100101001,
  `C_MAX_ROM_WIDTH'b000000000011111111111111101010101010101101110111011101010010111001011010,
  `C_MAX_ROM_WIDTH'b000000000111111111111101010101010110111011101101110010100110101011011110,
  `C_MAX_ROM_WIDTH'b000000001111111111101010101011011101110101001011101100010010010101000010,
  `C_MAX_ROM_WIDTH'b000000011111111101010101101110110111001011001111110111101001110001101101,
  `C_MAX_ROM_WIDTH'b000000111111101010110111010100110101010110000101111011011011100011001011,
  `C_MAX_ROM_WIDTH'b000001111101011011011101011111100100101100100000001101110101100010101011,
  `C_MAX_ROM_WIDTH'b000011101101011000110011100000101011000011011101101001111100010010000110};
  
  parameter P_ATAN_JRADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000010100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000101000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001010001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010100011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000101000110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001010001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010100011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000101000101111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001010001011111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010100010111110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000101000101111101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001010001011111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010100010111110011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000101000101111100110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001010001011111001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010100010111110011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000101000101111100110000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001010001011111001100001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010100010111110011000001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000101000101111100110000011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001010001011111001100000111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010100010111110011000001101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000101000101111100110000011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001010001011111001100000110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010100010111110011000001101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000101000101111100110000011011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001010001011111001100000110110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010100010111110011000001101101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000101000101111100110000011011011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001010001011111001100000110110111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010100010111110011000001101101110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000101000101111100110000011011011100101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001010001011111001100000110110111001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010100010111110011000001101101110010011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000101000101111100110000011011011100100111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001010001011111001100000110110111001001110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010100010111110011000001101101110010011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000101000101111100110000011011011100100111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001010001011111001100000110110111001001110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010100010111110011000001101101110010011100100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000101000101111100110000011011011100100111001000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001010001011111001100000110110111001001110010000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010100010111110011000001101101110010011100011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000101000101111100110000011011011100100111000001101,
  `C_MAX_ROM_WIDTH'b000000000000000000000001010001011111001100000110110111001001101011010101,
  `C_MAX_ROM_WIDTH'b000000000000000000000010100010111110011000001101101110010010101101111011,
  `C_MAX_ROM_WIDTH'b000000000000000000000101000101111100110000011011011100100000010101111010,
  `C_MAX_ROM_WIDTH'b000000000000000000001010001011111001100000110110111000010111111100001110,
  `C_MAX_ROM_WIDTH'b000000000000000000010100010111110011000001101101101011101001111011101101,
  `C_MAX_ROM_WIDTH'b000000000000000000101000101111100110000011011010101110100100010001010110,
  `C_MAX_ROM_WIDTH'b000000000000000001010001011111001100000110110000010111001011110010010001,
  `C_MAX_ROM_WIDTH'b000000000000000010100010111110011000001100110111111110110001100001100110,
  `C_MAX_ROM_WIDTH'b000000000000000101000101111100110000010100101010000000110010110111000010,
  `C_MAX_ROM_WIDTH'b000000000000001010001011111001100000000000100100011011101001111011011010,
  `C_MAX_ROM_WIDTH'b000000000000010100010111110010111010111011001100001010101100110111101110,
  `C_MAX_ROM_WIDTH'b000000000000101000101111100101001101000110110100001100001100110110111111,
  `C_MAX_ROM_WIDTH'b000000000001010001011111000101010100010001110101000100001010101110101000,
  `C_MAX_ROM_WIDTH'b000000000010100010111101100001111001011100001010000010011000101001100001,
  `C_MAX_ROM_WIDTH'b000000000101000101110101111110000101011001000001000110001001111000010101,
  `C_MAX_ROM_WIDTH'b000000001010001011000011010100001100001110010110001001101011101100110000,
  `C_MAX_ROM_WIDTH'b000000010100010001000100011101010000011101110111011001101000011011100000,
  `C_MAX_ROM_WIDTH'b000000100111111011001110000101101101011110111000111001111010001101111000,
  `C_MAX_ROM_WIDTH'b000001001011100100000001010001110110011101111100110000100001111010111100};

  parameter P_ATANH_RADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000100000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000100000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000100000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000100000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000100000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000100000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000100000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000100000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000100000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000100000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000100000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000100000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000100000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000100000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000100000000000000000000000000000000000000000000011,
  `C_MAX_ROM_WIDTH'b000000000000000000000001000000000000000000000000000000000000000000010101,
  `C_MAX_ROM_WIDTH'b000000000000000000000010000000000000000000000000000000000000000010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000000100000000000000000000000000000000000000010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000001000000000000000000000000000000000000010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000010000000000000000000000000000000000010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000100000000000000000000000000000000010101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000001000000000000000000000000000000010101010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000010000000000000000000000000000010101010101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000100000000000000000000000000010101010101010101010101011000,
  `C_MAX_ROM_WIDTH'b000000000000001000000000000000000000000010101010101010101010101100010001,
  `C_MAX_ROM_WIDTH'b000000000000010000000000000000000000010101010101010101010110001000100010,
  `C_MAX_ROM_WIDTH'b000000000000100000000000000000000010101010101010101011000100010001000100,
  `C_MAX_ROM_WIDTH'b000000000001000000000000000000010101010101010101100010001000100010010010,
  `C_MAX_ROM_WIDTH'b000000000010000000000000000010101010101010110001000100010001010110100011,
  `C_MAX_ROM_WIDTH'b000000000100000000000000010101010101011000100010001001000110101101001110,
  `C_MAX_ROM_WIDTH'b000000001000000000000010101010101100010001000101011010001110010011000111,
  `C_MAX_ROM_WIDTH'b000000010000000000010101010110001000100100011010111011100010010010110100,
  `C_MAX_ROM_WIDTH'b000000100000000010101011000100010101101001101110101101011001101110010110,
  `C_MAX_ROM_WIDTH'b000001000000010101100010010001110010011110101011101111011101101001100101,
  `C_MAX_ROM_WIDTH'b000010000010110001010111011111010100000010001010001010001101001110010100,
  `C_MAX_ROM_WIDTH'b000100011001001111101010011110101010110100000011000010100111110011111001};

  parameter P_ATANH_JRADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000010100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000101000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001010001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010100011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000101000110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001010001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010100011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000101000101111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001010001011111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010100010111110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000101000101111101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001010001011111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010100010111110011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000101000101111100110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001010001011111001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010100010111110011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000101000101111100110000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001010001011111001100000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010100010111110011000001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000101000101111100110000011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001010001011111001100000111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010100010111110011000001101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000101000101111100110000011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001010001011111001100000110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010100010111110011000001101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000101000101111100110000011011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001010001011111001100000110110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010100010111110011000001101101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000101000101111100110000011011011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001010001011111001100000110110111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010100010111110011000001101101110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000101000101111100110000011011011100101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001010001011111001100000110110111001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010100010111110011000001101101110010011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000101000101111100110000011011011100100111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001010001011111001100000110110111001001110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010100010111110011000001101101110010011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000101000101111100110000011011011100100111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001010001011111001100000110110111001001110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010100010111110011000001101101110010011100100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000101000101111100110000011011011100100111001000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001010001011111001100000110110111001001110010010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010100010111110011000001101101110010011100101001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000101000101111100110000011011011100100111001111010,
  `C_MAX_ROM_WIDTH'b000000000000000000000001010001011111001100000110110111001001111000111010,
  `C_MAX_ROM_WIDTH'b000000000000000000000010100010111110011000001101101110010100011010100101,
  `C_MAX_ROM_WIDTH'b000000000000000000000101000101111100110000011011011100101101111011000111,
  `C_MAX_ROM_WIDTH'b000000000000000000001010001011111001100000110110111010000100100101110100,
  `C_MAX_ROM_WIDTH'b000000000000000000010100010111110011000001101101111001001111001000011000,
  `C_MAX_ROM_WIDTH'b000000000000000000101000101111100110000011011100011011001101110110110100,
  `C_MAX_ROM_WIDTH'b000000000000000001010001011111001100000110111101111100011000011110000101,
  `C_MAX_ROM_WIDTH'b000000000000000010100010111110011000001110100100101000010111000000000101,
  `C_MAX_ROM_WIDTH'b000000000000000101000101111100110000100010001111001101011110101010111001,
  `C_MAX_ROM_WIDTH'b000000000000001010001011111001100001101101001110000001001000011010010001,
  `C_MAX_ROM_WIDTH'b000000000000010100010111110011001000100000011000110110100000101110110010,
  `C_MAX_ROM_WIDTH'b000000000000101000101111100110111001110000011001101010101011111010010101,
  `C_MAX_ROM_WIDTH'b000000000001010001011111010010111001011110100000111000011000111110011000,
  `C_MAX_ROM_WIDTH'b000000000010100010111111001110100011000001101001001111110100011101111100,
  `C_MAX_ROM_WIDTH'b000000000101000110000011100011010010000110010010000101010101101000101111,
  `C_MAX_ROM_WIDTH'b000000001010001100101111111101110100100111000101100100011110011011011100,
  `C_MAX_ROM_WIDTH'b000000010100011110101001101111110000110110010010110011101110001001010111,
  `C_MAX_ROM_WIDTH'b000000101001101000000011010110000100100011111110110010011001011000110100,
  `C_MAX_ROM_WIDTH'b000001011001100001011110001000110111101101011100101111010000001101101110};

  parameter ROM_DATA_TRIG = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ?
              P_ATAN_RADS[((P_ITERATION+1) * `C_MAX_ROM_WIDTH -1) : 
                          ((P_ITERATION+1) * `C_MAX_ROM_WIDTH -P_DATA_WIDTH_INT)]:
              P_ATAN_JRADS[((P_ITERATION+1) * `C_MAX_ROM_WIDTH -1) : 
                          ((P_ITERATION+1) * `C_MAX_ROM_WIDTH -P_DATA_WIDTH_INT)]);
  parameter ROM_DATA_HYP = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ?
              P_ATANH_RADS[((P_ITERATION+1) * `C_MAX_ROM_WIDTH -1) : 
                          ((P_ITERATION+1) * `C_MAX_ROM_WIDTH -P_DATA_WIDTH_INT)]:
              P_ATANH_JRADS[((P_ITERATION+1) * `C_MAX_ROM_WIDTH -1) : 
                          ((P_ITERATION+1) * `C_MAX_ROM_WIDTH -P_DATA_WIDTH_INT)]);
  parameter P_ROM_DATA_INT = ((P_CORDIC_FUNCT == `C_F_SINH_COSH)||(P_CORDIC_FUNCT == `C_F_ATANH) ?
                            ROM_DATA_HYP : ROM_DATA_TRIG); 

  function [P_DATA_WIDTH_INT-1 : 0] F_SHIFT;
    input [P_DATA_WIDTH_INT-1 : 0]DATA_IN;
    input P_FIXED_SHIFT;
    input P_VAR_SHIFT;
	integer P_FIXED_SHIFT;
	integer P_VAR_SHIFT;
    reg [P_DATA_WIDTH_INT-1 : 0]DATA_INT;
    integer II;
  begin
    for (II=P_DATA_WIDTH_INT-1;II>P_DATA_WIDTH_INT-1-P_VAR_SHIFT-P_FIXED_SHIFT;II=II-1)
      DATA_INT[II] = DATA_IN[P_DATA_WIDTH_INT-1];
    for (II=P_DATA_WIDTH_INT-1-P_VAR_SHIFT-P_FIXED_SHIFT;II>=0;II=II-1)
      DATA_INT[II] = DATA_IN[II+P_VAR_SHIFT+P_FIXED_SHIFT];
    F_SHIFT = DATA_INT;
  end 
  endfunction

  //Pad the input and implement the hardware shift
  assign DATA_X_HW_SHIFT = F_SHIFT(DATA_X_IN,P_HARDWIRED_SHIFT+1,0);
  assign DATA_Y_HW_SHIFT = F_SHIFT(DATA_Y_IN,P_HARDWIRED_SHIFT+1,0);

  //gen data add_sub and register
  //gen datax add_sub and register
  assign DATA_X_ADD = ((ADD_NSUB_INT == 1'b1) ?
         DATA_X_IN[P_DATA_WIDTH_INT-1 : 0] + DATA_Y_HW_SHIFT[P_DATA_WIDTH_INT-1 : 0] :
		 DATA_X_IN[P_DATA_WIDTH_INT-1 : 0] - DATA_Y_HW_SHIFT[P_DATA_WIDTH_INT-1 : 0]);

  //gen datay add_sub and register
  assign DATA_Y_ADD = ((ADD_NSUB_INT == 1'b1) ?
         DATA_Y_IN[P_DATA_WIDTH_INT-1 : 0] - DATA_X_HW_SHIFT[P_DATA_WIDTH_INT-1 : 0] :
		 DATA_Y_IN[P_DATA_WIDTH_INT-1 : 0] + DATA_X_HW_SHIFT[P_DATA_WIDTH_INT-1 : 0]);

  //gen phase add_sub and register
  assign PHASE_ADD = ((ADD_NSUB_INT == 1'b1) ?
         PHASE_IN[P_DATA_WIDTH_INT-1 : 0] + P_ROM_DATA_INT[P_DATA_WIDTH_INT-1 : 0]:
		 PHASE_IN[P_DATA_WIDTH_INT-1 : 0] - P_ROM_DATA_INT[P_DATA_WIDTH_INT-1 : 0]);

  assign PHASE_ADD_T0 = PHASE_IN[P_DATA_WIDTH_INT-1 : 0];
  assign PHASE_ADD_T1 = P_ROM_DATA_INT[P_DATA_WIDTH_INT-1 : 0];



  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DATA_WIDTH_INT)
    inst_data_x_int(.D(DATA_X_ADD),.Q(DATA_X_TMP),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DATA_WIDTH_INT)
    inst_data_y_int(.D(DATA_Y_ADD),.Q(DATA_Y_TMP),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DATA_WIDTH_INT)
    inst_phase_fb(.D(PHASE_ADD),.Q(PHASE_TMP),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  // Gen Add_NSub 
  assign ADD_NSUB_INT = ( (ENGINE_MODE == `C_EM_ROTATIONAL) ? PHASE_IN[P_DATA_WIDTH_INT-1]:
		   !(DATA_Y_IN[P_DATA_WIDTH_INT-1]) );

  //  --Timing Control
  lib_fd1_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR)
    inst_ctrl_vect_0(.D(CTRL_VECT_IN[0]),.Q(CTRL_VECT_INT[0]),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  assign CTRL_VECT_INT[1] = CTRL_VECT_IN[1];

  assign ND_AND_CE = ((CTRL_VECT_INT[0] == 1'b1 && CE == 1'b1) ? 1'b1 : 1'b0);

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,2)
    inst_ctrl_vect_3_2(.D(CTRL_VECT_IN[3 : 2]),.Q(CTRL_VECT_INT[3 : 2]),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(ND_AND_CE));

  assign DATA_X_OUT = DATA_X_TMP;
  assign DATA_Y_OUT = DATA_Y_TMP;
  assign PHASE_OUT = PHASE_TMP;
  assign CTRL_VECT_OUT = CTRL_VECT_INT;
 
endmodule

module cordic_eng_slice_wser_v1_0_v(ENGINE_MODE, DATA_X_IN, DATA_Y_IN, PHASE_IN, DATA_X_OUT,
         DATA_Y_OUT, PHASE_OUT, CTRL_VECT_IN, CTRL_VECT_OUT, CLK, ACLR, SCLR, CE);
  parameter P_CORDIC_FUNCT = `C_F_TRANSLATE;
  parameter P_CTRL_WIDTH = 4;
  parameter P_DATA_WIDTH_INT = 32+5;
  parameter P_DATA_EXTEND = 5;
  parameter P_ENABLE_RLOCS = 1;
  parameter P_HARDWIRED_SHIFT = 0;
  parameter P_HAS_ACLR = 0;
  parameter P_HAS_CE = 0;
  parameter P_HAS_SCLR = 0;
  parameter P_ITERATION = 0;
  parameter P_PHASE_FORMAT = `C_FORMAT_RADS;
  parameter P_REP_COUNT = 4;
  parameter P_SLICE_WIDTH = 8;


  input ENGINE_MODE;
  input [P_DATA_WIDTH_INT-1 : 0] DATA_X_IN;
  input [P_DATA_WIDTH_INT-1 : 0] DATA_Y_IN;
  input [P_DATA_WIDTH_INT-1 : 0] PHASE_IN;
  output [P_DATA_WIDTH_INT-1 : 0] DATA_X_OUT;
  output [P_DATA_WIDTH_INT-1 : 0] DATA_Y_OUT;
  output [P_DATA_WIDTH_INT-1 : 0] PHASE_OUT;
  input [P_CTRL_WIDTH-1 : 0] CTRL_VECT_IN;
  output [P_CTRL_WIDTH-1 : 0] CTRL_VECT_OUT;
  input CLK; 
  input ACLR;
  input SCLR;
  input CE;

  parameter C_SLICE_DEPTH = (P_ITERATION != P_REP_COUNT) ? P_SLICE_WIDTH :
              (P_DATA_WIDTH_INT -P_DATA_EXTEND - (P_REP_COUNT * P_SLICE_WIDTH));

  parameter C_SLICE_ADDR = ((P_DATA_WIDTH_INT <= 2) ? 1 :
							(P_DATA_WIDTH_INT <= 4) ? 2 :
                            (P_DATA_WIDTH_INT <= 8) ? 3 :
							(P_DATA_WIDTH_INT <= 16) ? 4 :
							(P_DATA_WIDTH_INT <= 32) ? 5 :
							(P_DATA_WIDTH_INT <= 64) ? 7 : 8);
  parameter C_ROM_ADDR_WIDTH = ((C_SLICE_DEPTH <= 2) ? 1 :
							(C_SLICE_DEPTH <= 4) ? 2 :
                            (C_SLICE_DEPTH <= 8) ? 3 :
							(C_SLICE_DEPTH <= 16) ? 4 :
							(C_SLICE_DEPTH <= 32) ? 5 :
							(C_SLICE_DEPTH <= 64) ? 7 : 8);
  parameter C_ROM_DEPTH = ((C_SLICE_DEPTH < 16) ? 16 :
							(C_SLICE_DEPTH < 32) ? 32 :
                            (C_SLICE_DEPTH < 48) ? 48 :
							(C_SLICE_DEPTH < 64) ? 64 : 80);
  function [P_DATA_WIDTH_INT-1 : 0]F_SHIFT;
    input [P_DATA_WIDTH_INT-1 : 0]DATA_IN;
    input P_FIXED_SHIFT;
    input P_VAR_SHIFT;
    integer P_FIXED_SHIFT;
    integer P_VAR_SHIFT;
    reg [P_DATA_WIDTH_INT-1 : 0]DATA_INT;
    integer II;
  begin
    for (II=P_DATA_WIDTH_INT-1;II>P_DATA_WIDTH_INT-1-P_VAR_SHIFT-P_FIXED_SHIFT;II=II-1)
      DATA_INT[II] = DATA_IN[P_DATA_WIDTH_INT-1];
    for (II=P_DATA_WIDTH_INT-1-P_VAR_SHIFT-P_FIXED_SHIFT;II>=0;II=II-1)
      DATA_INT[II] = DATA_IN[II+P_VAR_SHIFT+P_FIXED_SHIFT];
    F_SHIFT = DATA_INT;
  end 
  endfunction

  function [C_SLICE_ADDR : 0] F_GEN_TC_VECT;
    input TC_VAL;
    integer TC_VAL; 
    reg [C_SLICE_ADDR : 0]DATA_INT;
    integer X_INT;
    integer X_NEW;
    integer II;
  begin
    X_INT = TC_VAL;
    for (II=0;II<=C_SLICE_ADDR;II=II+1)
	begin
	  X_NEW = X_INT/2;
      DATA_INT[II] = 1'B0;
	  if ( X_INT != (X_NEW + X_NEW))
        DATA_INT[II] = 1'B1;
      X_INT = X_NEW;
	end
	  F_GEN_TC_VECT = DATA_INT;
  end 
  endfunction

  function integer F_VECT_TO_INT;
    input [C_SLICE_ADDR-1 : 0]DATA_IN;
    integer X_INT;
    integer X_STAGE;
    integer II;
  begin
    X_INT = 0;
	X_STAGE = 1;
    for (II=0;II<=C_SLICE_ADDR-1;II=II+1)
	begin
	  if ( DATA_IN[II] == 1'b1)
        X_INT = X_INT + X_STAGE;
      X_STAGE = X_STAGE + X_STAGE;
	end
	F_VECT_TO_INT = X_INT;
  end 
  endfunction

  function integer F_ROM_VECT_TO_INT;
    input [C_ROM_ADDR_WIDTH-1 : 0]DATA_IN;
    integer X_INT;
    integer X_STAGE;
    integer II;
  begin
    X_INT = 0;
	X_STAGE = 1;
    for (II=0;II<=C_ROM_ADDR_WIDTH-1;II=II+1)
	begin
	  if ( DATA_IN[II] == 1'b1)
        X_INT = X_INT + X_STAGE;
      X_STAGE = X_STAGE + X_STAGE;
	end
    F_ROM_VECT_TO_INT = X_INT;
  end 
  endfunction

    parameter P_ATAN_RADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000100000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000100000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000100000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000100000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000100000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000100000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000100000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000100000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000100000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000100000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000100000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000100000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000100000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000100000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000011111111111111111111111111111111111111111111101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000111111111111111111111111111111111111111111101011,
  `C_MAX_ROM_WIDTH'b000000000000000000000001111111111111111111111111111111111111111101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000000011111111111111111111111111111111111111101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000000111111111111111111111111111111111111101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000001111111111111111111111111111111111101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000011111111111111111111111111111111101010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000111111111111111111111111111111101010101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000001111111111111111111111111111101010101010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000011111111111111111111111111101010101010101010101010101110,
  `C_MAX_ROM_WIDTH'b000000000000000111111111111111111111111101010101010101010101010110111100,
  `C_MAX_ROM_WIDTH'b000000000000001111111111111111111111101010101010101010101011011101110111,
  `C_MAX_ROM_WIDTH'b000000000000011111111111111111111101010101010101010101101110111011101111,
  `C_MAX_ROM_WIDTH'b000000000000111111111111111111101010101010101010110111011101110111010101,
  `C_MAX_ROM_WIDTH'b000000000001111111111111111101010101010101011011101110111011011100101001,
  `C_MAX_ROM_WIDTH'b000000000011111111111111101010101010101101110111011101010010111001011010,
  `C_MAX_ROM_WIDTH'b000000000111111111111101010101010110111011101101110010100110101011011110,
  `C_MAX_ROM_WIDTH'b000000001111111111101010101011011101110101001011101100010010010101000010,
  `C_MAX_ROM_WIDTH'b000000011111111101010101101110110111001011001111110111101001110001101101,
  `C_MAX_ROM_WIDTH'b000000111111101010110111010100110101010110000101111011011011100011001011,
  `C_MAX_ROM_WIDTH'b000001111101011011011101011111100100101100100000001101110101100010101011,
  `C_MAX_ROM_WIDTH'b000011101101011000110011100000101011000011011101101001111100010010000110};
  
  parameter P_ATAN_JRADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000010100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000101000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001010001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010100011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000101000110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001010001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010100011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000101000101111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001010001011111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010100010111110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000101000101111101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001010001011111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010100010111110011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000101000101111100110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001010001011111001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010100010111110011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000101000101111100110000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001010001011111001100001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010100010111110011000001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000101000101111100110000011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001010001011111001100000111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010100010111110011000001101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000101000101111100110000011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001010001011111001100000110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010100010111110011000001101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000101000101111100110000011011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001010001011111001100000110110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010100010111110011000001101101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000101000101111100110000011011011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001010001011111001100000110110111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010100010111110011000001101101110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000101000101111100110000011011011100101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001010001011111001100000110110111001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010100010111110011000001101101110010011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000101000101111100110000011011011100100111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001010001011111001100000110110111001001110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010100010111110011000001101101110010011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000101000101111100110000011011011100100111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001010001011111001100000110110111001001110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010100010111110011000001101101110010011100100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000101000101111100110000011011011100100111001000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001010001011111001100000110110111001001110010000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010100010111110011000001101101110010011100011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000101000101111100110000011011011100100111000001101,
  `C_MAX_ROM_WIDTH'b000000000000000000000001010001011111001100000110110111001001101011010101,
  `C_MAX_ROM_WIDTH'b000000000000000000000010100010111110011000001101101110010010101101111011,
  `C_MAX_ROM_WIDTH'b000000000000000000000101000101111100110000011011011100100000010101111010,
  `C_MAX_ROM_WIDTH'b000000000000000000001010001011111001100000110110111000010111111100001110,
  `C_MAX_ROM_WIDTH'b000000000000000000010100010111110011000001101101101011101001111011101101,
  `C_MAX_ROM_WIDTH'b000000000000000000101000101111100110000011011010101110100100010001010110,
  `C_MAX_ROM_WIDTH'b000000000000000001010001011111001100000110110000010111001011110010010001,
  `C_MAX_ROM_WIDTH'b000000000000000010100010111110011000001100110111111110110001100001100110,
  `C_MAX_ROM_WIDTH'b000000000000000101000101111100110000010100101010000000110010110111000010,
  `C_MAX_ROM_WIDTH'b000000000000001010001011111001100000000000100100011011101001111011011010,
  `C_MAX_ROM_WIDTH'b000000000000010100010111110010111010111011001100001010101100110111101110,
  `C_MAX_ROM_WIDTH'b000000000000101000101111100101001101000110110100001100001100110110111111,
  `C_MAX_ROM_WIDTH'b000000000001010001011111000101010100010001110101000100001010101110101000,
  `C_MAX_ROM_WIDTH'b000000000010100010111101100001111001011100001010000010011000101001100001,
  `C_MAX_ROM_WIDTH'b000000000101000101110101111110000101011001000001000110001001111000010101,
  `C_MAX_ROM_WIDTH'b000000001010001011000011010100001100001110010110001001101011101100110000,
  `C_MAX_ROM_WIDTH'b000000010100010001000100011101010000011101110111011001101000011011100000,
  `C_MAX_ROM_WIDTH'b000000100111111011001110000101101101011110111000111001111010001101111000,
  `C_MAX_ROM_WIDTH'b000001001011100100000001010001110110011101111100110000100001111010111100};

  parameter P_ATANH_RADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000100000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000100000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000100000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000100000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000100000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000100000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000100000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000100000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000100000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000100000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000100000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000100000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000100000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000100000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000100000000000000000000000000000000000000000000011,
  `C_MAX_ROM_WIDTH'b000000000000000000000001000000000000000000000000000000000000000000010101,
  `C_MAX_ROM_WIDTH'b000000000000000000000010000000000000000000000000000000000000000010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000000100000000000000000000000000000000000000010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000001000000000000000000000000000000000000010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000010000000000000000000000000000000000010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000100000000000000000000000000000000010101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000001000000000000000000000000000000010101010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000010000000000000000000000000000010101010101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000100000000000000000000000000010101010101010101010101011000,
  `C_MAX_ROM_WIDTH'b000000000000001000000000000000000000000010101010101010101010101100010001,
  `C_MAX_ROM_WIDTH'b000000000000010000000000000000000000010101010101010101010110001000100010,
  `C_MAX_ROM_WIDTH'b000000000000100000000000000000000010101010101010101011000100010001000100,
  `C_MAX_ROM_WIDTH'b000000000001000000000000000000010101010101010101100010001000100010010010,
  `C_MAX_ROM_WIDTH'b000000000010000000000000000010101010101010110001000100010001010110100011,
  `C_MAX_ROM_WIDTH'b000000000100000000000000010101010101011000100010001001000110101101001110,
  `C_MAX_ROM_WIDTH'b000000001000000000000010101010101100010001000101011010001110010011000111,
  `C_MAX_ROM_WIDTH'b000000010000000000010101010110001000100100011010111011100010010010110100,
  `C_MAX_ROM_WIDTH'b000000100000000010101011000100010101101001101110101101011001101110010110,
  `C_MAX_ROM_WIDTH'b000001000000010101100010010001110010011110101011101111011101101001100101,
  `C_MAX_ROM_WIDTH'b000010000010110001010111011111010100000010001010001010001101001110010100,
  `C_MAX_ROM_WIDTH'b000100011001001111101010011110101010110100000011000010100111110011111001};

  parameter P_ATANH_JRADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000010100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000101000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001010001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010100011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000101000110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001010001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010100011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000101000101111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001010001011111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010100010111110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000101000101111101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001010001011111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010100010111110011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000101000101111100110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001010001011111001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010100010111110011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000101000101111100110000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001010001011111001100000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010100010111110011000001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000101000101111100110000011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001010001011111001100000111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010100010111110011000001101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000101000101111100110000011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001010001011111001100000110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010100010111110011000001101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000101000101111100110000011011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001010001011111001100000110110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010100010111110011000001101101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000101000101111100110000011011011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001010001011111001100000110110111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010100010111110011000001101101110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000101000101111100110000011011011100101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001010001011111001100000110110111001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010100010111110011000001101101110010011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000101000101111100110000011011011100100111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001010001011111001100000110110111001001110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010100010111110011000001101101110010011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000101000101111100110000011011011100100111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001010001011111001100000110110111001001110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010100010111110011000001101101110010011100100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000101000101111100110000011011011100100111001000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001010001011111001100000110110111001001110010010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010100010111110011000001101101110010011100101001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000101000101111100110000011011011100100111001111010,
  `C_MAX_ROM_WIDTH'b000000000000000000000001010001011111001100000110110111001001111000111010,
  `C_MAX_ROM_WIDTH'b000000000000000000000010100010111110011000001101101110010100011010100101,
  `C_MAX_ROM_WIDTH'b000000000000000000000101000101111100110000011011011100101101111011000111,
  `C_MAX_ROM_WIDTH'b000000000000000000001010001011111001100000110110111010000100100101110100,
  `C_MAX_ROM_WIDTH'b000000000000000000010100010111110011000001101101111001001111001000011000,
  `C_MAX_ROM_WIDTH'b000000000000000000101000101111100110000011011100011011001101110110110100,
  `C_MAX_ROM_WIDTH'b000000000000000001010001011111001100000110111101111100011000011110000101,
  `C_MAX_ROM_WIDTH'b000000000000000010100010111110011000001110100100101000010111000000000101,
  `C_MAX_ROM_WIDTH'b000000000000000101000101111100110000100010001111001101011110101010111001,
  `C_MAX_ROM_WIDTH'b000000000000001010001011111001100001101101001110000001001000011010010001,
  `C_MAX_ROM_WIDTH'b000000000000010100010111110011001000100000011000110110100000101110110010,
  `C_MAX_ROM_WIDTH'b000000000000101000101111100110111001110000011001101010101011111010010101,
  `C_MAX_ROM_WIDTH'b000000000001010001011111010010111001011110100000111000011000111110011000,
  `C_MAX_ROM_WIDTH'b000000000010100010111111001110100011000001101001001111110100011101111100,
  `C_MAX_ROM_WIDTH'b000000000101000110000011100011010010000110010010000101010101101000101111,
  `C_MAX_ROM_WIDTH'b000000001010001100101111111101110100100111000101100100011110011011011100,
  `C_MAX_ROM_WIDTH'b000000010100011110101001101111110000110110010010110011101110001001010111,
  `C_MAX_ROM_WIDTH'b000000101001101000000011010110000100100011111110110010011001011000110100,
  `C_MAX_ROM_WIDTH'b000001011001100001011110001000110111101101011100101111010000001101101110};

  parameter ROM_DATA_TRIG = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ?
              P_ATAN_RADS : P_ATAN_JRADS);
  parameter ROM_DATA_HYP = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ?
              P_ATANH_RADS : P_ATANH_JRADS);
  parameter P_ROM_DATA_INT = ((P_CORDIC_FUNCT == `C_F_SINH_COSH)||(P_CORDIC_FUNCT == `C_F_ATANH) ?
                            ROM_DATA_HYP : ROM_DATA_TRIG); 

  wire [P_DATA_WIDTH_INT-1 : 0]ROM_DATA_INT;
  reg [P_DATA_WIDTH_INT-1 : 0]ROM_DATA_ASYNC;
  wire ADD_NSUB_INT;
  wire [C_ROM_ADDR_WIDTH-1 : 0]ROM_ADDR_INT;

  // CTRL SIGNALS
  wire DATA_X_SIGN;
  wire DATA_Y_SIGN;
  wire PHASE_SIGN;

  wire ND_NEXT; 
  wire ND_FB;
  wire ND_INT;

  wire [P_CTRL_WIDTH-1 : 0]CTRL_VECT_INT;
  wire ND_AND_CE;
  
  wire [C_SLICE_ADDR : 0]CNT;
  reg [C_SLICE_ADDR : 0]CNT_NEXT;
  wire [C_SLICE_ADDR : 0]CNT_SCLR;

  wire RFD_NEXT;
  wire RFD_TMP;
  wire RFD_INT;

  reg RDY_PRE;
  wire RDY_INT;
  wire RDY_TMP;
 
  wire SCLR_TMP;
  wire SCLR_INT;
  wire CE_SCLR;
    
  wire [C_SLICE_ADDR-1 : 0]SHIFT_VAR_INT;

  reg [C_SLICE_ADDR : 0]TC_VECTOR;
  wire [C_SLICE_ADDR : 0]INIT_VECTOR = {(C_SLICE_ADDR+1){1'b1}};

  // DATA ACCUM SIGNALS
  wire [P_DATA_WIDTH_INT-1 : 0]DATA_X_MUX;
  wire [P_DATA_WIDTH_INT-1 : 0]DATA_X_HW_SHIFT; 
  wire [P_DATA_WIDTH_INT-1 : 0]DATA_X_ADD; 
  wire [P_DATA_WIDTH_INT-1 : 0]DATA_X_FB;
  wire [P_DATA_WIDTH_INT-1 : 0]DATA_Y_MUX;
  wire [P_DATA_WIDTH_INT-1 : 0]DATA_Y_HW_SHIFT;
  wire [P_DATA_WIDTH_INT-1 : 0]DATA_Y_ADD; 
  wire [P_DATA_WIDTH_INT-1 : 0]DATA_Y_FB;

  // PHASE ACCUM SIGNALS
  wire [P_DATA_WIDTH_INT-1 : 0]PHASE_MUX;
  wire [P_DATA_WIDTH_INT-1 : 0]PHASE_ADD;
  wire [P_DATA_WIDTH_INT-1 : 0]PHASE_FB;

  // ROM SIGNALS
  integer ROM_ADDR_INTEGER;
  integer ROM_ADDR_START;
  integer I;

  // Gen Add_NSub 
  assign DATA_X_SIGN = ((ND_INT == 1'b1) ? DATA_X_IN[P_DATA_WIDTH_INT-1] : 
                                           DATA_X_FB[P_DATA_WIDTH_INT-1]);
  assign DATA_Y_SIGN = ((ND_INT == 1'b1) ? DATA_Y_IN[P_DATA_WIDTH_INT-1] : 
                                           DATA_Y_FB[P_DATA_WIDTH_INT-1]);
  assign PHASE_SIGN = ((ND_INT == 1'b1) ? PHASE_IN[P_DATA_WIDTH_INT-1] : 
                                           PHASE_FB[P_DATA_WIDTH_INT-1]);

  assign ADD_NSUB_INT = ( (ENGINE_MODE == `C_EM_ROTATIONAL) ? PHASE_SIGN :
		   !(DATA_X_SIGN ^ DATA_Y_SIGN) );

  // Gen ND Signal
  assign ND_NEXT = ((CTRL_VECT_IN[0] == 1'b1 && RFD_TMP == 1'b1) ? 1'b1 : 1'b0);

  lib_fd1_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR)
    inst_nd_fb(.D(ND_NEXT),.Q(ND_FB),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  lib_fd1_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR)
    inst_nd_int(.D(ND_FB),.Q(ND_INT),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  // Gen RFD Signal
  assign RFD_NEXT = (((ND_NEXT == 1'b0 && RFD_TMP == 1'b1) || (RDY_PRE ==1'b1)) ? 1'b1 : 1'b0);

  lib_fd1i_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,"1")
    inst_rfd_tmp(.D(RFD_NEXT),.Q(RFD_TMP),.CLK(CLK),.AINIT(ACLR),
                        .SINIT(SCLR), .CE(CE));

  initial
  begin
    TC_VECTOR = F_GEN_TC_VECT((C_SLICE_DEPTH-1));
  end

  always @(CNT)
  begin

    if (CNT == (TC_VECTOR-2))
	begin
      RDY_PRE = 1'b1;
	  CNT_NEXT = CNT + 1'b1;
	end
	else if (CNT == (TC_VECTOR))
	begin
      RDY_PRE = 1'b0;
	  CNT_NEXT = {(C_SLICE_ADDR+1){1'b0}};
	end
	else
	begin
      RDY_PRE = 1'b0;
	  CNT_NEXT = CNT + 1'b1;
	end
  end

  assign SCLR_INT = ((P_HAS_SCLR == 1) ? (ND_NEXT | SCLR) : ND_NEXT);

  assign CNT_SCLR = ((SCLR_INT == 1) ? TC_VECTOR : CNT_NEXT);
  assign CE_SCLR = (((SCLR == 1)&&(P_HAS_SCLR==1)) ? 1'b1 : CE);

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,0,C_SLICE_ADDR+1)
    inst_cntr_reg(.D(CNT_SCLR),.Q(CNT),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(1'b0), .CE(CE_SCLR));

  assign ROM_ADDR_INT = CNT[C_ROM_ADDR_WIDTH-1 : 0];
  assign SHIFT_VAR_INT = CNT[C_SLICE_ADDR-1 : 0];

  assign RDY_INT = (((RDY_PRE == 1'b1)&&(RDY_TMP == 1'b0)&&(RFD_TMP == 1'b0)) ? 1'b1 : 1'b0);

  lib_fd1_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR)
    inst_rdy_tmp(.D(RDY_INT),.Q(RDY_TMP),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign CTRL_VECT_INT[0] = RDY_TMP;
  assign CTRL_VECT_INT[1] = CTRL_VECT_IN[1];

  assign ND_AND_CE = ((ND_INT == 1'b1 && CE == 1'b1) ? 1'b1 : 1'b0);

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,2)
    inst_ctrl_vect_3_2(.D(CTRL_VECT_IN[3 : 2]),.Q(CTRL_VECT_INT[3 : 2]),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(ND_AND_CE));

  assign DATA_X_MUX = (ND_INT == 1'B1) ? DATA_X_IN : DATA_X_FB;
  assign DATA_Y_MUX = (ND_INT == 1'B1) ? DATA_Y_IN : DATA_Y_FB;
  assign PHASE_MUX = (ND_INT == 1'B1) ? PHASE_IN : PHASE_FB;

  //Pad the input and implement the hardware shift
  assign DATA_X_HW_SHIFT = F_SHIFT(DATA_X_MUX, (P_HARDWIRED_SHIFT+1), F_VECT_TO_INT(SHIFT_VAR_INT));
  assign DATA_Y_HW_SHIFT = F_SHIFT(DATA_Y_MUX, (P_HARDWIRED_SHIFT+1), F_VECT_TO_INT(SHIFT_VAR_INT));

  //gen datax add_sub and register
  assign DATA_X_ADD = ((ADD_NSUB_INT == 1'b1) ?
           DATA_X_MUX + DATA_Y_HW_SHIFT : DATA_X_MUX - DATA_Y_HW_SHIFT);
  //gen datay add_sub and register
  assign DATA_Y_ADD = ((ADD_NSUB_INT == 1'b1) ?
           DATA_Y_MUX - DATA_X_HW_SHIFT : DATA_Y_MUX + DATA_X_HW_SHIFT);
  //gen phase add_sub and register
  assign PHASE_ADD = ((ADD_NSUB_INT == 1'b1) ?
         PHASE_MUX + ROM_DATA_INT : PHASE_MUX - ROM_DATA_INT);

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DATA_WIDTH_INT)
    inst_data_x_int(.D(DATA_X_ADD),.Q(DATA_X_FB),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DATA_WIDTH_INT)
    inst_data_y_int(.D(DATA_Y_ADD),.Q(DATA_Y_FB),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DATA_WIDTH_INT)
    inst_phase_fb(.D(PHASE_ADD),.Q(PHASE_FB),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  always@(ROM_ADDR_INT)
  begin
    ROM_ADDR_INTEGER = (F_ROM_VECT_TO_INT(ROM_ADDR_INT));
  end

  always@(ROM_ADDR_INTEGER)
  begin
    ROM_ADDR_START = (`C_MAX_ROM_WIDTH*(ROM_ADDR_INTEGER+C_SLICE_DEPTH*P_ITERATION+1));
  end

  always@(ROM_ADDR_START)
  begin
    for (I=0; I<P_DATA_WIDTH_INT; I=I+1)
	begin
      ROM_DATA_ASYNC[I] = P_ROM_DATA_INT[ROM_ADDR_START-P_DATA_WIDTH_INT+I];
	end
  end

  assign ROM_DATA_INT = ROM_DATA_ASYNC;

  assign DATA_X_OUT = DATA_X_FB;
  assign DATA_Y_OUT = DATA_Y_FB;
  assign PHASE_OUT = PHASE_FB;
  assign CTRL_VECT_OUT = CTRL_VECT_INT;

endmodule //cordic_eng_slice_wser_v1_0_v

module cordic_eng_v1_0_v(ENGINE_MODE, DATA_X_IN, DATA_Y_IN, PHASE_IN, DATA_X_OUT, DATA_Y_OUT, PHASE_OUT, 
                    CTRL_VECT_IN, CTRL_VECT_OUT, CLK, ACLR, SCLR, CE);
  parameter P_ARCHITECTURE = `C_WSER_ARCH;
  parameter P_CORDIC_FUNCT = `C_F_ROTATE;
  parameter P_CTRL_WIDTH = 4;
  parameter P_DATA_EXTEND = 5;
  parameter P_DATA_WIDTH = 32;
  parameter P_ENABLE_RLOCS = 1;
  parameter P_HAS_ACLR = 0;
  parameter P_HAS_CE = 0;
  parameter P_HAS_SCLR = 0;
  parameter P_PHASE_FORMAT = `C_FORMAT_RADS;
  parameter P_REPLICATIONS = 1;
  parameter P_ROUND_MODE = `C_ROUND_POS_NEG_INF;
  parameter P_SCALE_COMP = `C_SCALE_NONE;

  input ENGINE_MODE;
  input [P_DATA_WIDTH-1 : 0]DATA_X_IN;
  input [P_DATA_WIDTH-1 : 0]DATA_Y_IN;
  input [P_DATA_WIDTH-1 : 0]PHASE_IN;
  input [P_DATA_WIDTH-1 : 0]DATA_X_OUT;
  input [P_DATA_WIDTH-1 : 0]DATA_Y_OUT;
  input [P_DATA_WIDTH-1 : 0]PHASE_OUT;
  input [P_CTRL_WIDTH-1 : 0]CTRL_VECT_IN;
  input [P_CTRL_WIDTH-1 : 0]CTRL_VECT_OUT;
  input CLK;
  input ACLR;
  input SCLR;
  input CE;

  parameter C_SLICE_WIDTH = ((P_ARCHITECTURE == `C_PARA_ARCH) ? 1 :
              (P_REPLICATIONS == `C_REPL_NONE) ? P_DATA_WIDTH : `C_WSER_SLICE_OPT);

  parameter C_REP_COUNT = (((P_DATA_WIDTH-1)/C_SLICE_WIDTH)+1);

  parameter C_DATA_WIDTH_INT = (P_DATA_WIDTH + P_DATA_EXTEND);

	//Parameters to calculate the latency for the constant coefficient multiplier.
	parameter rom_addr_width =  4;
	parameter sig_addr_bits = (C_DATA_WIDTH_INT >= rom_addr_width ? rom_addr_width : C_DATA_WIDTH_INT) ;
	parameter effective_op_width = C_DATA_WIDTH_INT;
	parameter a_input_width = ((effective_op_width % rom_addr_width == 0) ? effective_op_width : effective_op_width + rom_addr_width - (effective_op_width % rom_addr_width)) ;
	parameter mod = a_input_width % rom_addr_width ;
	parameter op_width = (mod == 0 ? a_input_width : (a_input_width + rom_addr_width) - mod) ;
	parameter a_width = op_width ;
	parameter ccm_numAdders_1 = (mod == 0 ? (a_input_width/rom_addr_width) : (a_input_width/rom_addr_width)+1) ;
	parameter ccm_numAdders = ccm_numAdders_1 - 1;
	parameter ccm_initial_latency = ((ccm_numAdders > 0 ) ? 2 : 0) ;

	//Latency calculation
	parameter numAdders = ccm_numAdders ;
	parameter log = (numAdders < 2 ? 0 : (numAdders < 4 ? 1 : (numAdders < 8 ? 2 : (numAdders < 16 ? 3 : (numAdders < 32 ? 4 : (numAdders < 64 ? 5 : (numAdders < 128 ? 6 : 7))))))) ; 
	parameter C_LATENCY_sub = (numAdders > 0 ? (ccm_initial_latency + log ) : ccm_initial_latency) ;
	parameter C_SCALE_LATENCY = C_LATENCY_sub+1;

  parameter C_INV_CORDIC_SCALE_TRIG_CONST_SLV = 
  `C_MAX_ROM_WIDTH'b001101101111011001010110110001011010011100011001010111000011000100100000;
  parameter	C_INV_CORDIC_SCALE_TRIG_CONST_STR =
  "001101101111011001010110110001011010011100011001010111000011000100100000";
  parameter C_INV_CORDIC_SCALE_HYP_CONST_SLV =
  `C_MAX_ROM_WIDTH'b001001010000011100010010000101010101001001101101011010000001000111111111; 
  parameter C_INV_CORDIC_SCALE_HYP_CONST_STR =
  "001001010000011100010010000101010101001001101101011010000001000111111111"; 

  parameter C_INV_CORDIC_SCALE = ((P_CORDIC_FUNCT==`C_F_SINH_COSH||P_CORDIC_FUNCT==`C_F_ATANH)?
    C_INV_CORDIC_SCALE_HYP_CONST_SLV[`C_MAX_ROM_WIDTH:`C_MAX_ROM_WIDTH-C_DATA_WIDTH_INT] :
    C_INV_CORDIC_SCALE_TRIG_CONST_SLV[`C_MAX_ROM_WIDTH:`C_MAX_ROM_WIDTH-C_DATA_WIDTH_INT]);

  parameter C_REP_COUNT_MAX = 64;

  function [P_DATA_WIDTH-1:0]F_ROUND;
    input [C_DATA_WIDTH_INT-1:0]DATA_IN;
	input MODE;
	integer MODE;
    reg [P_DATA_WIDTH+1:0]RND_TMP;
    reg [P_DATA_WIDTH+1:0]ONE_VECT;        
  begin
    // Truncate Round
    if (MODE == `C_ROUND_TRUNCATE)
      RND_TMP[P_DATA_WIDTH+1 : 0] = DATA_IN[C_DATA_WIDTH_INT-1:C_DATA_WIDTH_INT-P_DATA_WIDTH-2];
    // Rnd Pos Inf
    else if (MODE == `C_ROUND_POS_INF)
    begin
      ONE_VECT[P_DATA_WIDTH+1 : 2] = { P_DATA_WIDTH{1'b0} };
      ONE_VECT[1 :0] = 2'b10;
      RND_TMP = DATA_IN[C_DATA_WIDTH_INT-1:C_DATA_WIDTH_INT-P_DATA_WIDTH-2]+ONE_VECT;
    end
    // Rnd Pos Neg Inf
    else if (MODE == `C_ROUND_POS_NEG_INF)
	begin
	  if (DATA_IN[C_DATA_WIDTH_INT-1] == 1'b0)
      begin
        ONE_VECT[P_DATA_WIDTH+1 : 2] = {P_DATA_WIDTH{1'b0}};
        ONE_VECT[1 :0] = 2'b10;
      end
      else
      begin
        ONE_VECT[P_DATA_WIDTH+1 : 2] = {P_DATA_WIDTH{1'b0}};
        ONE_VECT[1 :0] = 2'b01;
      end
      RND_TMP = DATA_IN[C_DATA_WIDTH_INT-1:C_DATA_WIDTH_INT-P_DATA_WIDTH-2]+ONE_VECT;
    end
    //Check for overflow or underflow
	if ((RND_TMP[P_DATA_WIDTH+1] != DATA_IN[C_DATA_WIDTH_INT-1]) &&
	    (RND_TMP[P_DATA_WIDTH+1] != RND_TMP[P_DATA_WIDTH]))
	  RND_TMP = DATA_IN[C_DATA_WIDTH_INT-1:C_DATA_WIDTH_INT-P_DATA_WIDTH-2];
    F_ROUND = RND_TMP[P_DATA_WIDTH+1:2];  
  end
  endfunction

  function F_FUNCT_HAS_PORT;
    input FUNCT;
	input POSITION;
	integer FUNCT;
	integer POSITION;
    reg [`C_CORDIC_IO_CNT-1 : 0]IN_OUT_VECT;
    reg IN_OUT_BIT;        
  begin
    case (FUNCT)
      `C_F_ROTATE : IN_OUT_VECT = 6'b111110;
      `C_F_TRANSLATE : IN_OUT_VECT = 6'b110101;
      `C_F_SIN_COS : IN_OUT_VECT = 6'b001110;
      `C_F_ATAN : IN_OUT_VECT = 6'b110001;
      `C_F_SINH_COSH : IN_OUT_VECT = 6'b001110;
      `C_F_ATANH : IN_OUT_VECT = 6'b110001;
      `C_F_SQRT : IN_OUT_VECT = 6'b100100;
      default : IN_OUT_VECT = 6'b111111;
    endcase
    F_FUNCT_HAS_PORT = IN_OUT_VECT[POSITION]; 
  end
  endfunction

  function [C_DATA_WIDTH_INT:0]TWOS_COMP;
    input [C_DATA_WIDTH_INT:0] A;
    reg [C_DATA_WIDTH_INT:0] INV_A;
    reg [C_DATA_WIDTH_INT:0] TWOS_COMP_INT;
    integer I;
  begin
    for(I=0;I<C_DATA_WIDTH_INT+1;I=I+1)
      INV_A[I] = !A[I];
    TWOS_COMP_INT = INV_A + 1'b1;
	TWOS_COMP = TWOS_COMP_INT;
  end
  endfunction

  function [2*C_DATA_WIDTH_INT-1:0]SIGNED_MULT;
    input [C_DATA_WIDTH_INT-1:0] A;
    input [C_DATA_WIDTH_INT-1:0] B;
    reg [2*C_DATA_WIDTH_INT-1:0] MAIN;
    reg [2*C_DATA_WIDTH_INT-1:0] ADJ_A;
    reg [2*C_DATA_WIDTH_INT-1:0] ADJ_B;
    reg [2*C_DATA_WIDTH_INT-1:0] ADJ_C;
    reg [2*C_DATA_WIDTH_INT-1:0] SIGNED_MULT_TMP;
  begin
    ADJ_A = {2*C_DATA_WIDTH_INT{1'b0}};
    ADJ_B = {2*C_DATA_WIDTH_INT{1'b0}};
    ADJ_C = {2*C_DATA_WIDTH_INT{1'b0}};
    if (A[C_DATA_WIDTH_INT-1] == 1'b1)
      ADJ_A = {TWOS_COMP({2'b00,B[C_DATA_WIDTH_INT-2:0]}),{(C_DATA_WIDTH_INT-1){1'b0}}};
    if (B[C_DATA_WIDTH_INT-1] == 1'b1)
      ADJ_B = {TWOS_COMP({2'b00,A[C_DATA_WIDTH_INT-2:0]}),{(C_DATA_WIDTH_INT-1){1'b0}}};
    if ((A[C_DATA_WIDTH_INT-1] == 1'b1)&(B[C_DATA_WIDTH_INT-1] == 1'b1))
      ADJ_C = {2'b01,{(2*C_DATA_WIDTH_INT-2){1'b0}}};
    MAIN = {1'b0,A[C_DATA_WIDTH_INT-2:0]} * {1'b0,B[C_DATA_WIDTH_INT-2:0]};
    SIGNED_MULT_TMP = MAIN + ADJ_A + ADJ_B + ADJ_C;
    SIGNED_MULT = SIGNED_MULT_TMP;
  end
  endfunction

  function [C_DATA_WIDTH_INT-1:0]SLICE_DATA;
    input [(C_REP_COUNT+1)*C_DATA_WIDTH_INT-1:0] INPUT_VECT;
	input ARRAY_INDEX;
	integer ARRAY_INDEX;
    reg [C_DATA_WIDTH_INT:0] SLICE_DATA_INT;
    integer I;
  begin
    for(I=0;I<C_DATA_WIDTH_INT;I=I+1)
      SLICE_DATA_INT[I] = INPUT_VECT[I+(ARRAY_INDEX*C_DATA_WIDTH_INT)];
	SLICE_DATA = SLICE_DATA_INT;
  end
  endfunction

  function [C_DATA_WIDTH_INT-1:0]SLICE_CTRL;
    input [(C_REP_COUNT+1)*P_CTRL_WIDTH-1:0] INPUT_VECT;
	input ARRAY_INDEX;
	integer ARRAY_INDEX;
    reg [P_CTRL_WIDTH:0] SLICE_CTRL_INT;
    integer I;
  begin
    for(I=0;I<P_CTRL_WIDTH;I=I+1)
      SLICE_CTRL_INT[I] = INPUT_VECT[I+(ARRAY_INDEX*P_CTRL_WIDTH)];
	SLICE_CTRL = SLICE_CTRL_INT;
  end
  endfunction
  	
  wire [C_DATA_WIDTH_INT-1 : 0]DATA_X_INT_IN;
  wire [C_DATA_WIDTH_INT-1 : 0]DATA_Y_INT_IN;
  wire [C_DATA_WIDTH_INT-1 : 0]PHASE_INT_IN;
  wire [P_CTRL_WIDTH-1 : 0]CTRL_INT_IN;

  wire [C_DATA_WIDTH_INT-1 : 0]DATA_X_INT_OUT;
  wire [C_DATA_WIDTH_INT-1 : 0]DATA_Y_INT_OUT;
  wire [C_DATA_WIDTH_INT-1 : 0]PHASE_INT_OUT;
  wire [P_CTRL_WIDTH-1 : 0]CTRL_INT_OUT;

  wire [(C_REP_COUNT_MAX+1)*C_DATA_WIDTH_INT-1 : 0]DATA_X_INT_VECT_PAR_ALL;
  wire [(C_REP_COUNT_MAX+1)*C_DATA_WIDTH_INT-1 : 0]DATA_Y_INT_VECT_PAR_ALL;
  wire [(C_REP_COUNT_MAX+1)*C_DATA_WIDTH_INT-1 : 0]PHASE_INT_VECT_PAR_ALL;
  wire [(C_REP_COUNT_MAX+1)*P_CTRL_WIDTH-1 : 0]CTRL_INT_VECT_PAR_ALL;

  wire [(C_REP_COUNT_MAX+1)*C_DATA_WIDTH_INT-1 : 0]DATA_X_INT_VECT_WSER_ALL;
  wire [(C_REP_COUNT_MAX+1)*C_DATA_WIDTH_INT-1 : 0]DATA_Y_INT_VECT_WSER_ALL;
  wire [(C_REP_COUNT_MAX+1)*C_DATA_WIDTH_INT-1 : 0]PHASE_INT_VECT_WSER_ALL;
  wire [(C_REP_COUNT_MAX+1)*P_CTRL_WIDTH-1 : 0]CTRL_INT_VECT_WSER_ALL;

  reg [C_DATA_WIDTH_INT-1 : 0] DATA_X_INT_VECT_PAR [C_REP_COUNT:0];
  reg [C_DATA_WIDTH_INT-1 : 0] DATA_Y_INT_VECT_PAR [C_REP_COUNT:0];
  reg [C_DATA_WIDTH_INT-1 : 0] PHASE_INT_VECT_PAR [C_REP_COUNT:0];
  reg [P_CTRL_WIDTH-1 : 0] CTRL_INT_VECT_PAR [C_REP_COUNT:0];

  reg [C_DATA_WIDTH_INT-1 : 0] DATA_X_INT_VECT_WSER [C_REP_COUNT:0];
  reg [C_DATA_WIDTH_INT-1 : 0] DATA_Y_INT_VECT_WSER [C_REP_COUNT:0];
  reg [C_DATA_WIDTH_INT-1 : 0] PHASE_INT_VECT_WSER [C_REP_COUNT:0];
  reg [P_CTRL_WIDTH-1 : 0] CTRL_INT_VECT_WSER [C_REP_COUNT:0];

  reg [(2*C_DATA_WIDTH_INT)-1 : 0]DATA_X_PRE_SCALE;
  reg [(2*C_DATA_WIDTH_INT)-1 : 0]DATA_Y_PRE_SCALE;
  wire [(2*P_CTRL_WIDTH)-1 : 0]CTRL_VECT_SCALE_INT;
  wire [C_DATA_WIDTH_INT-1 : 0]DATA_X_SCALE;
  wire [C_DATA_WIDTH_INT-1 : 0]DATA_Y_SCALE;
  wire [C_DATA_WIDTH_INT-1 : 0]PHASE_SCALE;
  wire [P_CTRL_WIDTH-1 : 0]CTRL_VECT_SCALE;

  wire [C_DATA_WIDTH_INT-1 : 0]DATA_X_SELECT;
  wire [C_DATA_WIDTH_INT-1 : 0]DATA_Y_SELECT;
  wire [C_DATA_WIDTH_INT-1 : 0]PHASE_SELECT;
  wire [P_CTRL_WIDTH-1 : 0]CTRL_VECT_SELECT;

  reg [P_DATA_WIDTH-1 : 0]DATA_X_ROUND;
  reg [P_DATA_WIDTH-1 : 0]DATA_Y_ROUND;
  reg [P_DATA_WIDTH-1 : 0]PHASE_ROUND;

  wire [P_DATA_WIDTH-1 : 0]DATA_X_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_REG;
  wire [P_DATA_WIDTH-1 : 0]PHASE_REG;
  wire [P_CTRL_WIDTH-1 : 0]CTRL_VECT_REG;

  wire CTRL_INT_FB;
  wire ND_DUMMY;
  wire RDY_DUMMY;

  wire DATA_X_SCALE_RDY_DUMMY;
  wire DATA_Y_SCALE_RDY_DUMMY;

  assign DATA_X_INT_IN = {DATA_X_IN, {P_DATA_EXTEND{1'b0}}};
  assign DATA_Y_INT_IN = {DATA_Y_IN, {P_DATA_EXTEND{1'b0}}};
  assign PHASE_INT_IN = {PHASE_IN, {P_DATA_EXTEND{1'b0}}};
  assign CTRL_INT_IN = {CTRL_VECT_IN[3:2], CTRL_INT_FB, CTRL_VECT_IN[0]};
  
  // Allocate Parallel and WSER versions of internal signals

  assign DATA_X_INT_VECT_PAR_ALL[C_DATA_WIDTH_INT-1 : 0] = DATA_X_INT_IN;
  assign DATA_Y_INT_VECT_PAR_ALL[C_DATA_WIDTH_INT-1 : 0] = DATA_Y_INT_IN;
  assign PHASE_INT_VECT_PAR_ALL[C_DATA_WIDTH_INT-1 : 0] = PHASE_INT_IN;
  assign CTRL_INT_VECT_PAR_ALL[P_CTRL_WIDTH-1 : 0] = CTRL_INT_IN;
  assign DATA_X_INT_VECT_WSER_ALL[C_DATA_WIDTH_INT-1 : 0] = DATA_X_INT_IN;
  assign DATA_Y_INT_VECT_WSER_ALL[C_DATA_WIDTH_INT-1 : 0] = DATA_Y_INT_IN;
  assign PHASE_INT_VECT_WSER_ALL[C_DATA_WIDTH_INT-1 : 0] = PHASE_INT_IN;
  assign CTRL_INT_VECT_WSER_ALL[P_CTRL_WIDTH-1 : 0] = CTRL_INT_IN;

  // Multi Dim Arrays to look at DATA and Control Logic 
  integer II;
  always@(DATA_X_INT_VECT_PAR_ALL)
  begin
    for (II=0;II<C_REP_COUNT+1;II=II+1)
      DATA_X_INT_VECT_PAR[II] = SLICE_DATA(DATA_X_INT_VECT_PAR_ALL,II);
  end
  always@(DATA_X_INT_VECT_WSER_ALL)
  begin
    for (II=0;II<C_REP_COUNT+1;II=II+1)
      DATA_X_INT_VECT_WSER[II] = SLICE_DATA(DATA_X_INT_VECT_WSER_ALL,II);
  end
  always@(DATA_Y_INT_VECT_PAR_ALL)
  begin
    for (II=0;II<C_REP_COUNT+1;II=II+1)
      DATA_Y_INT_VECT_PAR[II] = SLICE_DATA(DATA_Y_INT_VECT_PAR_ALL,II);
  end
  always@(DATA_Y_INT_VECT_WSER_ALL)
  begin
    for (II=0;II<C_REP_COUNT+1;II=II+1)
      DATA_Y_INT_VECT_WSER[II] = SLICE_DATA(DATA_Y_INT_VECT_WSER_ALL,II);
  end
  always@(PHASE_INT_VECT_PAR_ALL)
  begin
    for (II=0;II<C_REP_COUNT+1;II=II+1)
      PHASE_INT_VECT_PAR[II] = SLICE_DATA(PHASE_INT_VECT_PAR_ALL,II);
  end
  always@(PHASE_INT_VECT_WSER_ALL)
  begin
    for (II=0;II<C_REP_COUNT+1;II=II+1)
      PHASE_INT_VECT_WSER[II] = SLICE_DATA(PHASE_INT_VECT_WSER_ALL,II);
  end
  always@(CTRL_INT_VECT_PAR_ALL)
  begin
    for (II=0;II<C_REP_COUNT+1;II=II+1)
      CTRL_INT_VECT_PAR[II] = SLICE_CTRL(CTRL_INT_VECT_PAR_ALL,II);
  end
  always@(CTRL_INT_VECT_WSER_ALL)
  begin
    for (II=0;II<C_REP_COUNT+1;II=II+1)
      CTRL_INT_VECT_WSER[II] = SLICE_CTRL(CTRL_INT_VECT_WSER_ALL,II);
  end

  //Assign internal signals to selected architecture.
  assign DATA_X_INT_OUT = ((P_ARCHITECTURE == `C_PARA_ARCH) ?
    DATA_X_INT_VECT_PAR_ALL[(C_REP_COUNT+1)*C_DATA_WIDTH_INT-1 : C_REP_COUNT*C_DATA_WIDTH_INT] :
    DATA_X_INT_VECT_WSER_ALL[(C_REP_COUNT+1)*C_DATA_WIDTH_INT-1 : C_REP_COUNT*C_DATA_WIDTH_INT]);
  assign DATA_Y_INT_OUT = ((P_ARCHITECTURE == `C_PARA_ARCH) ?
    DATA_Y_INT_VECT_PAR_ALL[(C_REP_COUNT+1)*C_DATA_WIDTH_INT-1 : C_REP_COUNT*C_DATA_WIDTH_INT] :
    DATA_Y_INT_VECT_WSER_ALL[(C_REP_COUNT+1)*C_DATA_WIDTH_INT-1 : C_REP_COUNT*C_DATA_WIDTH_INT]);
  assign PHASE_INT_OUT = ((P_ARCHITECTURE == `C_PARA_ARCH) ?
    PHASE_INT_VECT_PAR_ALL[(C_REP_COUNT+1)*C_DATA_WIDTH_INT-1 : C_REP_COUNT*C_DATA_WIDTH_INT] :
    PHASE_INT_VECT_WSER_ALL[(C_REP_COUNT+1)*C_DATA_WIDTH_INT-1 : C_REP_COUNT*C_DATA_WIDTH_INT]);
  assign CTRL_INT_OUT = ((P_ARCHITECTURE == `C_PARA_ARCH) ?
    CTRL_INT_VECT_PAR_ALL[(C_REP_COUNT+1)*P_CTRL_WIDTH-1 : C_REP_COUNT*P_CTRL_WIDTH] :
    CTRL_INT_VECT_WSER_ALL[(C_REP_COUNT+1)*P_CTRL_WIDTH-1 : C_REP_COUNT*P_CTRL_WIDTH]);

  assign CTRL_INT_FB = ((P_ARCHITECTURE == `C_PARA_ARCH) ?
           CTRL_INT_VECT_PAR_ALL[2*P_CTRL_WIDTH-1 : 1*P_CTRL_WIDTH] : 
           CTRL_INT_VECT_WSER_ALL[2*P_CTRL_WIDTH-1 : 1*P_CTRL_WIDTH]);

  // Instantiate the WSER Engine
  //  c_eng_slice_wser_vlog #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_DATA_EXTEND, 
  //  P_ENABLE_RLOCS, P_HARDWIRED_SHIFT, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, P_ITERATION, P_PHASE_FORMAT, 
  //  P_REP_COUNT, P_SLICE_WIDTH)
  cordic_eng_slice_wser_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_DATA_EXTEND,
      P_ENABLE_RLOCS, C_SLICE_WIDTH*0, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 0 , P_PHASE_FORMAT,
      C_REP_COUNT, C_SLICE_WIDTH)
    inst_eng_wser_slice_0(.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_WSER_ALL[1*C_DATA_WIDTH_INT-1 : 0*C_DATA_WIDTH_INT]), 
      .DATA_Y_IN(DATA_Y_INT_VECT_WSER_ALL[1*C_DATA_WIDTH_INT-1 : 0*C_DATA_WIDTH_INT]), 
      .PHASE_IN(PHASE_INT_VECT_WSER_ALL[1*C_DATA_WIDTH_INT-1 : 0*C_DATA_WIDTH_INT]), 
      .DATA_X_OUT(DATA_X_INT_VECT_WSER_ALL[(1+1)*C_DATA_WIDTH_INT-1 : 1*C_DATA_WIDTH_INT]), 
      .DATA_Y_OUT(DATA_Y_INT_VECT_WSER_ALL[(1+1)*C_DATA_WIDTH_INT-1 : 1*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_WSER_ALL[(1+1)*C_DATA_WIDTH_INT-1 : 1*C_DATA_WIDTH_INT]), 
      .CTRL_VECT_IN(CTRL_INT_VECT_WSER_ALL[1*P_CTRL_WIDTH-1 : 0*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_WSER_ALL[(1+1)*P_CTRL_WIDTH-1 : 1*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_wser_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_DATA_EXTEND,
      P_ENABLE_RLOCS, C_SLICE_WIDTH*1, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 1, P_PHASE_FORMAT,
      C_REP_COUNT, C_SLICE_WIDTH)
    inst_eng_wser_slice_1(.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_WSER_ALL[2*C_DATA_WIDTH_INT-1 : 1*C_DATA_WIDTH_INT]), 
      .DATA_Y_IN(DATA_Y_INT_VECT_WSER_ALL[2*C_DATA_WIDTH_INT-1 : 1*C_DATA_WIDTH_INT]), 
      .PHASE_IN(PHASE_INT_VECT_WSER_ALL[2*C_DATA_WIDTH_INT-1 : 1*C_DATA_WIDTH_INT]), 
      .DATA_X_OUT(DATA_X_INT_VECT_WSER_ALL[(2+1)*C_DATA_WIDTH_INT-1 : 2*C_DATA_WIDTH_INT]), 
      .DATA_Y_OUT(DATA_Y_INT_VECT_WSER_ALL[(2+1)*C_DATA_WIDTH_INT-1 : 2*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_WSER_ALL[(2+1)*C_DATA_WIDTH_INT-1 : 2*C_DATA_WIDTH_INT]), 
      .CTRL_VECT_IN(CTRL_INT_VECT_WSER_ALL[2*P_CTRL_WIDTH-1 : 1*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_WSER_ALL[(2+1)*P_CTRL_WIDTH-1 : 2*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_wser_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_DATA_EXTEND,
      P_ENABLE_RLOCS, C_SLICE_WIDTH*2, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 2, P_PHASE_FORMAT,
      C_REP_COUNT, C_SLICE_WIDTH)
    inst_eng_wser_slice_2(.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_WSER_ALL[3*C_DATA_WIDTH_INT-1 : 2*C_DATA_WIDTH_INT]), 
      .DATA_Y_IN(DATA_Y_INT_VECT_WSER_ALL[3*C_DATA_WIDTH_INT-1 : 2*C_DATA_WIDTH_INT]), 
      .PHASE_IN(PHASE_INT_VECT_WSER_ALL[3*C_DATA_WIDTH_INT-1 : 2*C_DATA_WIDTH_INT]), 
      .DATA_X_OUT(DATA_X_INT_VECT_WSER_ALL[(3+1)*C_DATA_WIDTH_INT-1 : 3*C_DATA_WIDTH_INT]), 
      .DATA_Y_OUT(DATA_Y_INT_VECT_WSER_ALL[(3+1)*C_DATA_WIDTH_INT-1 : 3*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_WSER_ALL[(3+1)*C_DATA_WIDTH_INT-1 : 3*C_DATA_WIDTH_INT]), 
      .CTRL_VECT_IN(CTRL_INT_VECT_WSER_ALL[3*P_CTRL_WIDTH-1 : 2*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_WSER_ALL[(3+1)*P_CTRL_WIDTH-1 : 3*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_wser_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_DATA_EXTEND,
      P_ENABLE_RLOCS, C_SLICE_WIDTH*3, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 3, P_PHASE_FORMAT,
      C_REP_COUNT, C_SLICE_WIDTH)
    inst_eng_wser_slice_3(.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_WSER_ALL[4*C_DATA_WIDTH_INT-1 : 3*C_DATA_WIDTH_INT]), 
      .DATA_Y_IN(DATA_Y_INT_VECT_WSER_ALL[4*C_DATA_WIDTH_INT-1 : 3*C_DATA_WIDTH_INT]), 
      .PHASE_IN(PHASE_INT_VECT_WSER_ALL[4*C_DATA_WIDTH_INT-1 : 3*C_DATA_WIDTH_INT]), 
      .DATA_X_OUT(DATA_X_INT_VECT_WSER_ALL[(4+1)*C_DATA_WIDTH_INT-1 : 4*C_DATA_WIDTH_INT]), 
      .DATA_Y_OUT(DATA_Y_INT_VECT_WSER_ALL[(4+1)*C_DATA_WIDTH_INT-1 : 4*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_WSER_ALL[(4+1)*C_DATA_WIDTH_INT-1 : 4*C_DATA_WIDTH_INT]), 
      .CTRL_VECT_IN(CTRL_INT_VECT_WSER_ALL[4*P_CTRL_WIDTH-1 : 3*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_WSER_ALL[(4+1)*P_CTRL_WIDTH-1 : 4*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_wser_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_DATA_EXTEND,
      P_ENABLE_RLOCS, C_SLICE_WIDTH*4, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 4, P_PHASE_FORMAT,
      C_REP_COUNT, C_SLICE_WIDTH)
    inst_eng_wser_slice_4(.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_WSER_ALL[5*C_DATA_WIDTH_INT-1 : 4*C_DATA_WIDTH_INT]), 
      .DATA_Y_IN(DATA_Y_INT_VECT_WSER_ALL[5*C_DATA_WIDTH_INT-1 : 4*C_DATA_WIDTH_INT]), 
      .PHASE_IN(PHASE_INT_VECT_WSER_ALL[5*C_DATA_WIDTH_INT-1 : 4*C_DATA_WIDTH_INT]), 
      .DATA_X_OUT(DATA_X_INT_VECT_WSER_ALL[(5+1)*C_DATA_WIDTH_INT-1 : 5*C_DATA_WIDTH_INT]), 
      .DATA_Y_OUT(DATA_Y_INT_VECT_WSER_ALL[(5+1)*C_DATA_WIDTH_INT-1 : 5*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_WSER_ALL[(5+1)*C_DATA_WIDTH_INT-1 : 5*C_DATA_WIDTH_INT]), 
      .CTRL_VECT_IN(CTRL_INT_VECT_WSER_ALL[5*P_CTRL_WIDTH-1 : 4*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_WSER_ALL[(5+1)*P_CTRL_WIDTH-1 : 5*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_wser_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_DATA_EXTEND,
      P_ENABLE_RLOCS, C_SLICE_WIDTH*5, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 5, P_PHASE_FORMAT,
      C_REP_COUNT, C_SLICE_WIDTH)
    inst_eng_wser_slice_5(.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_WSER_ALL[6*C_DATA_WIDTH_INT-1 : 5*C_DATA_WIDTH_INT]), 
      .DATA_Y_IN(DATA_Y_INT_VECT_WSER_ALL[6*C_DATA_WIDTH_INT-1 : 5*C_DATA_WIDTH_INT]), 
      .PHASE_IN(PHASE_INT_VECT_WSER_ALL[6*C_DATA_WIDTH_INT-1 : 5*C_DATA_WIDTH_INT]), 
      .DATA_X_OUT(DATA_X_INT_VECT_WSER_ALL[(6+1)*C_DATA_WIDTH_INT-1 : 6*C_DATA_WIDTH_INT]), 
      .DATA_Y_OUT(DATA_Y_INT_VECT_WSER_ALL[(6+1)*C_DATA_WIDTH_INT-1 : 6*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_WSER_ALL[(6+1)*C_DATA_WIDTH_INT-1 : 6*C_DATA_WIDTH_INT]), 
      .CTRL_VECT_IN(CTRL_INT_VECT_WSER_ALL[6*P_CTRL_WIDTH-1 : 5*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_WSER_ALL[(6+1)*P_CTRL_WIDTH-1 : 6*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_wser_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_DATA_EXTEND,
      P_ENABLE_RLOCS, C_SLICE_WIDTH*6, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 6, P_PHASE_FORMAT,
      C_REP_COUNT, C_SLICE_WIDTH)
    inst_eng_wser_slice_6(.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_WSER_ALL[7*C_DATA_WIDTH_INT-1 : 6*C_DATA_WIDTH_INT]), 
      .DATA_Y_IN(DATA_Y_INT_VECT_WSER_ALL[7*C_DATA_WIDTH_INT-1 : 6*C_DATA_WIDTH_INT]), 
      .PHASE_IN(PHASE_INT_VECT_WSER_ALL[7*C_DATA_WIDTH_INT-1 : 6*C_DATA_WIDTH_INT]), 
      .DATA_X_OUT(DATA_X_INT_VECT_WSER_ALL[(7+1)*C_DATA_WIDTH_INT-1 : 7*C_DATA_WIDTH_INT]), 
      .DATA_Y_OUT(DATA_Y_INT_VECT_WSER_ALL[(7+1)*C_DATA_WIDTH_INT-1 : 7*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_WSER_ALL[(7+1)*C_DATA_WIDTH_INT-1 : 7*C_DATA_WIDTH_INT]), 
      .CTRL_VECT_IN(CTRL_INT_VECT_WSER_ALL[7*P_CTRL_WIDTH-1 : 6*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_WSER_ALL[(7+1)*P_CTRL_WIDTH-1 : 7*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_wser_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_DATA_EXTEND,
      P_ENABLE_RLOCS, C_SLICE_WIDTH*7, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 7, P_PHASE_FORMAT,
      C_REP_COUNT, C_SLICE_WIDTH)
    inst_eng_wser_slice_7(.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_WSER_ALL[8*C_DATA_WIDTH_INT-1 : 7*C_DATA_WIDTH_INT]), 
      .DATA_Y_IN(DATA_Y_INT_VECT_WSER_ALL[8*C_DATA_WIDTH_INT-1 : 7*C_DATA_WIDTH_INT]), 
      .PHASE_IN(PHASE_INT_VECT_WSER_ALL[8*C_DATA_WIDTH_INT-1 : 7*C_DATA_WIDTH_INT]), 
      .DATA_X_OUT(DATA_X_INT_VECT_WSER_ALL[(8+1)*C_DATA_WIDTH_INT-1 : 8*C_DATA_WIDTH_INT]), 
      .DATA_Y_OUT(DATA_Y_INT_VECT_WSER_ALL[(8+1)*C_DATA_WIDTH_INT-1 : 8*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_WSER_ALL[(8+1)*C_DATA_WIDTH_INT-1 : 8*C_DATA_WIDTH_INT]), 
      .CTRL_VECT_IN(CTRL_INT_VECT_WSER_ALL[8*P_CTRL_WIDTH-1 : 7*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_WSER_ALL[(8+1)*P_CTRL_WIDTH-1 : 8*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

  // Instantiate the Parallel Engine  
  //P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT,P_ENABLE_RLOCS,
  //P_HARDWIRED_SHIFT, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, P_ITERATION, P_PHASE_FORMAT)
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          0, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 0, P_PHASE_FORMAT)
    inst_eng_para_slice0 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[1*C_DATA_WIDTH_INT-1 : 0*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[1*C_DATA_WIDTH_INT-1 : 0*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[1*C_DATA_WIDTH_INT-1 : 0*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(1+1)*C_DATA_WIDTH_INT-1 : (0+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(1+1)*C_DATA_WIDTH_INT-1 : (0+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(1+1)*C_DATA_WIDTH_INT-1 : (0+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[1*P_CTRL_WIDTH-1 : 0*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(1+1)*P_CTRL_WIDTH-1 : (0+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          1, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 1, P_PHASE_FORMAT)
    inst_eng_para_slice1 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[2*C_DATA_WIDTH_INT-1 : 1*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[2*C_DATA_WIDTH_INT-1 : 1*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[2*C_DATA_WIDTH_INT-1 : 1*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(2+1)*C_DATA_WIDTH_INT-1 : (1+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(2+1)*C_DATA_WIDTH_INT-1 : (1+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(2+1)*C_DATA_WIDTH_INT-1 : (1+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[2*P_CTRL_WIDTH-1 : 1*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(2+1)*P_CTRL_WIDTH-1 : (1+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          2, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 2, P_PHASE_FORMAT)
    inst_eng_para_slice2 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[3*C_DATA_WIDTH_INT-1 : 2*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[3*C_DATA_WIDTH_INT-1 : 2*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[3*C_DATA_WIDTH_INT-1 : 2*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(3+1)*C_DATA_WIDTH_INT-1 : (2+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(3+1)*C_DATA_WIDTH_INT-1 : (2+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(3+1)*C_DATA_WIDTH_INT-1 : (2+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[3*P_CTRL_WIDTH-1 : 2*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(3+1)*P_CTRL_WIDTH-1 : (2+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          3, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 3, P_PHASE_FORMAT)
    inst_eng_para_slice3 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[4*C_DATA_WIDTH_INT-1 : 3*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[4*C_DATA_WIDTH_INT-1 : 3*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[4*C_DATA_WIDTH_INT-1 : 3*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(4+1)*C_DATA_WIDTH_INT-1 : (3+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(4+1)*C_DATA_WIDTH_INT-1 : (3+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(4+1)*C_DATA_WIDTH_INT-1 : (3+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[4*P_CTRL_WIDTH-1 : 3*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(4+1)*P_CTRL_WIDTH-1 : (3+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          4, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 4, P_PHASE_FORMAT)
    inst_eng_para_slice4 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[5*C_DATA_WIDTH_INT-1 : 4*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[5*C_DATA_WIDTH_INT-1 : 4*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[5*C_DATA_WIDTH_INT-1 : 4*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(5+1)*C_DATA_WIDTH_INT-1 : (4+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(5+1)*C_DATA_WIDTH_INT-1 : (4+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(5+1)*C_DATA_WIDTH_INT-1 : (4+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[5*P_CTRL_WIDTH-1 : 4*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(5+1)*P_CTRL_WIDTH-1 : (4+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          5, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 5, P_PHASE_FORMAT)
    inst_eng_para_slice5 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[6*C_DATA_WIDTH_INT-1 : 5*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[6*C_DATA_WIDTH_INT-1 : 5*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[6*C_DATA_WIDTH_INT-1 : 5*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(6+1)*C_DATA_WIDTH_INT-1 : (5+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(6+1)*C_DATA_WIDTH_INT-1 : (5+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(6+1)*C_DATA_WIDTH_INT-1 : (5+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[6*P_CTRL_WIDTH-1 : 5*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(6+1)*P_CTRL_WIDTH-1 : (5+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          6, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 6, P_PHASE_FORMAT)
    inst_eng_para_slice6 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[7*C_DATA_WIDTH_INT-1 : 6*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[7*C_DATA_WIDTH_INT-1 : 6*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[7*C_DATA_WIDTH_INT-1 : 6*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(7+1)*C_DATA_WIDTH_INT-1 : (6+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(7+1)*C_DATA_WIDTH_INT-1 : (6+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(7+1)*C_DATA_WIDTH_INT-1 : (6+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[7*P_CTRL_WIDTH-1 : 6*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(7+1)*P_CTRL_WIDTH-1 : (6+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          7, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 7, P_PHASE_FORMAT)
    inst_eng_para_slice7 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[8*C_DATA_WIDTH_INT-1 : 7*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[8*C_DATA_WIDTH_INT-1 : 7*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[8*C_DATA_WIDTH_INT-1 : 7*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(8+1)*C_DATA_WIDTH_INT-1 : (7+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(8+1)*C_DATA_WIDTH_INT-1 : (7+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(8+1)*C_DATA_WIDTH_INT-1 : (7+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[8*P_CTRL_WIDTH-1 : 7*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(8+1)*P_CTRL_WIDTH-1 : (7+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          8, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 8, P_PHASE_FORMAT)
    inst_eng_para_slice8 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[9*C_DATA_WIDTH_INT-1 : 8*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[9*C_DATA_WIDTH_INT-1 : 8*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[9*C_DATA_WIDTH_INT-1 : 8*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(9+1)*C_DATA_WIDTH_INT-1 : (8+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(9+1)*C_DATA_WIDTH_INT-1 : (8+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(9+1)*C_DATA_WIDTH_INT-1 : (8+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[9*P_CTRL_WIDTH-1 : 8*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(9+1)*P_CTRL_WIDTH-1 : (8+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          9, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 9, P_PHASE_FORMAT)
    inst_eng_para_slice9 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[10*C_DATA_WIDTH_INT-1 : 9*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[10*C_DATA_WIDTH_INT-1 : 9*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[10*C_DATA_WIDTH_INT-1 : 9*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(10+1)*C_DATA_WIDTH_INT-1 : (9+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(10+1)*C_DATA_WIDTH_INT-1 : (9+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(10+1)*C_DATA_WIDTH_INT-1 : (9+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[10*P_CTRL_WIDTH-1 : 9*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(10+1)*P_CTRL_WIDTH-1 : (9+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          10, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 10, P_PHASE_FORMAT)
    inst_eng_para_slice10 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[11*C_DATA_WIDTH_INT-1 : 10*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[11*C_DATA_WIDTH_INT-1 : 10*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[11*C_DATA_WIDTH_INT-1 : 10*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(11+1)*C_DATA_WIDTH_INT-1 : (10+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(11+1)*C_DATA_WIDTH_INT-1 : (10+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(11+1)*C_DATA_WIDTH_INT-1 : (10+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[11*P_CTRL_WIDTH-1 : 10*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(11+1)*P_CTRL_WIDTH-1 : (10+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          11, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 11, P_PHASE_FORMAT)
    inst_eng_para_slice11 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[12*C_DATA_WIDTH_INT-1 : 11*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[12*C_DATA_WIDTH_INT-1 : 11*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[12*C_DATA_WIDTH_INT-1 : 11*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(12+1)*C_DATA_WIDTH_INT-1 : (11+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(12+1)*C_DATA_WIDTH_INT-1 : (11+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(12+1)*C_DATA_WIDTH_INT-1 : (11+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[12*P_CTRL_WIDTH-1 : 11*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(12+1)*P_CTRL_WIDTH-1 : (11+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          12, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 12, P_PHASE_FORMAT)
    inst_eng_para_slice12 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[13*C_DATA_WIDTH_INT-1 : 12*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[13*C_DATA_WIDTH_INT-1 : 12*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[13*C_DATA_WIDTH_INT-1 : 12*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(13+1)*C_DATA_WIDTH_INT-1 : (12+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(13+1)*C_DATA_WIDTH_INT-1 : (12+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(13+1)*C_DATA_WIDTH_INT-1 : (12+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[13*P_CTRL_WIDTH-1 : 12*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(13+1)*P_CTRL_WIDTH-1 : (12+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          13, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 13, P_PHASE_FORMAT)
    inst_eng_para_slice13 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[14*C_DATA_WIDTH_INT-1 : 13*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[14*C_DATA_WIDTH_INT-1 : 13*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[14*C_DATA_WIDTH_INT-1 : 13*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(14+1)*C_DATA_WIDTH_INT-1 : (13+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(14+1)*C_DATA_WIDTH_INT-1 : (13+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(14+1)*C_DATA_WIDTH_INT-1 : (13+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[14*P_CTRL_WIDTH-1 : 13*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(14+1)*P_CTRL_WIDTH-1 : (13+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          14, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 14, P_PHASE_FORMAT)
    inst_eng_para_slice14 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[15*C_DATA_WIDTH_INT-1 : 14*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[15*C_DATA_WIDTH_INT-1 : 14*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[15*C_DATA_WIDTH_INT-1 : 14*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(15+1)*C_DATA_WIDTH_INT-1 : (14+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(15+1)*C_DATA_WIDTH_INT-1 : (14+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(15+1)*C_DATA_WIDTH_INT-1 : (14+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[15*P_CTRL_WIDTH-1 : 14*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(15+1)*P_CTRL_WIDTH-1 : (14+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          15, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 15, P_PHASE_FORMAT)
    inst_eng_para_slice15 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[16*C_DATA_WIDTH_INT-1 : 15*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[16*C_DATA_WIDTH_INT-1 : 15*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[16*C_DATA_WIDTH_INT-1 : 15*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(16+1)*C_DATA_WIDTH_INT-1 : (15+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(16+1)*C_DATA_WIDTH_INT-1 : (15+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(16+1)*C_DATA_WIDTH_INT-1 : (15+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[16*P_CTRL_WIDTH-1 : 15*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(16+1)*P_CTRL_WIDTH-1 : (15+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          16, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 16, P_PHASE_FORMAT)
    inst_eng_para_slice16 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[17*C_DATA_WIDTH_INT-1 : 16*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[17*C_DATA_WIDTH_INT-1 : 16*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[17*C_DATA_WIDTH_INT-1 : 16*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(17+1)*C_DATA_WIDTH_INT-1 : (16+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(17+1)*C_DATA_WIDTH_INT-1 : (16+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(17+1)*C_DATA_WIDTH_INT-1 : (16+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[17*P_CTRL_WIDTH-1 : 16*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(17+1)*P_CTRL_WIDTH-1 : (16+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          17, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 17, P_PHASE_FORMAT)
    inst_eng_para_slice17 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[18*C_DATA_WIDTH_INT-1 : 17*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[18*C_DATA_WIDTH_INT-1 : 17*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[18*C_DATA_WIDTH_INT-1 : 17*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(18+1)*C_DATA_WIDTH_INT-1 : (17+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(18+1)*C_DATA_WIDTH_INT-1 : (17+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(18+1)*C_DATA_WIDTH_INT-1 : (17+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[18*P_CTRL_WIDTH-1 : 17*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(18+1)*P_CTRL_WIDTH-1 : (17+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          18, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 18, P_PHASE_FORMAT)
    inst_eng_para_slice18 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[19*C_DATA_WIDTH_INT-1 : 18*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[19*C_DATA_WIDTH_INT-1 : 18*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[19*C_DATA_WIDTH_INT-1 : 18*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(19+1)*C_DATA_WIDTH_INT-1 : (18+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(19+1)*C_DATA_WIDTH_INT-1 : (18+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(19+1)*C_DATA_WIDTH_INT-1 : (18+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[19*P_CTRL_WIDTH-1 : 18*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(19+1)*P_CTRL_WIDTH-1 : (18+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          19, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 19, P_PHASE_FORMAT)
    inst_eng_para_slice19 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[20*C_DATA_WIDTH_INT-1 : 19*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[20*C_DATA_WIDTH_INT-1 : 19*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[20*C_DATA_WIDTH_INT-1 : 19*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(20+1)*C_DATA_WIDTH_INT-1 : (19+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(20+1)*C_DATA_WIDTH_INT-1 : (19+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(20+1)*C_DATA_WIDTH_INT-1 : (19+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[20*P_CTRL_WIDTH-1 : 19*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(20+1)*P_CTRL_WIDTH-1 : (19+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          20, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 20, P_PHASE_FORMAT)
    inst_eng_para_slice20 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[21*C_DATA_WIDTH_INT-1 : 20*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[21*C_DATA_WIDTH_INT-1 : 20*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[21*C_DATA_WIDTH_INT-1 : 20*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(21+1)*C_DATA_WIDTH_INT-1 : (20+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(21+1)*C_DATA_WIDTH_INT-1 : (20+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(21+1)*C_DATA_WIDTH_INT-1 : (20+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[21*P_CTRL_WIDTH-1 : 20*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(21+1)*P_CTRL_WIDTH-1 : (20+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          21, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 21, P_PHASE_FORMAT)
    inst_eng_para_slice21 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[22*C_DATA_WIDTH_INT-1 : 21*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[22*C_DATA_WIDTH_INT-1 : 21*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[22*C_DATA_WIDTH_INT-1 : 21*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(22+1)*C_DATA_WIDTH_INT-1 : (21+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(22+1)*C_DATA_WIDTH_INT-1 : (21+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(22+1)*C_DATA_WIDTH_INT-1 : (21+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[22*P_CTRL_WIDTH-1 : 21*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(22+1)*P_CTRL_WIDTH-1 : (21+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          22, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 22, P_PHASE_FORMAT)
    inst_eng_para_slice22 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[23*C_DATA_WIDTH_INT-1 : 22*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[23*C_DATA_WIDTH_INT-1 : 22*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[23*C_DATA_WIDTH_INT-1 : 22*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(23+1)*C_DATA_WIDTH_INT-1 : (22+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(23+1)*C_DATA_WIDTH_INT-1 : (22+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(23+1)*C_DATA_WIDTH_INT-1 : (22+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[23*P_CTRL_WIDTH-1 : 22*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(23+1)*P_CTRL_WIDTH-1 : (22+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          23, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 23, P_PHASE_FORMAT)
    inst_eng_para_slice23 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[24*C_DATA_WIDTH_INT-1 : 23*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[24*C_DATA_WIDTH_INT-1 : 23*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[24*C_DATA_WIDTH_INT-1 : 23*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(24+1)*C_DATA_WIDTH_INT-1 : (23+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(24+1)*C_DATA_WIDTH_INT-1 : (23+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(24+1)*C_DATA_WIDTH_INT-1 : (23+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[24*P_CTRL_WIDTH-1 : 23*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(24+1)*P_CTRL_WIDTH-1 : (23+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          24, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 24, P_PHASE_FORMAT)
    inst_eng_para_slice24 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[25*C_DATA_WIDTH_INT-1 : 24*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[25*C_DATA_WIDTH_INT-1 : 24*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[25*C_DATA_WIDTH_INT-1 : 24*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(25+1)*C_DATA_WIDTH_INT-1 : (24+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(25+1)*C_DATA_WIDTH_INT-1 : (24+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(25+1)*C_DATA_WIDTH_INT-1 : (24+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[25*P_CTRL_WIDTH-1 : 24*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(25+1)*P_CTRL_WIDTH-1 : (24+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          25, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 25, P_PHASE_FORMAT)
    inst_eng_para_slice25 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[26*C_DATA_WIDTH_INT-1 : 25*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[26*C_DATA_WIDTH_INT-1 : 25*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[26*C_DATA_WIDTH_INT-1 : 25*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(26+1)*C_DATA_WIDTH_INT-1 : (25+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(26+1)*C_DATA_WIDTH_INT-1 : (25+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(26+1)*C_DATA_WIDTH_INT-1 : (25+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[26*P_CTRL_WIDTH-1 : 25*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(26+1)*P_CTRL_WIDTH-1 : (25+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          26, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 26, P_PHASE_FORMAT)
    inst_eng_para_slice26 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[27*C_DATA_WIDTH_INT-1 : 26*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[27*C_DATA_WIDTH_INT-1 : 26*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[27*C_DATA_WIDTH_INT-1 : 26*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(27+1)*C_DATA_WIDTH_INT-1 : (26+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(27+1)*C_DATA_WIDTH_INT-1 : (26+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(27+1)*C_DATA_WIDTH_INT-1 : (26+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[27*P_CTRL_WIDTH-1 : 26*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(27+1)*P_CTRL_WIDTH-1 : (26+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          27, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 27, P_PHASE_FORMAT)
    inst_eng_para_slice27 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[28*C_DATA_WIDTH_INT-1 : 27*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[28*C_DATA_WIDTH_INT-1 : 27*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[28*C_DATA_WIDTH_INT-1 : 27*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(28+1)*C_DATA_WIDTH_INT-1 : (27+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(28+1)*C_DATA_WIDTH_INT-1 : (27+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(28+1)*C_DATA_WIDTH_INT-1 : (27+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[28*P_CTRL_WIDTH-1 : 27*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(28+1)*P_CTRL_WIDTH-1 : (27+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          28, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 28, P_PHASE_FORMAT)
    inst_eng_para_slice28 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[29*C_DATA_WIDTH_INT-1 : 28*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[29*C_DATA_WIDTH_INT-1 : 28*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[29*C_DATA_WIDTH_INT-1 : 28*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(29+1)*C_DATA_WIDTH_INT-1 : (28+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(29+1)*C_DATA_WIDTH_INT-1 : (28+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(29+1)*C_DATA_WIDTH_INT-1 : (28+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[29*P_CTRL_WIDTH-1 : 28*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(29+1)*P_CTRL_WIDTH-1 : (28+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          29, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 29, P_PHASE_FORMAT)
    inst_eng_para_slice29 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[30*C_DATA_WIDTH_INT-1 : 29*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[30*C_DATA_WIDTH_INT-1 : 29*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[30*C_DATA_WIDTH_INT-1 : 29*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(30+1)*C_DATA_WIDTH_INT-1 : (29+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(30+1)*C_DATA_WIDTH_INT-1 : (29+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(30+1)*C_DATA_WIDTH_INT-1 : (29+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[30*P_CTRL_WIDTH-1 : 29*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(30+1)*P_CTRL_WIDTH-1 : (29+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          30, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 30, P_PHASE_FORMAT)
    inst_eng_para_slice30 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[31*C_DATA_WIDTH_INT-1 : 30*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[31*C_DATA_WIDTH_INT-1 : 30*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[31*C_DATA_WIDTH_INT-1 : 30*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(31+1)*C_DATA_WIDTH_INT-1 : (30+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(31+1)*C_DATA_WIDTH_INT-1 : (30+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(31+1)*C_DATA_WIDTH_INT-1 : (30+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[31*P_CTRL_WIDTH-1 : 30*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(31+1)*P_CTRL_WIDTH-1 : (30+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          31, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 31, P_PHASE_FORMAT)
    inst_eng_para_slice31 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[32*C_DATA_WIDTH_INT-1 : 31*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[32*C_DATA_WIDTH_INT-1 : 31*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[32*C_DATA_WIDTH_INT-1 : 31*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(32+1)*C_DATA_WIDTH_INT-1 : (31+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(32+1)*C_DATA_WIDTH_INT-1 : (31+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(32+1)*C_DATA_WIDTH_INT-1 : (31+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[32*P_CTRL_WIDTH-1 : 31*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(32+1)*P_CTRL_WIDTH-1 : (31+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          32, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 32, P_PHASE_FORMAT)
    inst_eng_para_slice32 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[33*C_DATA_WIDTH_INT-1 : 32*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[33*C_DATA_WIDTH_INT-1 : 32*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[33*C_DATA_WIDTH_INT-1 : 32*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(33+1)*C_DATA_WIDTH_INT-1 : (32+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(33+1)*C_DATA_WIDTH_INT-1 : (32+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(33+1)*C_DATA_WIDTH_INT-1 : (32+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[33*P_CTRL_WIDTH-1 : 32*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(33+1)*P_CTRL_WIDTH-1 : (32+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          33, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 33, P_PHASE_FORMAT)
    inst_eng_para_slice33 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[34*C_DATA_WIDTH_INT-1 : 33*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[34*C_DATA_WIDTH_INT-1 : 33*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[34*C_DATA_WIDTH_INT-1 : 33*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(34+1)*C_DATA_WIDTH_INT-1 : (33+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(34+1)*C_DATA_WIDTH_INT-1 : (33+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(34+1)*C_DATA_WIDTH_INT-1 : (33+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[34*P_CTRL_WIDTH-1 : 33*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(34+1)*P_CTRL_WIDTH-1 : (33+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          34, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 34, P_PHASE_FORMAT)
    inst_eng_para_slice34 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[35*C_DATA_WIDTH_INT-1 : 34*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[35*C_DATA_WIDTH_INT-1 : 34*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[35*C_DATA_WIDTH_INT-1 : 34*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(35+1)*C_DATA_WIDTH_INT-1 : (34+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(35+1)*C_DATA_WIDTH_INT-1 : (34+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(35+1)*C_DATA_WIDTH_INT-1 : (34+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[35*P_CTRL_WIDTH-1 : 34*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(35+1)*P_CTRL_WIDTH-1 : (34+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          35, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 35, P_PHASE_FORMAT)
    inst_eng_para_slice35 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[36*C_DATA_WIDTH_INT-1 : 35*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[36*C_DATA_WIDTH_INT-1 : 35*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[36*C_DATA_WIDTH_INT-1 : 35*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(36+1)*C_DATA_WIDTH_INT-1 : (35+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(36+1)*C_DATA_WIDTH_INT-1 : (35+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(36+1)*C_DATA_WIDTH_INT-1 : (35+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[36*P_CTRL_WIDTH-1 : 35*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(36+1)*P_CTRL_WIDTH-1 : (35+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          36, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 36, P_PHASE_FORMAT)
    inst_eng_para_slice36 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[37*C_DATA_WIDTH_INT-1 : 36*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[37*C_DATA_WIDTH_INT-1 : 36*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[37*C_DATA_WIDTH_INT-1 : 36*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(37+1)*C_DATA_WIDTH_INT-1 : (36+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(37+1)*C_DATA_WIDTH_INT-1 : (36+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(37+1)*C_DATA_WIDTH_INT-1 : (36+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[37*P_CTRL_WIDTH-1 : 36*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(37+1)*P_CTRL_WIDTH-1 : (36+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          37, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 37, P_PHASE_FORMAT)
    inst_eng_para_slice37 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[38*C_DATA_WIDTH_INT-1 : 37*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[38*C_DATA_WIDTH_INT-1 : 37*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[38*C_DATA_WIDTH_INT-1 : 37*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(38+1)*C_DATA_WIDTH_INT-1 : (37+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(38+1)*C_DATA_WIDTH_INT-1 : (37+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(38+1)*C_DATA_WIDTH_INT-1 : (37+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[38*P_CTRL_WIDTH-1 : 37*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(38+1)*P_CTRL_WIDTH-1 : (37+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          38, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 38, P_PHASE_FORMAT)
    inst_eng_para_slice38 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[39*C_DATA_WIDTH_INT-1 : 38*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[39*C_DATA_WIDTH_INT-1 : 38*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[39*C_DATA_WIDTH_INT-1 : 38*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(39+1)*C_DATA_WIDTH_INT-1 : (38+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(39+1)*C_DATA_WIDTH_INT-1 : (38+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(39+1)*C_DATA_WIDTH_INT-1 : (38+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[39*P_CTRL_WIDTH-1 : 38*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(39+1)*P_CTRL_WIDTH-1 : (38+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          39, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 39, P_PHASE_FORMAT)
    inst_eng_para_slice39 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[40*C_DATA_WIDTH_INT-1 : 39*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[40*C_DATA_WIDTH_INT-1 : 39*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[40*C_DATA_WIDTH_INT-1 : 39*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(40+1)*C_DATA_WIDTH_INT-1 : (39+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(40+1)*C_DATA_WIDTH_INT-1 : (39+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(40+1)*C_DATA_WIDTH_INT-1 : (39+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[40*P_CTRL_WIDTH-1 : 39*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(40+1)*P_CTRL_WIDTH-1 : (39+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          40, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 40, P_PHASE_FORMAT)
    inst_eng_para_slice40 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[41*C_DATA_WIDTH_INT-1 : 40*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[41*C_DATA_WIDTH_INT-1 : 40*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[41*C_DATA_WIDTH_INT-1 : 40*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(41+1)*C_DATA_WIDTH_INT-1 : (40+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(41+1)*C_DATA_WIDTH_INT-1 : (40+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(41+1)*C_DATA_WIDTH_INT-1 : (40+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[41*P_CTRL_WIDTH-1 : 40*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(41+1)*P_CTRL_WIDTH-1 : (40+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          41, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 41, P_PHASE_FORMAT)
    inst_eng_para_slice41 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[42*C_DATA_WIDTH_INT-1 : 41*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[42*C_DATA_WIDTH_INT-1 : 41*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[42*C_DATA_WIDTH_INT-1 : 41*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(42+1)*C_DATA_WIDTH_INT-1 : (41+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(42+1)*C_DATA_WIDTH_INT-1 : (41+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(42+1)*C_DATA_WIDTH_INT-1 : (41+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[42*P_CTRL_WIDTH-1 : 41*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(42+1)*P_CTRL_WIDTH-1 : (41+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          42, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 42, P_PHASE_FORMAT)
    inst_eng_para_slice42 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[43*C_DATA_WIDTH_INT-1 : 42*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[43*C_DATA_WIDTH_INT-1 : 42*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[43*C_DATA_WIDTH_INT-1 : 42*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(43+1)*C_DATA_WIDTH_INT-1 : (42+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(43+1)*C_DATA_WIDTH_INT-1 : (42+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(43+1)*C_DATA_WIDTH_INT-1 : (42+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[43*P_CTRL_WIDTH-1 : 42*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(43+1)*P_CTRL_WIDTH-1 : (42+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          43, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 43, P_PHASE_FORMAT)
    inst_eng_para_slice43 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[44*C_DATA_WIDTH_INT-1 : 43*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[44*C_DATA_WIDTH_INT-1 : 43*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[44*C_DATA_WIDTH_INT-1 : 43*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(44+1)*C_DATA_WIDTH_INT-1 : (43+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(44+1)*C_DATA_WIDTH_INT-1 : (43+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(44+1)*C_DATA_WIDTH_INT-1 : (43+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[44*P_CTRL_WIDTH-1 : 43*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(44+1)*P_CTRL_WIDTH-1 : (43+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          44, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 44, P_PHASE_FORMAT)
    inst_eng_para_slice44 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[45*C_DATA_WIDTH_INT-1 : 44*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[45*C_DATA_WIDTH_INT-1 : 44*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[45*C_DATA_WIDTH_INT-1 : 44*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(45+1)*C_DATA_WIDTH_INT-1 : (44+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(45+1)*C_DATA_WIDTH_INT-1 : (44+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(45+1)*C_DATA_WIDTH_INT-1 : (44+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[45*P_CTRL_WIDTH-1 : 44*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(45+1)*P_CTRL_WIDTH-1 : (44+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          45, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 45, P_PHASE_FORMAT)
    inst_eng_para_slice45 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[46*C_DATA_WIDTH_INT-1 : 45*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[46*C_DATA_WIDTH_INT-1 : 45*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[46*C_DATA_WIDTH_INT-1 : 45*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(46+1)*C_DATA_WIDTH_INT-1 : (45+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(46+1)*C_DATA_WIDTH_INT-1 : (45+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(46+1)*C_DATA_WIDTH_INT-1 : (45+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[46*P_CTRL_WIDTH-1 : 45*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(46+1)*P_CTRL_WIDTH-1 : (45+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          46, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 46, P_PHASE_FORMAT)
    inst_eng_para_slice46 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[47*C_DATA_WIDTH_INT-1 : 46*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[47*C_DATA_WIDTH_INT-1 : 46*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[47*C_DATA_WIDTH_INT-1 : 46*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(47+1)*C_DATA_WIDTH_INT-1 : (46+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(47+1)*C_DATA_WIDTH_INT-1 : (46+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(47+1)*C_DATA_WIDTH_INT-1 : (46+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[47*P_CTRL_WIDTH-1 : 46*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(47+1)*P_CTRL_WIDTH-1 : (46+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          47, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 47, P_PHASE_FORMAT)
    inst_eng_para_slice47 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[48*C_DATA_WIDTH_INT-1 : 47*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[48*C_DATA_WIDTH_INT-1 : 47*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[48*C_DATA_WIDTH_INT-1 : 47*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(48+1)*C_DATA_WIDTH_INT-1 : (47+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(48+1)*C_DATA_WIDTH_INT-1 : (47+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(48+1)*C_DATA_WIDTH_INT-1 : (47+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[48*P_CTRL_WIDTH-1 : 47*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(48+1)*P_CTRL_WIDTH-1 : (47+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          48, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 48, P_PHASE_FORMAT)
    inst_eng_para_slice48 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[49*C_DATA_WIDTH_INT-1 : 48*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[49*C_DATA_WIDTH_INT-1 : 48*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[49*C_DATA_WIDTH_INT-1 : 48*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(49+1)*C_DATA_WIDTH_INT-1 : (48+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(49+1)*C_DATA_WIDTH_INT-1 : (48+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(49+1)*C_DATA_WIDTH_INT-1 : (48+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[49*P_CTRL_WIDTH-1 : 48*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(49+1)*P_CTRL_WIDTH-1 : (48+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          49, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 49, P_PHASE_FORMAT)
    inst_eng_para_slice49 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[50*C_DATA_WIDTH_INT-1 : 49*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[50*C_DATA_WIDTH_INT-1 : 49*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[50*C_DATA_WIDTH_INT-1 : 49*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(50+1)*C_DATA_WIDTH_INT-1 : (49+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(50+1)*C_DATA_WIDTH_INT-1 : (49+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(50+1)*C_DATA_WIDTH_INT-1 : (49+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[50*P_CTRL_WIDTH-1 : 49*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(50+1)*P_CTRL_WIDTH-1 : (49+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          50, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 50, P_PHASE_FORMAT)
    inst_eng_para_slice50 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[51*C_DATA_WIDTH_INT-1 : 50*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[51*C_DATA_WIDTH_INT-1 : 50*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[51*C_DATA_WIDTH_INT-1 : 50*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(51+1)*C_DATA_WIDTH_INT-1 : (50+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(51+1)*C_DATA_WIDTH_INT-1 : (50+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(51+1)*C_DATA_WIDTH_INT-1 : (50+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[51*P_CTRL_WIDTH-1 : 50*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(51+1)*P_CTRL_WIDTH-1 : (50+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          51, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 51, P_PHASE_FORMAT)
    inst_eng_para_slice51 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[52*C_DATA_WIDTH_INT-1 : 51*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[52*C_DATA_WIDTH_INT-1 : 51*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[52*C_DATA_WIDTH_INT-1 : 51*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(52+1)*C_DATA_WIDTH_INT-1 : (51+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(52+1)*C_DATA_WIDTH_INT-1 : (51+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(52+1)*C_DATA_WIDTH_INT-1 : (51+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[52*P_CTRL_WIDTH-1 : 51*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(52+1)*P_CTRL_WIDTH-1 : (51+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          52, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 52, P_PHASE_FORMAT)
    inst_eng_para_slice52 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[53*C_DATA_WIDTH_INT-1 : 52*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[53*C_DATA_WIDTH_INT-1 : 52*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[53*C_DATA_WIDTH_INT-1 : 52*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(53+1)*C_DATA_WIDTH_INT-1 : (52+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(53+1)*C_DATA_WIDTH_INT-1 : (52+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(53+1)*C_DATA_WIDTH_INT-1 : (52+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[53*P_CTRL_WIDTH-1 : 52*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(53+1)*P_CTRL_WIDTH-1 : (52+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          53, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 53, P_PHASE_FORMAT)
    inst_eng_para_slice53 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[54*C_DATA_WIDTH_INT-1 : 53*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[54*C_DATA_WIDTH_INT-1 : 53*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[54*C_DATA_WIDTH_INT-1 : 53*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(54+1)*C_DATA_WIDTH_INT-1 : (53+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(54+1)*C_DATA_WIDTH_INT-1 : (53+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(54+1)*C_DATA_WIDTH_INT-1 : (53+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[54*P_CTRL_WIDTH-1 : 53*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(54+1)*P_CTRL_WIDTH-1 : (53+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          54, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 54, P_PHASE_FORMAT)
    inst_eng_para_slice54 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[55*C_DATA_WIDTH_INT-1 : 54*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[55*C_DATA_WIDTH_INT-1 : 54*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[55*C_DATA_WIDTH_INT-1 : 54*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(55+1)*C_DATA_WIDTH_INT-1 : (54+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(55+1)*C_DATA_WIDTH_INT-1 : (54+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(55+1)*C_DATA_WIDTH_INT-1 : (54+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[55*P_CTRL_WIDTH-1 : 54*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(55+1)*P_CTRL_WIDTH-1 : (54+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          55, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 55, P_PHASE_FORMAT)
    inst_eng_para_slice55 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[56*C_DATA_WIDTH_INT-1 : 55*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[56*C_DATA_WIDTH_INT-1 : 55*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[56*C_DATA_WIDTH_INT-1 : 55*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(56+1)*C_DATA_WIDTH_INT-1 : (55+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(56+1)*C_DATA_WIDTH_INT-1 : (55+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(56+1)*C_DATA_WIDTH_INT-1 : (55+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[56*P_CTRL_WIDTH-1 : 55*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(56+1)*P_CTRL_WIDTH-1 : (55+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          56, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 56, P_PHASE_FORMAT)
    inst_eng_para_slice56 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[57*C_DATA_WIDTH_INT-1 : 56*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[57*C_DATA_WIDTH_INT-1 : 56*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[57*C_DATA_WIDTH_INT-1 : 56*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(57+1)*C_DATA_WIDTH_INT-1 : (56+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(57+1)*C_DATA_WIDTH_INT-1 : (56+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(57+1)*C_DATA_WIDTH_INT-1 : (56+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[57*P_CTRL_WIDTH-1 : 56*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(57+1)*P_CTRL_WIDTH-1 : (56+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          57, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 57, P_PHASE_FORMAT)
    inst_eng_para_slice57 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[58*C_DATA_WIDTH_INT-1 : 57*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[58*C_DATA_WIDTH_INT-1 : 57*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[58*C_DATA_WIDTH_INT-1 : 57*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(58+1)*C_DATA_WIDTH_INT-1 : (57+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(58+1)*C_DATA_WIDTH_INT-1 : (57+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(58+1)*C_DATA_WIDTH_INT-1 : (57+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[58*P_CTRL_WIDTH-1 : 57*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(58+1)*P_CTRL_WIDTH-1 : (57+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          58, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 58, P_PHASE_FORMAT)
    inst_eng_para_slice58 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[59*C_DATA_WIDTH_INT-1 : 58*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[59*C_DATA_WIDTH_INT-1 : 58*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[59*C_DATA_WIDTH_INT-1 : 58*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(59+1)*C_DATA_WIDTH_INT-1 : (58+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(59+1)*C_DATA_WIDTH_INT-1 : (58+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(59+1)*C_DATA_WIDTH_INT-1 : (58+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[59*P_CTRL_WIDTH-1 : 58*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(59+1)*P_CTRL_WIDTH-1 : (58+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          59, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 59, P_PHASE_FORMAT)
    inst_eng_para_slice59 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[60*C_DATA_WIDTH_INT-1 : 59*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[60*C_DATA_WIDTH_INT-1 : 59*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[60*C_DATA_WIDTH_INT-1 : 59*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(60+1)*C_DATA_WIDTH_INT-1 : (59+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(60+1)*C_DATA_WIDTH_INT-1 : (59+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(60+1)*C_DATA_WIDTH_INT-1 : (59+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[60*P_CTRL_WIDTH-1 : 59*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(60+1)*P_CTRL_WIDTH-1 : (59+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          60, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 60, P_PHASE_FORMAT)
    inst_eng_para_slice60 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[61*C_DATA_WIDTH_INT-1 : 60*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[61*C_DATA_WIDTH_INT-1 : 60*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[61*C_DATA_WIDTH_INT-1 : 60*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(61+1)*C_DATA_WIDTH_INT-1 : (60+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(61+1)*C_DATA_WIDTH_INT-1 : (60+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(61+1)*C_DATA_WIDTH_INT-1 : (60+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[61*P_CTRL_WIDTH-1 : 60*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(61+1)*P_CTRL_WIDTH-1 : (60+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));
  cordic_eng_slice_par_v1_0_v #(P_CORDIC_FUNCT, P_CTRL_WIDTH, C_DATA_WIDTH_INT, P_ENABLE_RLOCS, 
                          61, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 61, P_PHASE_FORMAT)
    inst_eng_para_slice61 (.ENGINE_MODE(ENGINE_MODE), 
      .DATA_X_IN(DATA_X_INT_VECT_PAR_ALL[62*C_DATA_WIDTH_INT-1 : 61*C_DATA_WIDTH_INT]),
      .DATA_Y_IN(DATA_Y_INT_VECT_PAR_ALL[62*C_DATA_WIDTH_INT-1 : 61*C_DATA_WIDTH_INT]),
      .PHASE_IN(PHASE_INT_VECT_PAR_ALL[62*C_DATA_WIDTH_INT-1 : 61*C_DATA_WIDTH_INT]),
      .DATA_X_OUT(DATA_X_INT_VECT_PAR_ALL[(62+1)*C_DATA_WIDTH_INT-1 : (61+1)*C_DATA_WIDTH_INT]),
      .DATA_Y_OUT(DATA_Y_INT_VECT_PAR_ALL[(62+1)*C_DATA_WIDTH_INT-1 : (61+1)*C_DATA_WIDTH_INT]),
      .PHASE_OUT(PHASE_INT_VECT_PAR_ALL[(62+1)*C_DATA_WIDTH_INT-1 : (61+1)*C_DATA_WIDTH_INT]),
      .CTRL_VECT_IN(CTRL_INT_VECT_PAR_ALL[62*P_CTRL_WIDTH-1 : 61*P_CTRL_WIDTH]),
      .CTRL_VECT_OUT(CTRL_INT_VECT_PAR_ALL[(62+1)*P_CTRL_WIDTH-1 : (61+1)*P_CTRL_WIDTH]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

  always@(DATA_X_INT_OUT)
  begin
    DATA_X_PRE_SCALE = SIGNED_MULT(DATA_X_INT_OUT, C_INV_CORDIC_SCALE);
  end

  //P_DEPTH, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, P_WIDTH
  lib_fifo_cordic_v1_0_v #(C_SCALE_LATENCY, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, C_DATA_WIDTH_INT)
    data_x_fifo_int(.D(DATA_X_PRE_SCALE[2*C_DATA_WIDTH_INT-3:C_DATA_WIDTH_INT-2]), 
                  .Q(DATA_X_SCALE), .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

  assign DATA_X_SELECT = ((P_SCALE_COMP == `C_SCALE_CCM) ? DATA_X_SCALE : DATA_X_INT_OUT);

  always @(DATA_X_SELECT)
  begin
    DATA_X_ROUND = F_ROUND(DATA_X_SELECT, P_ROUND_MODE);
  end

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_x_reg(.D(DATA_X_ROUND),.Q(DATA_X_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign DATA_X_OUT = ((F_FUNCT_HAS_PORT(P_CORDIC_FUNCT,2) == 1) ?
             (P_ROUND_MODE == `C_ROUND_TRUNCATE) ? DATA_X_ROUND :
             DATA_X_REG : {P_DATA_WIDTH{1'bz}}); 

  always@(DATA_Y_INT_OUT)
  begin
    DATA_Y_PRE_SCALE = SIGNED_MULT(DATA_Y_INT_OUT, C_INV_CORDIC_SCALE);
  end

  //P_DEPTH, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, P_WIDTH
  lib_fifo_cordic_v1_0_v #(C_SCALE_LATENCY, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, C_DATA_WIDTH_INT)
    data_y_fifo_int(.D(DATA_Y_PRE_SCALE[2*C_DATA_WIDTH_INT-3:C_DATA_WIDTH_INT-2]),
                  .Q(DATA_Y_SCALE), .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

  assign DATA_Y_SELECT = ((P_SCALE_COMP == `C_SCALE_CCM) ? DATA_Y_SCALE : DATA_Y_INT_OUT);

  always @(DATA_Y_SELECT)
  begin
    DATA_Y_ROUND = F_ROUND(DATA_Y_SELECT, P_ROUND_MODE);
  end

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_y_reg(.D(DATA_Y_ROUND),.Q(DATA_Y_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign DATA_Y_OUT = ((F_FUNCT_HAS_PORT(P_CORDIC_FUNCT,1) == 1) ?
             (P_ROUND_MODE == `C_ROUND_TRUNCATE) ? DATA_Y_ROUND :
             DATA_Y_REG : {P_DATA_WIDTH{1'bz}}); 

  //P_DEPTH, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, P_WIDTH
  lib_fifo_cordic_v1_0_v #(C_SCALE_LATENCY, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, C_DATA_WIDTH_INT)
    phase_fifo_int(.D(PHASE_INT_OUT[C_DATA_WIDTH_INT-1:0]),
                   .Q(PHASE_SCALE), .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

  assign PHASE_SELECT = ((P_SCALE_COMP == `C_SCALE_CCM) ? PHASE_SCALE : PHASE_INT_OUT);

  always @(PHASE_SELECT)
  begin
    PHASE_ROUND = F_ROUND(PHASE_SELECT, P_ROUND_MODE);
  end

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DATA_WIDTH)
    inst_phase_reg(.D(PHASE_ROUND),.Q(PHASE_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign PHASE_OUT = ((F_FUNCT_HAS_PORT(P_CORDIC_FUNCT,0) == 1) ?
             (P_ROUND_MODE == `C_ROUND_TRUNCATE) ? PHASE_ROUND :
             PHASE_REG : {P_DATA_WIDTH{1'bz}}); 

  //P_DEPTH, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, P_WIDTH
  lib_fifo_cordic_v1_0_v #(C_SCALE_LATENCY, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, P_CTRL_WIDTH)
    ctrl_fifo_int(.D(CTRL_INT_OUT), .Q(CTRL_VECT_SCALE), .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

  assign CTRL_VECT_SELECT = ((P_SCALE_COMP == `C_SCALE_CCM) ? CTRL_VECT_SCALE : CTRL_INT_OUT);

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_CTRL_WIDTH)
    inst_ctrl_reg(.D(CTRL_VECT_SELECT),.Q(CTRL_VECT_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign CTRL_VECT_OUT = CTRL_VECT_REG;

endmodule //cordic_eng_v1_0_v

//******************************************************//
// Module Definitions for Cordic Body                   //
//******************************************************//

module cordic_inp_format_rotate_v1_0_v(DATA_X_IN, DATA_Y_IN, PHASE_IN, DATA_X_OUT,DATA_Y_OUT,
         PHASE_OUT, QUAD_OUT, ND_IN, ND_OUT, CLK, ACLR, SCLR, CE);
  parameter P_CORDIC_FUNCT = `C_F_ROTATE;
  parameter P_DATA_WIDTH = 32;
  parameter P_ENABLE_RLOCS = 1;
  parameter P_HAS_ACLR = 0;
  parameter P_HAS_CE = 0;
  parameter P_HAS_SCLR = 0;
  parameter P_PHASE_FORMAT = `C_FORMAT_RADS;
  parameter P_REG_INPUTS = 0;

  input [P_DATA_WIDTH-1 : 0] DATA_X_IN;
  input [P_DATA_WIDTH-1 : 0] DATA_Y_IN;
  input [P_DATA_WIDTH-1 : 0] PHASE_IN;
  output [P_DATA_WIDTH-1 : 0] DATA_X_OUT;
  output [P_DATA_WIDTH-1 : 0] DATA_Y_OUT;
  output [P_DATA_WIDTH-1 : 0] PHASE_OUT;
  output [1 : 0] QUAD_OUT;
  input ND_IN;
  output ND_OUT;
  input CLK;
  input ACLR;
  input SCLR;
  input CE;

  parameter P_NEG_PI_CONST = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ? 
              `C_NEG_PI_RADS_CONST : `C_NEG_PI_JRADS_CONST);
  parameter P_NEG_PI_3_4_CONST = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ? 
              `C_NEG_PI_3_4_RADS_CONST : `C_NEG_PI_3_4_JRADS_CONST);
  parameter P_NEG_PI_2_4_CONST = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ? 
              `C_NEG_PI_2_4_RADS_CONST : `C_NEG_PI_2_4_JRADS_CONST);
  parameter P_NEG_PI_1_4_CONST = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ? 
              `C_NEG_PI_1_4_RADS_CONST : `C_NEG_PI_1_4_JRADS_CONST);
  parameter P_NEG_PI_CONST_SLICE = 
      P_NEG_PI_CONST[`C_MAX_ROM_WIDTH-1 : `C_MAX_ROM_WIDTH-P_DATA_WIDTH];
  parameter P_NEG_PI_3_4_CONST_SLICE = 
      P_NEG_PI_3_4_CONST[`C_MAX_ROM_WIDTH-1 : `C_MAX_ROM_WIDTH-P_DATA_WIDTH];
  parameter P_NEG_PI_2_4_CONST_SLICE = 
      P_NEG_PI_2_4_CONST[`C_MAX_ROM_WIDTH-1 : `C_MAX_ROM_WIDTH-P_DATA_WIDTH];
  parameter P_NEG_PI_1_4_CONST_SLICE = 
      P_NEG_PI_1_4_CONST[`C_MAX_ROM_WIDTH-1 : `C_MAX_ROM_WIDTH-P_DATA_WIDTH];

  wire [P_DATA_WIDTH-1 : 0]DATA_X_IN_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_IN_REG;
  wire [P_DATA_WIDTH-1 : 0]PHASE_IN_REG;
  wire ND_IN_REG;

  wire [P_DATA_WIDTH-1 : 0]DATA_X_INT;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_INT;
  wire [P_DATA_WIDTH-1 : 0]PHASE_INT;
  wire ND_INT;

  wire [P_DATA_WIDTH-1 : 0]DATA_X_INT_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_INT_REG;
  wire [P_DATA_WIDTH-1 : 0]PHASE_INT_REG;
  wire ND_INT_REG;

  wire PHASE_SIGN;
  wire PHASE_SIGN_REG;

  wire PI_3_SEL;
  wire PI_1_SEL;

  wire [P_DATA_WIDTH-1 : 0]PHASE_PI_4_ROT;
  wire [P_DATA_WIDTH-1 : 0]PHASE_PI_3_ROT;
  wire [P_DATA_WIDTH-1 : 0]PHASE_PI_2_ROT;
  wire [P_DATA_WIDTH-1 : 0]PHASE_PI_1_ROT;

  wire SIGN_X_MIN_Y;
  wire SIGN_X_PLUS_Y;
  wire [P_DATA_WIDTH-1 : 0]X_MIN_Y;
  wire [P_DATA_WIDTH-1 : 0]X_PLUS_Y;

  wire [P_DATA_WIDTH-1 : 0]DATA_X_TRANS;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_TRANS;
  wire [P_DATA_WIDTH-1 : 0]PHASE_TRANS_POS;
  wire [P_DATA_WIDTH-1 : 0]PHASE_TRANS_NEG;
  wire [P_DATA_WIDTH-1 : 0]PHASE_TRANS;
  wire [P_DATA_WIDTH-1 : 0]DATA_X_TRANS_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_TRANS_REG;
  wire [P_DATA_WIDTH-1 : 0]PHASE_TRANS_REG;

  wire [1 : 0]QUAD_DATA;
  wire [1 : 0]QUAD_PHASE_POS;
  wire [1 : 0]QUAD_PHASE_NEG;
  wire [1 : 0]QUAD_PHASE;
  wire [1 : 0]QUAD_INT;
  wire [1 : 0]QUAD_INT_REG;

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_x_in_reg(.D(DATA_X_IN),.Q(DATA_X_IN_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_y_in_reg(.D(DATA_Y_IN),.Q(DATA_Y_IN_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_phase_in_reg(.D(PHASE_IN),.Q(PHASE_IN_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd1_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR)
    inst_nd_in_reg(.D(ND_IN),.Q(ND_IN_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign DATA_X_INT = (P_REG_INPUTS == 1 ? DATA_X_IN_REG : DATA_X_IN);
  assign DATA_Y_INT = (P_REG_INPUTS == 1 ? DATA_Y_IN_REG : DATA_Y_IN);
  assign PHASE_INT = (P_REG_INPUTS == 1 ? PHASE_IN_REG : PHASE_IN);
  assign ND_INT = (P_REG_INPUTS == 1 ? ND_IN_REG : ND_IN);

  //Coarse Rotation of Input Phase
  assign PHASE_SIGN = PHASE_INT[P_DATA_WIDTH-1];
  assign PHASE_SIGN_REG = PHASE_INT_REG[P_DATA_WIDTH-1];

  assign PI_3_SEL = PHASE_PI_3_ROT[P_DATA_WIDTH -1];
  assign PI_1_SEL = PHASE_PI_1_ROT[P_DATA_WIDTH -1];

  assign PHASE_PI_4_ROT = (PHASE_SIGN_REG == 0 ?
           PHASE_INT_REG + P_NEG_PI_CONST_SLICE :
           PHASE_INT_REG - P_NEG_PI_CONST_SLICE);
  assign PHASE_PI_3_ROT = (PHASE_SIGN_REG == 0 ?
           PHASE_INT_REG + P_NEG_PI_3_4_CONST_SLICE :
           PHASE_INT_REG - P_NEG_PI_3_4_CONST_SLICE);
  assign PHASE_PI_2_ROT = (PHASE_SIGN_REG == 0 ?
           PHASE_INT_REG + P_NEG_PI_2_4_CONST_SLICE :
           PHASE_INT_REG - P_NEG_PI_2_4_CONST_SLICE);
  assign PHASE_PI_1_ROT = (PHASE_SIGN_REG == 0 ?
           PHASE_INT_REG + P_NEG_PI_1_4_CONST_SLICE :
           PHASE_INT_REG - P_NEG_PI_1_4_CONST_SLICE);

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_phase_int_reg(.D(PHASE_INT),.Q(PHASE_INT_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign  PHASE_TRANS_POS = (PI_1_SEL == 1 ? PHASE_INT_REG : PI_3_SEL == 1 ? PHASE_PI_2_ROT : PHASE_PI_4_ROT);
  assign  PHASE_TRANS_NEG = (PI_1_SEL == 0 ? PHASE_INT_REG : PI_3_SEL == 0 ? PHASE_PI_2_ROT : PHASE_PI_4_ROT);
  assign  PHASE_TRANS = (PHASE_SIGN_REG == 0 ? PHASE_TRANS_POS : PHASE_TRANS_NEG);
  assign  QUAD_PHASE_POS = (PI_1_SEL == 1 ? 2'b11 : PI_3_SEL == 1 ? 2'b01 : 2'b00);
  assign  QUAD_PHASE_NEG = (PI_1_SEL == 0 ? 2'b11 : PI_3_SEL == 0 ? 2'b10 : 2'b00);
  assign  QUAD_PHASE = (PHASE_SIGN_REG == 0 ? QUAD_PHASE_POS : QUAD_PHASE_NEG);
           
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_phase_trans_reg(.D(PHASE_TRANS),.Q(PHASE_TRANS_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  //Coarse Rotation of Initial X Y Coordinates

  assign SIGN_X_MIN_Y = X_MIN_Y[P_DATA_WIDTH-1];
  assign SIGN_X_PLUS_Y = X_PLUS_Y[P_DATA_WIDTH-1];

  assign X_MIN_Y = DATA_X_INT_REG - DATA_Y_INT_REG;
  assign X_PLUS_Y = DATA_X_INT_REG + DATA_Y_INT_REG;

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_x_int_reg(.D(DATA_X_INT),.Q(DATA_X_INT_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_y_int_reg(.D(DATA_Y_INT),.Q(DATA_Y_INT_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd1_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR)
    inst_nd_int_reg(.D(ND_INT),.Q(ND_INT_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign QUAD_DATA = {!SIGN_X_MIN_Y, !SIGN_X_PLUS_Y};

  assign DATA_X_TRANS = (QUAD_DATA == 2'b11 ? DATA_X_INT_REG : QUAD_DATA == 2'b01 ? DATA_Y_INT_REG :
                         QUAD_DATA == 2'b00 ? 0-DATA_X_INT_REG : QUAD_DATA == 2'b10 ? 0-DATA_Y_INT_REG :
                         DATA_X_INT_REG);
  assign DATA_Y_TRANS = (QUAD_DATA == 2'b11 ? DATA_Y_INT_REG : QUAD_DATA == 2'b01 ? 0-DATA_X_INT_REG :
                         QUAD_DATA == 2'b00 ? 0-DATA_Y_INT_REG : QUAD_DATA == 2'b10 ? DATA_X_INT_REG :
                         DATA_Y_INT_REG);

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_x_trans_reg(.D(DATA_X_TRANS),.Q(DATA_X_TRANS_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_y_trans_reg(.D(DATA_Y_TRANS),.Q(DATA_Y_TRANS_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign QUAD_INT = (QUAD_DATA == 2'b11 ? QUAD_PHASE : 
                     QUAD_DATA == 2'b01 ? {!QUAD_PHASE[0],QUAD_PHASE[1]} :
					 QUAD_DATA == 2'b00 ? {!QUAD_PHASE[1],!QUAD_PHASE[0]} :
					 QUAD_DATA == 2'b10 ? {QUAD_PHASE[0],!QUAD_PHASE[1]} :
					 QUAD_PHASE);
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,2)
    inst_quad_int_reg(.D(QUAD_INT),.Q(QUAD_INT_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  //Assign Outputs
  assign DATA_X_OUT = DATA_X_TRANS_REG;
  assign DATA_Y_OUT = DATA_Y_TRANS_REG;
  assign PHASE_OUT = PHASE_TRANS_REG;

  assign QUAD_OUT  = QUAD_INT_REG;
    
  assign ND_OUT = ND_INT_REG;

endmodule //cordic_inp_format_rotate_v1_0_v 

module cordic_inp_format_translate_v1_0_v(DATA_X_IN, DATA_Y_IN, DATA_X_OUT,DATA_Y_OUT,
         QUAD_OUT, ND_IN, ND_OUT, CLK, ACLR, SCLR, CE);
  parameter P_CORDIC_FUNCT = `C_F_TRANSLATE;
  parameter P_DATA_WIDTH = 32;
  parameter P_ENABLE_RLOCS = 1;
  parameter P_HAS_ACLR = 0;
  parameter P_HAS_CE = 0;
  parameter P_HAS_SCLR = 0;
  parameter P_PHASE_FORMAT = `C_FORMAT_RADS;
  parameter P_REG_INPUTS = 0;

  input [P_DATA_WIDTH-1 : 0] DATA_X_IN;
  input [P_DATA_WIDTH-1 : 0] DATA_Y_IN;
  output [P_DATA_WIDTH-1 : 0] DATA_X_OUT;
  output [P_DATA_WIDTH-1 : 0] DATA_Y_OUT;
  output [1 : 0] QUAD_OUT;
  input ND_IN;
  output ND_OUT;
  input CLK;
  input ACLR;
  input SCLR;
  input CE;

  parameter P_NEG_PI_CONST = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ? 
              `C_NEG_PI_RADS_CONST : `C_NEG_PI_JRADS_CONST);
  parameter P_NEG_PI_3_4_CONST = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ? 
              `C_NEG_PI_3_4_RADS_CONST : `C_NEG_PI_3_4_JRADS_CONST);
  parameter P_NEG_PI_2_4_CONST = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ? 
              `C_NEG_PI_2_4_RADS_CONST : `C_NEG_PI_2_4_JRADS_CONST);
  parameter P_NEG_PI_1_4_CONST = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ? 
              `C_NEG_PI_1_4_RADS_CONST : `C_NEG_PI_1_4_JRADS_CONST);

  wire [P_DATA_WIDTH-1 : 0]DATA_X_IN_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_IN_REG;
  wire ND_IN_REG;

  wire [P_DATA_WIDTH-1 : 0]DATA_X_INT;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_INT;
  wire ND_INT;

  wire [P_DATA_WIDTH-1 : 0]DATA_X_INT_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_INT_REG;
  wire ND_INT_REG;

  wire [P_DATA_WIDTH-1 : 0]X_MIN_Y;
  wire [P_DATA_WIDTH-1 : 0]X_PLUS_Y;
  wire SIGN_X_MIN_Y;
  wire SIGN_X_PLUS_Y;

  wire [P_DATA_WIDTH-1 : 0]DATA_X_TRANS;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_TRANS;
  wire [P_DATA_WIDTH-1 : 0]DATA_X_TRANS_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_TRANS_REG;

  wire [1 : 0]QUAD_INT;
  wire [1 : 0]QUAD_INT_REG;

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_x_in_reg(.D(DATA_X_IN),.Q(DATA_X_IN_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_y_in_reg(.D(DATA_Y_IN),.Q(DATA_Y_IN_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd1_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR)
    inst_nd_in_reg(.D(ND_IN),.Q(ND_IN_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign DATA_X_INT = (P_REG_INPUTS == 1 ? DATA_X_IN_REG : DATA_X_IN);
  assign DATA_Y_INT = (P_REG_INPUTS == 1 ? DATA_Y_IN_REG : DATA_Y_IN);
  assign ND_INT = (P_REG_INPUTS == 1 ? ND_IN_REG : ND_IN);

  //Coarse Rotation of Initial X Y Coordinates

  assign SIGN_X_MIN_Y = X_MIN_Y[P_DATA_WIDTH - 1];
  assign SIGN_X_PLUS_Y = X_PLUS_Y[P_DATA_WIDTH - 1];

  assign X_MIN_Y = DATA_X_INT_REG - DATA_Y_INT_REG;
  assign X_PLUS_Y = DATA_X_INT_REG + DATA_Y_INT_REG;

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_x_int_reg(.D(DATA_X_INT),.Q(DATA_X_INT_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_y_int_reg(.D(DATA_Y_INT),.Q(DATA_Y_INT_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd1_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR)
    inst_nd_int_reg(.D(ND_INT),.Q(ND_INT_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign QUAD_INT = {!SIGN_X_MIN_Y, !SIGN_X_PLUS_Y};

  assign DATA_X_TRANS = (QUAD_INT == 2'b11 ? DATA_X_INT_REG : QUAD_INT == 2'b01 ? DATA_Y_INT_REG :
                         QUAD_INT == 2'b00 ? 0-DATA_X_INT_REG : QUAD_INT == 2'b10 ? 0-DATA_Y_INT_REG :
                         DATA_X_INT_REG);
  assign DATA_Y_TRANS = (QUAD_INT == 2'b11 ? DATA_Y_INT_REG : QUAD_INT == 2'b01 ? 0-DATA_X_INT_REG :
                         QUAD_INT == 2'b00 ? 0-DATA_Y_INT_REG : QUAD_INT == 2'b10 ? DATA_X_INT_REG :
                         DATA_Y_INT_REG);

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_x_trans_reg(.D(DATA_X_TRANS),.Q(DATA_X_TRANS_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_y_trans_reg(.D(DATA_Y_TRANS),.Q(DATA_Y_TRANS_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,2)
    inst_quad_int_reg(.D(QUAD_INT),.Q(QUAD_INT_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  //Assign Outputs
  assign DATA_X_OUT = DATA_X_TRANS_REG;
  assign DATA_Y_OUT = DATA_Y_TRANS_REG;

  assign QUAD_OUT  = QUAD_INT_REG;
    
  assign ND_OUT = ND_INT_REG;

endmodule //cordic_inp_format_translate_v1_0_v 

module cordic_out_format_rotate_v1_0_v(DATA_X_IN, DATA_Y_IN,DATA_X_OUT,DATA_Y_OUT,
         QUAD_IN, ND_IN, RDY_IN, RDY_OUT, RFD_IN, RFD_OUT,CLK,ACLR,SCLR,CE);
  parameter P_ARCHITECTURE = `C_PARA_ARCH;
  parameter P_DATA_WIDTH = 32;
  parameter P_ENABLE_RLOCS = 1;
  parameter P_HAS_ACLR = 0;
  parameter P_HAS_CE = 0;
  parameter P_HAS_RDY = 0;
  parameter P_HAS_RFD = 0;
  parameter P_HAS_SCLR = 0;

  input [P_DATA_WIDTH-1 : 0] DATA_X_IN;
  input [P_DATA_WIDTH-1 : 0] DATA_Y_IN;
  output [P_DATA_WIDTH-1 : 0] DATA_X_OUT;
  output [P_DATA_WIDTH-1 : 0] DATA_Y_OUT;
  input [1 : 0] QUAD_IN;
  input ND_IN;
  input RDY_IN;
  output RDY_OUT;
  input RFD_IN;
  output RFD_OUT;
  input CLK;
  input ACLR;
  input SCLR;
  input CE;

  wire [P_DATA_WIDTH-1 : 0]DATA_X_TRANS;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_TRANS;
  wire [P_DATA_WIDTH-1 : 0]DATA_X_TRANS_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_TRANS_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_X_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_REG;
  wire [3 : 0]RDY_INT_VECT;
  wire RDY_TMP;
  wire RFD_NEXT;
  wire RFD_COMB;
  wire RFD_REG;
  wire RFD_TMP;
  wire CE_AND_RDY;

  //generate translated coordinates
  assign DATA_X_TRANS = (QUAD_IN == 2'b11 ? DATA_X_IN : 
                         QUAD_IN == 2'b01 ? 0 - DATA_Y_IN : 
						 QUAD_IN == 2'b00 ? 0 - DATA_X_IN : 
                         QUAD_IN == 2'b10 ? DATA_Y_IN : DATA_X_IN); 
  assign DATA_Y_TRANS = (QUAD_IN == 2'b11 ? DATA_Y_IN : 
                         QUAD_IN == 2'b01 ? DATA_X_IN : 
						 QUAD_IN == 2'b00 ? 0 - DATA_Y_IN : 
                         QUAD_IN == 2'b10 ? 0 - DATA_X_IN : DATA_Y_IN); 

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_x_trans_reg(.D(DATA_X_TRANS),.Q(DATA_X_TRANS_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_y_trans_reg(.D(DATA_Y_TRANS),.Q(DATA_Y_TRANS_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  and inst_ce_and_rdy(CE_AND_RDY, CE, RDY_INT_VECT[2]);

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_x_reg(.D(DATA_X_TRANS_REG),.Q(DATA_X_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE_AND_RDY));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_y_reg(.D(DATA_Y_TRANS_REG),.Q(DATA_Y_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE_AND_RDY));

  // Generate RDY if p_has_rdy is Selected
  assign RDY_INT_VECT[0] = RDY_IN;

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,3)
    inst_rdy_int_vect(.D(RDY_INT_VECT[2 : 0]),.Q(RDY_INT_VECT[3 : 1]),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign RDY_TMP = ((P_HAS_RDY == 1) ? RDY_INT_VECT[3] : 1'bz);
  
  // Generate RFD if p_has_rfd is Selected

  assign RFD_NEXT = (((ND_IN == 0)&&(RFD_REG == 1))||(RFD_IN ==1) ? 1'b1 : 1'b0); 

  lib_fd1i_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,"1")
    inst_rfd_reg(.D(RFD_NEXT),.Q(RFD_REG),.CLK(CLK),.AINIT(ACLR),
                        .SINIT(SCLR), .CE(CE));

  assign RFD_TMP = ((P_HAS_RFD==0) ? 1'bz : (P_ARCHITECTURE == `C_PARA_ARCH) ? 1'b1 : RFD_REG);
                  
  assign DATA_X_OUT = DATA_X_REG;
  assign DATA_Y_OUT = DATA_Y_REG;
  assign RDY_OUT = RDY_TMP;
  assign RFD_OUT = RFD_TMP;

endmodule //cordic_out_format_rotate_v1_0_v 

module cordic_out_format_translate_v1_0_v(DATA_X_IN, PHASE_IN,DATA_X_OUT,PHASE_OUT,
         QUAD_IN, ND_IN, RDY_IN, RDY_OUT, RFD_IN, RFD_OUT,CLK,ACLR,SCLR,CE);
  parameter P_ARCHITECTURE = `C_PARA_ARCH;
  parameter P_DATA_WIDTH = 16;
  parameter P_ENABLE_RLOCS = 1;
  parameter P_HAS_ACLR = 0;
  parameter P_HAS_CE = 0;
  parameter P_HAS_RDY = 0;
  parameter P_HAS_RFD = 0;
  parameter P_HAS_SCLR = 0;
  parameter P_PHASE_FORMAT = 0;//C_FORMAT_RAD

  input [P_DATA_WIDTH-1 : 0] DATA_X_IN;
  input [P_DATA_WIDTH-1 : 0] PHASE_IN;
  output [P_DATA_WIDTH-1 : 0] DATA_X_OUT;
  output [P_DATA_WIDTH-1 : 0] PHASE_OUT;
  input [1 : 0] QUAD_IN;
  input ND_IN;
  input RDY_IN;
  output RDY_OUT;
  input RFD_IN;
  output RFD_OUT;
  input CLK;
  input ACLR;
  input SCLR;
  input CE;

  parameter P_NEG_PI_CONST = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ? 
              `C_NEG_PI_RADS_CONST : `C_NEG_PI_JRADS_CONST);
  parameter P_NEG_PI_2_4_CONST = ((P_PHASE_FORMAT == `C_FORMAT_RADS) ? 
              `C_NEG_PI_2_4_RADS_CONST : `C_NEG_PI_2_4_JRADS_CONST);
  parameter P_MAX_ROM_WIDTH = `C_MAX_ROM_WIDTH;

  wire [P_DATA_WIDTH-1 : 0]PHASE_ROT;
  wire [P_DATA_WIDTH-1 : 0]PHASE_ROT_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_X_REG;
  wire [P_DATA_WIDTH-1 : 0]DATA_X_TRANS;
  wire [P_DATA_WIDTH-1 : 0]PHASE_IN_REG;
  wire [P_DATA_WIDTH-1 : 0]PHASE_REG;
  wire [P_DATA_WIDTH-1 : 0]PHASE_TRANS;
  wire PHA_ADD_NSUB;
  wire PHA_ADD_NSUB_REG;
  wire [3 : 0]RDY_INT_VECT;
  wire RDY_TMP;
  wire RFD_NEXT;
  wire RFD_COMB;
  wire RFD_REG;
  wire RFD_TMP;
  wire CE_AND_RDY;

  //generate translated coordinates
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_x_reg(.D(DATA_X_IN),.Q(DATA_X_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_data_x_trans(.D(DATA_X_REG),.Q(DATA_X_TRANS),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE_AND_RDY));

  assign PHASE_ROT = (QUAD_IN == 2'b00 ? P_NEG_PI_CONST[P_MAX_ROM_WIDTH-1:P_MAX_ROM_WIDTH-P_DATA_WIDTH] : 
                      QUAD_IN == 2'b11 ? {P_DATA_WIDTH{1'b0}}:P_NEG_PI_2_4_CONST[P_MAX_ROM_WIDTH-1:P_MAX_ROM_WIDTH-P_DATA_WIDTH]); 
  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,P_DATA_WIDTH)
    inst_phase_rot_reg(.D(PHASE_ROT),.Q(PHASE_ROT_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_phase_in_reg(.D(PHASE_IN),.Q(PHASE_IN_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign PHA_ADD_NSUB=((QUAD_IN[1]==1'b1)||((QUAD_IN[0]==1'b0)&&(PHASE_IN[P_DATA_WIDTH-1]==1'b0)) 
                       ? 1'b1 : 1'b0);

  lib_fd1_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR)
    inst_pha_add_nsub_reg(.D(PHA_ADD_NSUB),.Q(PHA_ADD_NSUB_REG),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign PHASE_REG = ((PHA_ADD_NSUB_REG == 1'b1) ? PHASE_IN_REG + PHASE_ROT_REG : 
                                                   PHASE_IN_REG - PHASE_ROT_REG);

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_DATA_WIDTH)
    inst_phase_trans(.D(PHASE_REG),.Q(PHASE_TRANS),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE_AND_RDY));

  and inst_ce_and_rdy(CE_AND_RDY, CE, RDY_INT_VECT[2]);

  // Generate RDY if p_has_rdy is Selected
  assign RDY_INT_VECT[0] = RDY_IN;

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,3)
    inst_rdy_int_vect(.D(RDY_INT_VECT[2 : 0]),.Q(RDY_INT_VECT[3 : 1]),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign RDY_TMP = (P_HAS_RDY == 1 ? RDY_INT_VECT[3] : 1'bz);
  
  // Generate RFD if p_has_rfd is Selected

  assign RFD_NEXT = (((ND_IN == 0)&&(RFD_REG == 1))||(RFD_IN ==1) ? 1'b1 : 1'b0); 

  lib_fd1i_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR,"1")
    inst_rfd_reg(.D(RFD_NEXT),.Q(RFD_REG),.CLK(CLK),.AINIT(ACLR),
                        .SINIT(SCLR), .CE(CE));

  assign RFD_TMP = ((P_HAS_RFD==0) ? 1'bz : (P_ARCHITECTURE == `C_PARA_ARCH) ? 1'b1 : RFD_REG);

  assign DATA_X_OUT = DATA_X_TRANS;
  assign PHASE_OUT = PHASE_TRANS;
  assign RDY_OUT = RDY_TMP;
  assign RFD_OUT = RFD_TMP;

endmodule //cordic_out_format_translate_v1_0_v 

module cordic_rotate_v1_0_v(PHASE_IN, DATA_X_INIT, DATA_Y_INIT, ND, DATA_X_OUT, 
         DATA_Y_OUT, RDY, RFD, CLK, ACLR, SCLR, CE);
  parameter P_ARCHITECTURE = `C_PARA_ARCH; 
  parameter P_CORDIC_FUNCT = `C_F_ROTATE;
  parameter P_DATA_EXTEND = 5;
  parameter P_DATA_WIDTH = 32;
  parameter P_ENABLE_RLOCS = 1;
  parameter P_HAS_ACLR = 0;
  parameter P_HAS_CE = 0;
  parameter P_HAS_RDY = 0;
  parameter P_HAS_RFD = 0;
  parameter P_HAS_SCLR = 0;
  parameter P_PHASE_FORMAT = `C_FORMAT_RADS;
  parameter P_PIPELINE_MODE = `C_PIPE_MAX;
  parameter P_REG_INPUTS = 0;
  parameter P_REPLICATIONS = `C_REPL_NONE;
  parameter P_ROUND_MODE = `C_ROUND_POS_NEG_INF;
  parameter P_SCALE_COMP = `C_SCALE_NONE;

  input [P_DATA_WIDTH-1 : 0] PHASE_IN;
  input [P_DATA_WIDTH-1 : 0] DATA_X_INIT;
  input [P_DATA_WIDTH-1 : 0] DATA_Y_INIT;
  input ND;
  output [P_DATA_WIDTH-1 : 0] DATA_X_OUT;
  output [P_DATA_WIDTH-1 : 0] DATA_Y_OUT;
  output RDY;
  output RFD;
  input CLK;
  input ACLR;
  input SCLR;
  input CE;

  wire [P_DATA_WIDTH-1 : 0]DATA_X_FIN;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_FIN;
  wire [P_DATA_WIDTH-1 : 0]PHASE_FIN;
  wire [`C_CTRL_WIDTH_F_ROTATE-1 : 0]CONTROL_FIN;
  wire [`C_CTRL_WIDTH_F_ROTATE-1 : 0]CONTROL_INT;
  wire [P_DATA_WIDTH-1 : 0]DUMMY_PHASE_OUT;
  wire [P_DATA_WIDTH-1 : 0]DATA_X_INT;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_INT;
  wire [P_DATA_WIDTH-1 : 0]RDY_INT;
  wire RDY_TMP;
  wire ENG_MODE_SIG;

  cordic_inp_format_rotate_v1_0_v #(P_CORDIC_FUNCT, P_DATA_WIDTH, P_ENABLE_RLOCS, 
           P_HAS_ACLR,P_HAS_CE, P_HAS_SCLR, P_PHASE_FORMAT, P_REG_INPUTS)
    inst_cordic_inp_format_rotate(.DATA_X_IN(DATA_X_INIT), .DATA_Y_IN(DATA_Y_INIT), 
      .PHASE_IN(PHASE_IN), .DATA_X_OUT(DATA_X_FIN),.DATA_Y_OUT(DATA_Y_FIN),
      .PHASE_OUT(PHASE_FIN), .QUAD_OUT(CONTROL_FIN[3:2]), .ND_IN(ND), .ND_OUT(CONTROL_FIN[0]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

  assign ENG_MODE_SIG = `C_EM_ROTATIONAL;

  cordic_eng_v1_0_v #(P_ARCHITECTURE, P_CORDIC_FUNCT, `C_CTRL_WIDTH_F_ROTATE,
    P_DATA_EXTEND, P_DATA_WIDTH, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR,
    P_PHASE_FORMAT, P_REPLICATIONS, P_ROUND_MODE, P_SCALE_COMP)
  inst_cordic_eng(.ENGINE_MODE(ENG_MODE_SIG), .DATA_X_IN(DATA_X_FIN), 
    .DATA_Y_IN(DATA_Y_FIN), .PHASE_IN(PHASE_FIN), .DATA_X_OUT(DATA_X_INT),
    .DATA_Y_OUT(DATA_Y_INT), .PHASE_OUT(DUMMY_PHASE_OUT), .CTRL_VECT_IN(CONTROL_FIN),
    .CTRL_VECT_OUT(CONTROL_INT), .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

  cordic_out_format_rotate_v1_0_v #(P_ARCHITECTURE,P_DATA_WIDTH, P_ENABLE_RLOCS, 
    P_HAS_ACLR, P_HAS_CE, P_HAS_RDY, P_HAS_RFD, P_HAS_SCLR)
  inst_cordic_out_format_rotate(.DATA_X_IN(DATA_X_INT),.DATA_Y_IN(DATA_Y_INT), 
    .DATA_X_OUT(DATA_X_OUT), .DATA_Y_OUT(DATA_Y_OUT), .QUAD_IN(CONTROL_INT[3:2]),
    .ND_IN(ND), .RDY_IN(CONTROL_INT[0]), .RDY_OUT(RDY), 
    .RFD_IN(CONTROL_INT[1]), .RFD_OUT(RFD), .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

endmodule //cordic_rotate_v1_0_v 

module cordic_translate_v1_0_v(DATA_X_IN, DATA_Y_IN, ND, DATA_X_OUT, PHASE_OUT, 
         RDY, RFD, CLK, ACLR, SCLR, CE);
  parameter P_ARCHITECTURE = `C_PARA_ARCH; 
  parameter P_CORDIC_FUNCT = `C_F_TRANSLATE;
  parameter P_DATA_EXTEND = 5;
  parameter P_DATA_WIDTH = 32;
  parameter P_ENABLE_RLOCS = 1;
  parameter P_HAS_ACLR = 0;
  parameter P_HAS_CE = 0;
  parameter P_HAS_RDY = 0;
  parameter P_HAS_RFD = 0;
  parameter P_HAS_SCLR = 0;
  parameter P_PHASE_FORMAT = `C_FORMAT_RADS;
  parameter P_PIPELINE_MODE = `C_PIPE_MAX;
  parameter P_REG_INPUTS = 0;
  parameter P_REPLICATIONS = `C_REPL_NONE;
  parameter P_ROUND_MODE = `C_ROUND_POS_NEG_INF;
  parameter P_SCALE_COMP = `C_SCALE_NONE;

  input [P_DATA_WIDTH-1 : 0] DATA_X_IN;
  input [P_DATA_WIDTH-1 : 0] DATA_Y_IN;
  input ND;
  output [P_DATA_WIDTH-1 : 0] DATA_X_OUT;
  output [P_DATA_WIDTH-1 : 0] PHASE_OUT;
  output RDY;
  output RFD;
  input CLK;
  input ACLR;
  input SCLR;
  input CE;

  wire [P_DATA_WIDTH-1 : 0]DATA_X_FIN;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_FIN;
  wire [P_DATA_WIDTH-1 : 0]PHASE_FIN;
  wire [P_DATA_WIDTH-1 : 0]DATA_X_INT;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_INT;
  wire [P_DATA_WIDTH-1 : 0]PHASE_INT;
  wire [P_DATA_WIDTH-1 : 0]DATA_X_FOUT;
  wire [P_DATA_WIDTH-1 : 0]DATA_Y_FOUT;
  wire [P_DATA_WIDTH-1 : 0]PHASE_FOUT;
  wire [`C_CTRL_WIDTH_F_ROTATE-1 : 0]CONTROL_FIN;
  wire [`C_CTRL_WIDTH_F_ROTATE-1 : 0]CONTROL_INT;
  wire [P_DATA_WIDTH-1 : 0]RDY_INT;
  wire RDY_TMP;
  wire ENG_MODE_SIG;

  assign PHASE_FIN = {P_DATA_WIDTH{1'b0}};

  cordic_inp_format_translate_v1_0_v #(P_CORDIC_FUNCT, P_DATA_WIDTH, P_ENABLE_RLOCS, 
           P_HAS_ACLR,P_HAS_CE, P_HAS_SCLR, P_PHASE_FORMAT, P_REG_INPUTS)
    inst_cordic_inp_format_translate(.DATA_X_IN(DATA_X_IN), .DATA_Y_IN(DATA_Y_IN), 
      .DATA_X_OUT(DATA_X_FIN),.DATA_Y_OUT(DATA_Y_FIN),
      .QUAD_OUT(CONTROL_FIN[3:2]), .ND_IN(ND), .ND_OUT(CONTROL_FIN[0]), 
      .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

  assign ENG_MODE_SIG = `C_EM_TRANSLATION;

  cordic_eng_v1_0_v #(P_ARCHITECTURE, P_CORDIC_FUNCT, `C_CTRL_WIDTH_F_TRANSLATE,
    P_DATA_EXTEND, P_DATA_WIDTH, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR,
    P_PHASE_FORMAT, P_REPLICATIONS, P_ROUND_MODE, P_SCALE_COMP)
  inst_cordic_eng(.ENGINE_MODE(ENG_MODE_SIG), .DATA_X_IN(DATA_X_FIN), 
    .DATA_Y_IN(DATA_Y_FIN), .PHASE_IN(PHASE_FIN), .DATA_X_OUT(DATA_X_INT),
    .DATA_Y_OUT(DATA_Y_INT), .PHASE_OUT(PHASE_INT), .CTRL_VECT_IN(CONTROL_FIN),
    .CTRL_VECT_OUT(CONTROL_INT), .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

  cordic_out_format_translate_v1_0_v #(P_ARCHITECTURE,P_DATA_WIDTH, P_ENABLE_RLOCS, 
    P_HAS_ACLR, P_HAS_CE, P_HAS_RDY, P_HAS_RFD, P_HAS_SCLR, P_PHASE_FORMAT)
  inst_cordic_out_format_translate(.DATA_X_IN(DATA_X_INT),.PHASE_IN(PHASE_INT), 
    .DATA_X_OUT(DATA_X_FOUT), .PHASE_OUT(PHASE_FOUT), .QUAD_IN(CONTROL_INT[3:2]),
    .ND_IN(ND), .RDY_IN(CONTROL_INT[0]), .RDY_OUT(RDY), 
    .RFD_IN(CONTROL_INT[1]), .RFD_OUT(RFD), .CLK(CLK), .ACLR(ACLR), .SCLR(SCLR), .CE(CE));

  assign DATA_X_OUT = DATA_X_FOUT;
  assign PHASE_OUT = PHASE_FOUT;

endmodule //cordic_translate_v1_0_v 

module cordic_sqrt_v1_0_v(DATA_IN, SQRT_OUT, ND, RDY, RFD, CLK, ACLR, SCLR, CE);
  parameter P_ENABLE_RLOCS = 1;
  parameter P_HAS_ACLR = 0;
  parameter P_HAS_CE = 0;
  parameter P_HAS_ND = 0;
  parameter P_HAS_RDY = 0;
  parameter P_HAS_RFD = 0;
  parameter P_HAS_SCLR = 0;
  parameter P_INPUT_WIDTH = 16;
  parameter P_OUTPUT_WIDTH = 16;
  parameter P_PIPELINE_MODE = 0;
  parameter P_REG_INPUTS = 0;
  parameter P_ROUND_MODE = `C_ROUND_POS_NEG_INF;

  input [P_INPUT_WIDTH-1 : 0] DATA_IN;
  output [P_OUTPUT_WIDTH-1 : 0] SQRT_OUT;
  input ND;
  output RDY;
  output RFD;
  input CLK;
  input ACLR;
  input SCLR;
  input CE;

  parameter P_DATA_WIDTH_EVEN = P_INPUT_WIDTH+1 + ((P_INPUT_WIDTH+1) % 2);
  parameter P_INPUT_LENGTH = P_INPUT_WIDTH+1;
  parameter P_ROUND_EXT = ((P_ROUND_MODE == `C_ROUND_POS_NEG_INF)||
                           (P_ROUND_MODE == `C_ROUND_POS_INF)) ? 1 : 0;
  parameter P_SQRT_LATENCY_VAR = (P_PIPELINE_MODE == `C_PIPE_NONE)? 1 : P_OUTPUT_WIDTH-1;
  parameter P_SQRT_RND_LATENCY = ((P_ROUND_MODE != 0)&&(P_PIPELINE_MODE != 0)) ? 2 : ((P_ROUND_MODE != 0)&&(P_PIPELINE_MODE == 0))? 1:0;
  parameter P_SQRT_LATENCY = P_SQRT_LATENCY_VAR + P_REG_INPUTS + P_SQRT_RND_LATENCY;
  parameter P_DATA_WIDTH_INT = P_OUTPUT_WIDTH+P_ROUND_EXT;
  parameter P_PRECISION = P_DATA_WIDTH_INT;
  
  function [P_PRECISION-1 : 0] SQRT_UBV;
    input [P_INPUT_LENGTH-1 : 0] DATA_IN;
    reg [P_DATA_WIDTH_EVEN-1 : 0] DATA_EVEN;
    reg [2*P_PRECISION-1 : 0] DATA_INT;
    reg [2*P_PRECISION-1 : 0] REM_INT;
    reg [2*P_PRECISION-1 : 0] REM_NEXT;
    reg [2*P_PRECISION-1 : 0] SQRE_DIFF;
    reg [P_PRECISION-1 : 0] SQRT_INT;
    integer I,J;
  begin
    DATA_EVEN[P_DATA_WIDTH_EVEN-1] = 1'b0;
    DATA_EVEN[P_INPUT_LENGTH-1 : 0] = DATA_IN;
    for (I=2*P_PRECISION-1;I>=0;I=I-1)
    begin
	  if (I <= P_DATA_WIDTH_EVEN-1)
        DATA_INT[2*P_PRECISION-1-I] = DATA_EVEN[P_DATA_WIDTH_EVEN-1-I];
      else
        DATA_INT[2*P_PRECISION-1-I] = 1'b0;
    end
    SQRE_DIFF = {({(2*P_PRECISION-1){1'b0}}) , 1'b1};
    REM_INT = {2*P_PRECISION{1'b0}};
    REM_NEXT = {2*P_PRECISION{1'b0}};
    SQRT_INT = {P_PRECISION{1'b0}};
    for (I=P_PRECISION-1;I>=0;I=I-1)
    begin
      for (J=P_PRECISION-2;J>=0;J=J-1)
        REM_INT[J+2] = REM_INT[J];
      REM_INT[1] = DATA_INT[2*I+1];
      REM_INT[0] = DATA_INT[2*I];
      for (J=P_PRECISION-3;J>=0;J=J-1)
        SQRE_DIFF[J+2] = SQRT_INT[J];
      REM_NEXT = REM_INT - SQRE_DIFF;
      for (J=P_PRECISION-2;J>=0;J=J-1)
        SQRT_INT[J+1] = SQRT_INT[J];
      SQRT_INT[0] = 1'b0;
      if (REM_NEXT[P_PRECISION] == 1'b0 )
      begin
        REM_INT = REM_NEXT;
        SQRT_INT[0] = 1'b1;
      end
    end
    SQRT_UBV = SQRT_INT;
  end
  endfunction

  function [P_OUTPUT_WIDTH-1 : 0] RND_UBV;
    input [P_DATA_WIDTH_INT-1 : 0] DATA_IN;
    reg [P_OUTPUT_WIDTH : 0] DATA_INT;
    reg [P_OUTPUT_WIDTH : 0] ONE_INT;
    reg [P_OUTPUT_WIDTH : 0] DATA_RND;
  begin
    DATA_INT = DATA_IN[P_DATA_WIDTH_INT-1 : P_DATA_WIDTH_INT-P_OUTPUT_WIDTH-1];
	if (P_ROUND_MODE == `C_ROUND_TRUNCATE) 
    begin
      DATA_RND = DATA_INT;
    end
    else
    begin
      ONE_INT = {({(P_OUTPUT_WIDTH){1'b0}}) , 1'b1};
      DATA_RND = DATA_INT + ONE_INT;     
    end
    RND_UBV = DATA_RND[P_OUTPUT_WIDTH : 1];
  end
  endfunction

  wire [P_INPUT_WIDTH : 0]DATA_IN_EXT;
  reg [P_DATA_WIDTH_INT-1 : 0]SQRT_TRUNC_ASYNC;
  reg [P_OUTPUT_WIDTH-1 : 0]SQRT_ROUND_ASYNC;
  wire [P_OUTPUT_WIDTH-1 : 0]SQRT_ROUND;
  wire [P_OUTPUT_WIDTH-1 : 0]SQRT_TMP;
  wire ACLR_INT;
  wire CE_INT;
  wire SCLR_INT;
  wire [0:0] ND_INT;
  wire [0:0] RDY_INT;
  wire RDY_TMP;
  wire CE_AND_RDY;

  assign ACLR_INT = (P_HAS_ACLR == 1) ? ACLR : 1'b0;
  assign CE_INT = (P_HAS_CE == 1) ? CE : 1'b1;
  assign SCLR_INT = (P_HAS_SCLR == 1) ? SCLR : 1'b0;
  assign ND_INT[0] = (P_HAS_ND == 1) ? ND : 1'b1;

  assign DATA_IN_EXT = {DATA_IN, 1'b0};

  always @(DATA_IN_EXT)
  begin
    SQRT_TRUNC_ASYNC = SQRT_UBV(DATA_IN_EXT);
  end

  always @(SQRT_TRUNC_ASYNC)
  begin
    SQRT_ROUND_ASYNC = RND_UBV(SQRT_TRUNC_ASYNC);
  end

  //P_DEPTH, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, P_WIDTH
  lib_fifo_cordic_v1_0_v #(P_SQRT_LATENCY-1, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, P_OUTPUT_WIDTH)
    inst_sqrt_tmp(.D(SQRT_ROUND_ASYNC), .Q(SQRT_ROUND), .CLK(CLK), .ACLR(ACLR_INT), .SCLR(SCLR_INT), .CE(CE_INT));

  //P_DEPTH, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, P_WIDTH
  lib_fifo_cordic_v1_0_v #(P_SQRT_LATENCY-1, P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_SCLR, 1)
    inst_rdy_int(.D(ND_INT), .Q(RDY_INT), .CLK(CLK), .ACLR(ACLR_INT), .SCLR(SCLR_INT), .CE(CE_INT));

  assign CE_AND_RDY = (CE & RDY_INT);

  lib_fd_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,1,P_HAS_SCLR,P_OUTPUT_WIDTH)
    inst_rdy_int_vect(.D(SQRT_ROUND),.Q(SQRT_TMP),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE_AND_RDY));

  lib_fd1_cordic_v1_0_v #(P_ENABLE_RLOCS,P_HAS_ACLR,P_HAS_CE,P_HAS_SCLR)
    inst_nd_reg(.D(RDY_INT[0]),.Q(RDY_TMP),.CLK(CLK),.ACLR(ACLR),
                        .SCLR(SCLR), .CE(CE));

  assign RDY = (P_HAS_RDY == 1) ? RDY_TMP : 1'bz;
  assign RFD = (P_HAS_RFD == 1) ? 1'b1 : 1'bz;
  assign SQRT_OUT = SQRT_TMP;

endmodule //cordic_sqrt_v1_0_v 

module cordic_main_v1_0_v(X_IN, Y_IN, PHASE_IN, ND, X_OUT, 
         Y_OUT, PHASE_OUT, RDY, RFD, CLK, ACLR, SCLR, CE);

  parameter C_ARCHITECTURE = `C_PARA_ARCH; 
  parameter C_CORDIC_FUNCT = `C_F_ROTATE;
  parameter C_ENABLE_RLOCS = 1;
  parameter C_HAS_ACLR = 0;
  parameter C_HAS_CE = 0;
  parameter C_HAS_ND = 1;
  parameter C_HAS_RDY = 0;
  parameter C_HAS_RFD = 0;
  parameter C_HAS_SCLR = 0;
  parameter C_INPUT_WIDTH = 32;
  parameter C_MIF_FILE_PREFIX = "cor1";
  parameter C_OUTPUT_WIDTH = 32;
  parameter C_PHASE_FORMAT = `C_FORMAT_RADS;
  parameter C_PIPELINE_MODE = `C_PIPE_MAX;
  parameter C_REG_INPUTS = 0;
  parameter C_REPLICATIONS = `C_REPL_NONE;
  parameter C_ROUND_MODE = `C_ROUND_POS_NEG_INF;
  parameter C_SCALE_COMP = `C_SCALE_NONE;

  input [C_INPUT_WIDTH-1 : 0] X_IN;
  input [C_INPUT_WIDTH-1 : 0] Y_IN;
  input [C_INPUT_WIDTH-1 : 0] PHASE_IN;
  input ND;
  output [C_OUTPUT_WIDTH-1 : 0] X_OUT;
  output [C_OUTPUT_WIDTH-1 : 0] Y_OUT;
  output [C_OUTPUT_WIDTH-1 : 0] PHASE_OUT;
  output RDY;
  output RFD;
  input CLK;
  input ACLR;
  input SCLR;
  input CE;

  wire ND_INT;
  wire CLK_INT;
  wire CE_INT;
  wire ACLR_INT;
  wire SCLR_INT;

  reg [C_OUTPUT_WIDTH-1 :0] DATA_X_INT;
  reg [C_OUTPUT_WIDTH-1 :0] DATA_Y_INT;
  reg [C_OUTPUT_WIDTH-1 :0] PHASE_INT;

  wire [C_OUTPUT_WIDTH-1 :0] DATA_X_INT_ROTATE;
  wire [C_OUTPUT_WIDTH-1 :0] DATA_Y_INT_ROTATE;
  wire [C_OUTPUT_WIDTH-1 :0] PHASE_INT_ROTATE;

  wire [C_OUTPUT_WIDTH-1 :0] DATA_X_INT_TRANSLATE;
  wire [C_OUTPUT_WIDTH-1 :0] DATA_Y_INT_TRANSLATE;
  wire [C_OUTPUT_WIDTH-1 :0] PHASE_INT_TRANSLATE;

  wire [C_OUTPUT_WIDTH-1 :0] DATA_X_ROTATE;
  wire [C_OUTPUT_WIDTH-1 :0] DATA_Y_ROTATE;
  wire RDY_ROTATE;
  wire RFD_ROTATE;
  wire [C_OUTPUT_WIDTH-1 :0] DATA_X_TRANSLATE;
  wire [C_OUTPUT_WIDTH-1 :0] PHASE_TRANSLATE;
  wire RDY_TRANSLATE;
  wire RFD_TRANSLATE;
  wire [C_OUTPUT_WIDTH-1 :0] DATA_X_SQRT;
  wire RDY_SQRT;
  wire RFD_SQRT;

  wire [C_OUTPUT_WIDTH-1 :0] ZERO_VECT;

  integer II;

  parameter P_ATAN_RADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000100000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000100000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000100000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000100000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000100000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000100000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000100000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000100000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000100000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000100000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000100000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000100000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000100000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000100000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000011111111111111111111111111111111111111111111101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000111111111111111111111111111111111111111111101011,
  `C_MAX_ROM_WIDTH'b000000000000000000000001111111111111111111111111111111111111111101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000000011111111111111111111111111111111111111101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000000111111111111111111111111111111111111101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000001111111111111111111111111111111111101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000011111111111111111111111111111111101010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000111111111111111111111111111111101010101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000001111111111111111111111111111101010101010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000011111111111111111111111111101010101010101010101010101110,
  `C_MAX_ROM_WIDTH'b000000000000000111111111111111111111111101010101010101010101010110111100,
  `C_MAX_ROM_WIDTH'b000000000000001111111111111111111111101010101010101010101011011101110111,
  `C_MAX_ROM_WIDTH'b000000000000011111111111111111111101010101010101010101101110111011101111,
  `C_MAX_ROM_WIDTH'b000000000000111111111111111111101010101010101010110111011101110111010101,
  `C_MAX_ROM_WIDTH'b000000000001111111111111111101010101010101011011101110111011011100101001,
  `C_MAX_ROM_WIDTH'b000000000011111111111111101010101010101101110111011101010010111001011010,
  `C_MAX_ROM_WIDTH'b000000000111111111111101010101010110111011101101110010100110101011011110,
  `C_MAX_ROM_WIDTH'b000000001111111111101010101011011101110101001011101100010010010101000010,
  `C_MAX_ROM_WIDTH'b000000011111111101010101101110110111001011001111110111101001110001101101,
  `C_MAX_ROM_WIDTH'b000000111111101010110111010100110101010110000101111011011011100011001011,
  `C_MAX_ROM_WIDTH'b000001111101011011011101011111100100101100100000001101110101100010101011,
  `C_MAX_ROM_WIDTH'b000011101101011000110011100000101011000011011101101001111100010010000110};
  
  parameter P_ATAN_JRADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000010100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000101000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001010001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010100011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000101000110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001010001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010100011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000101000101111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001010001011111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010100010111110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000101000101111101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001010001011111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010100010111110011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000101000101111100110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001010001011111001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010100010111110011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000101000101111100110000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001010001011111001100001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010100010111110011000001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000101000101111100110000011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001010001011111001100000111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010100010111110011000001101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000101000101111100110000011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001010001011111001100000110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010100010111110011000001101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000101000101111100110000011011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001010001011111001100000110110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010100010111110011000001101101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000101000101111100110000011011011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001010001011111001100000110110111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010100010111110011000001101101110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000101000101111100110000011011011100101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001010001011111001100000110110111001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010100010111110011000001101101110010011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000101000101111100110000011011011100100111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001010001011111001100000110110111001001110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010100010111110011000001101101110010011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000101000101111100110000011011011100100111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001010001011111001100000110110111001001110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010100010111110011000001101101110010011100100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000101000101111100110000011011011100100111001000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001010001011111001100000110110111001001110010000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010100010111110011000001101101110010011100011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000101000101111100110000011011011100100111000001101,
  `C_MAX_ROM_WIDTH'b000000000000000000000001010001011111001100000110110111001001101011010101,
  `C_MAX_ROM_WIDTH'b000000000000000000000010100010111110011000001101101110010010101101111011,
  `C_MAX_ROM_WIDTH'b000000000000000000000101000101111100110000011011011100100000010101111010,
  `C_MAX_ROM_WIDTH'b000000000000000000001010001011111001100000110110111000010111111100001110,
  `C_MAX_ROM_WIDTH'b000000000000000000010100010111110011000001101101101011101001111011101101,
  `C_MAX_ROM_WIDTH'b000000000000000000101000101111100110000011011010101110100100010001010110,
  `C_MAX_ROM_WIDTH'b000000000000000001010001011111001100000110110000010111001011110010010001,
  `C_MAX_ROM_WIDTH'b000000000000000010100010111110011000001100110111111110110001100001100110,
  `C_MAX_ROM_WIDTH'b000000000000000101000101111100110000010100101010000000110010110111000010,
  `C_MAX_ROM_WIDTH'b000000000000001010001011111001100000000000100100011011101001111011011010,
  `C_MAX_ROM_WIDTH'b000000000000010100010111110010111010111011001100001010101100110111101110,
  `C_MAX_ROM_WIDTH'b000000000000101000101111100101001101000110110100001100001100110110111111,
  `C_MAX_ROM_WIDTH'b000000000001010001011111000101010100010001110101000100001010101110101000,
  `C_MAX_ROM_WIDTH'b000000000010100010111101100001111001011100001010000010011000101001100001,
  `C_MAX_ROM_WIDTH'b000000000101000101110101111110000101011001000001000110001001111000010101,
  `C_MAX_ROM_WIDTH'b000000001010001011000011010100001100001110010110001001101011101100110000,
  `C_MAX_ROM_WIDTH'b000000010100010001000100011101010000011101110111011001101000011011100000,
  `C_MAX_ROM_WIDTH'b000000100111111011001110000101101101011110111000111001111010001101111000,
  `C_MAX_ROM_WIDTH'b000001001011100100000001010001110110011101111100110000100001111010111100};

  parameter P_ATANH_RADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000100000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000100000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000100000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000100000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000100000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000100000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000100000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000100000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000100000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000100000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000100000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000100000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000100000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000100000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010000000000000000000000000000000000000000000000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000100000000000000000000000000000000000000000000011,
  `C_MAX_ROM_WIDTH'b000000000000000000000001000000000000000000000000000000000000000000010101,
  `C_MAX_ROM_WIDTH'b000000000000000000000010000000000000000000000000000000000000000010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000000100000000000000000000000000000000000000010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000001000000000000000000000000000000000000010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000000010000000000000000000000000000000000010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000000100000000000000000000000000000000010101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000001000000000000000000000000000000010101010101010101010101,
  `C_MAX_ROM_WIDTH'b000000000000000010000000000000000000000000000010101010101010101010101011,
  `C_MAX_ROM_WIDTH'b000000000000000100000000000000000000000000010101010101010101010101011000,
  `C_MAX_ROM_WIDTH'b000000000000001000000000000000000000000010101010101010101010101100010001,
  `C_MAX_ROM_WIDTH'b000000000000010000000000000000000000010101010101010101010110001000100010,
  `C_MAX_ROM_WIDTH'b000000000000100000000000000000000010101010101010101011000100010001000100,
  `C_MAX_ROM_WIDTH'b000000000001000000000000000000010101010101010101100010001000100010010010,
  `C_MAX_ROM_WIDTH'b000000000010000000000000000010101010101010110001000100010001010110100011,
  `C_MAX_ROM_WIDTH'b000000000100000000000000010101010101011000100010001001000110101101001110,
  `C_MAX_ROM_WIDTH'b000000001000000000000010101010101100010001000101011010001110010011000111,
  `C_MAX_ROM_WIDTH'b000000010000000000010101010110001000100100011010111011100010010010110100,
  `C_MAX_ROM_WIDTH'b000000100000000010101011000100010101101001101110101101011001101110010110,
  `C_MAX_ROM_WIDTH'b000001000000010101100010010001110010011110101011101111011101101001100101,
  `C_MAX_ROM_WIDTH'b000010000010110001010111011111010100000010001010001010001101001110010100,
  `C_MAX_ROM_WIDTH'b000100011001001111101010011110101010110100000011000010100111110011111001};

  parameter P_ATANH_JRADS = { 
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000010100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000000101000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000001010001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000010100011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000000101000110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000001010001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000010100011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000000101000101111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000001010001011111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000010100010111110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000000101000101111101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000001010001011111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000010100010111110011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000000101000101111100110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000001010001011111001100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000010100010111110011000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000000101000101111100110000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000001010001011111001100000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000010100010111110011000001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000000101000101111100110000011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000001010001011111001100000111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000010100010111110011000001101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000000101000101111100110000011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000001010001011111001100000110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000010100010111110011000001101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000000101000101111100110000011011011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000001010001011111001100000110110111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000010100010111110011000001101101110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000000101000101111100110000011011011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000001010001011111001100000110110111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000010100010111110011000001101101110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000000101000101111100110000011011011100101,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000001010001011111001100000110110111001010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000010100010111110011000001101101110010011,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000000101000101111100110000011011011100100111,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000001010001011111001100000110110111001001110,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000010100010111110011000001101101110010011100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000000101000101111100110000011011011100100111001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000001010001011111001100000110110111001001110010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000010100010111110011000001101101110010011100100,
  `C_MAX_ROM_WIDTH'b000000000000000000000000000101000101111100110000011011011100100111001000,
  `C_MAX_ROM_WIDTH'b000000000000000000000000001010001011111001100000110110111001001110010010,
  `C_MAX_ROM_WIDTH'b000000000000000000000000010100010111110011000001101101110010011100101001,
  `C_MAX_ROM_WIDTH'b000000000000000000000000101000101111100110000011011011100100111001111010,
  `C_MAX_ROM_WIDTH'b000000000000000000000001010001011111001100000110110111001001111000111010,
  `C_MAX_ROM_WIDTH'b000000000000000000000010100010111110011000001101101110010100011010100101,
  `C_MAX_ROM_WIDTH'b000000000000000000000101000101111100110000011011011100101101111011000111,
  `C_MAX_ROM_WIDTH'b000000000000000000001010001011111001100000110110111010000100100101110100,
  `C_MAX_ROM_WIDTH'b000000000000000000010100010111110011000001101101111001001111001000011000,
  `C_MAX_ROM_WIDTH'b000000000000000000101000101111100110000011011100011011001101110110110100,
  `C_MAX_ROM_WIDTH'b000000000000000001010001011111001100000110111101111100011000011110000101,
  `C_MAX_ROM_WIDTH'b000000000000000010100010111110011000001110100100101000010111000000000101,
  `C_MAX_ROM_WIDTH'b000000000000000101000101111100110000100010001111001101011110101010111001,
  `C_MAX_ROM_WIDTH'b000000000000001010001011111001100001101101001110000001001000011010010001,
  `C_MAX_ROM_WIDTH'b000000000000010100010111110011001000100000011000110110100000101110110010,
  `C_MAX_ROM_WIDTH'b000000000000101000101111100110111001110000011001101010101011111010010101,
  `C_MAX_ROM_WIDTH'b000000000001010001011111010010111001011110100000111000011000111110011000,
  `C_MAX_ROM_WIDTH'b000000000010100010111111001110100011000001101001001111110100011101111100,
  `C_MAX_ROM_WIDTH'b000000000101000110000011100011010010000110010010000101010101101000101111,
  `C_MAX_ROM_WIDTH'b000000001010001100101111111101110100100111000101100100011110011011011100,
  `C_MAX_ROM_WIDTH'b000000010100011110101001101111110000110110010010110011101110001001010111,
  `C_MAX_ROM_WIDTH'b000000101001101000000011010110000100100011111110110010011001011000110100,
  `C_MAX_ROM_WIDTH'b000001011001100001011110001000110111101101011100101111010000001101101110};


  parameter ATAN_ROM_TRIG = (C_PHASE_FORMAT == `C_FORMAT_RADS)?
              P_ATAN_RADS : P_ATAN_JRADS;
  parameter ATAN_ROM_HYP = (C_PHASE_FORMAT == `C_FORMAT_RADS)?
              P_ATANH_RADS : P_ATANH_JRADS;
  parameter ATAN_ROM_DATA = ( (C_CORDIC_FUNCT == `C_F_SIN_COS) ||
                              (C_CORDIC_FUNCT == `C_F_ATAN) ||
                              (C_CORDIC_FUNCT == `C_F_ROTATE) ||
                              (C_CORDIC_FUNCT == `C_F_TRANSLATE) )?
			  ATAN_ROM_TRIG : ATAN_ROM_HYP;

  parameter C_INV_CORDIC_SCALE_TRIG_CONST_SLV = 
  `C_MAX_ROM_WIDTH'b001101101111011001010110110001011010011100011001010111000011000100100000;
  parameter C_INV_CORDIC_SCALE_HYP_CONST_SLV =
  `C_MAX_ROM_WIDTH'b001001010000011100010010000101010101001001101101011010000001000111111111; 

  parameter P_INV_SCALE = ( (C_CORDIC_FUNCT == `C_F_SIN_COS) ||
                              (C_CORDIC_FUNCT == `C_F_ATAN) ||
                              (C_CORDIC_FUNCT == `C_F_ROTATE) ||
                              (C_CORDIC_FUNCT == `C_F_TRANSLATE) )?
			  C_INV_CORDIC_SCALE_TRIG_CONST_SLV : C_INV_CORDIC_SCALE_HYP_CONST_SLV;

  parameter P_DATA_WIDTH = C_OUTPUT_WIDTH;

  parameter P_DATA_EXTEND = ((P_DATA_WIDTH <= 8) ? 3 : (P_DATA_WIDTH <= 16)? 4 : (P_DATA_WIDTH <= 32)? 5: 6);

  assign ACLR_INT = (C_HAS_ACLR == 1'b0) ? 1'b0 : ACLR;
  assign CE_INT = (C_HAS_CE == 1'b0) ? 1'b1 : CE;
  assign ND_INT = ND;
  assign SCLR_INT = (C_HAS_SCLR == 1'b0) ? 1'b0 : SCLR;

  assign ZERO_VECT = {C_OUTPUT_WIDTH{1'b0}};
  
  always@(X_IN,Y_IN,PHASE_IN)
  begin
    for (II=0;II<C_OUTPUT_WIDTH;II=II+1)
    begin
      if (C_OUTPUT_WIDTH<C_INPUT_WIDTH)
      begin
        DATA_X_INT[II] = X_IN[C_INPUT_WIDTH-C_OUTPUT_WIDTH+II];
        DATA_Y_INT[II] = Y_IN[C_INPUT_WIDTH-C_OUTPUT_WIDTH+II];
        PHASE_INT[II] = PHASE_IN[C_INPUT_WIDTH-C_OUTPUT_WIDTH+II];
      end
      else if (C_OUTPUT_WIDTH==C_INPUT_WIDTH)
      begin
        DATA_X_INT[II] = X_IN[II];
        DATA_Y_INT[II] = Y_IN[II];
        PHASE_INT[II] = PHASE_IN[II];
      end
      else
      begin
        if (II<C_INPUT_WIDTH)
        begin
          DATA_X_INT[C_OUTPUT_WIDTH-1-II] <= X_IN[C_INPUT_WIDTH-1-II];
          DATA_Y_INT[C_OUTPUT_WIDTH-1-II] <= Y_IN[C_INPUT_WIDTH-1-II];
          PHASE_INT[C_OUTPUT_WIDTH-1-II] <= PHASE_IN[C_INPUT_WIDTH-1-II];
        end
		else
        begin
          DATA_X_INT[C_OUTPUT_WIDTH-1-II] <= {1'b0};
          DATA_Y_INT[C_OUTPUT_WIDTH-1-II] <= {1'b0};
          PHASE_INT[C_OUTPUT_WIDTH-1-II] <= {1'b0};
        end
      end
	end
  end

  assign DATA_X_INT_ROTATE=((C_CORDIC_FUNCT==`C_F_SIN_COS)||(C_CORDIC_FUNCT==`C_F_SINH_COSH))?
           P_INV_SCALE[`C_MAX_ROM_WIDTH-1:`C_MAX_ROM_WIDTH-C_OUTPUT_WIDTH] : DATA_X_INT;
  assign DATA_Y_INT_ROTATE=((C_CORDIC_FUNCT==`C_F_SIN_COS)||(C_CORDIC_FUNCT==`C_F_SINH_COSH))?
           ZERO_VECT : DATA_Y_INT;
  assign PHASE_INT_ROTATE=PHASE_INT;

  // P_ARCHITECTURE, P_CORDIC_FUNCT, P_DATA_EXTEND, P_DATA_WIDTH, P_ENABLE_RLOCS,
  // P_HAS_ACLR, P_HAS_CE, P_HAS_RDY, P_HAS_RFD, P_HAS_SCLR, P_PHASE_FORMAT, 
  // P_PIPELINE_MODE, P_REG_INPUTS, P_REPLICATIONS, P_ROUND_MODE, P_SCALE_COMP
  cordic_rotate_v1_0_v #(C_ARCHITECTURE, C_CORDIC_FUNCT, P_DATA_EXTEND, P_DATA_WIDTH, C_ENABLE_RLOCS, 
        C_HAS_ACLR, C_HAS_CE, C_HAS_RDY, C_HAS_RFD, C_HAS_SCLR, C_PHASE_FORMAT, 
        C_PIPELINE_MODE, C_REG_INPUTS, C_REPLICATIONS, C_ROUND_MODE, C_SCALE_COMP)
    inst_cordic_rotate(.PHASE_IN(PHASE_INT_ROTATE), .DATA_X_INIT(DATA_X_INT_ROTATE),
        .DATA_Y_INIT(DATA_Y_INT_ROTATE),.ND(ND_INT),.DATA_X_OUT(DATA_X_ROTATE),
        .DATA_Y_OUT(DATA_Y_ROTATE),.RDY(RDY_ROTATE),.RFD(RFD_ROTATE),.CLK(CLK),
        .ACLR(ACLR_INT),.SCLR(SCLR),.CE(CE_INT)); 

  assign DATA_X_INT_TRANSLATE=DATA_X_INT;
  assign DATA_Y_INT_TRANSLATE=DATA_Y_INT;
  assign PHASE_INT_TRANSLATE=((C_CORDIC_FUNCT==`C_F_ATAN)||(C_CORDIC_FUNCT==`C_F_ATANH))? ZERO_VECT : PHASE_INT;

  // P_ARCHITECTURE, P_CORDIC_FUNCT, P_DATA_EXTEND, P_DATA_WIDTH, P_ENABLE_RLOCS,
  // P_HAS_ACLR, P_HAS_CE, P_HAS_RDY, P_HAS_RFD, P_HAS_SCLR, P_PHASE_FORMAT, 
  // P_PIPELINE_MODE, P_REG_INPUTS, P_REPLICATIONS, P_ROUND_MODE, P_SCALE_COMP
  cordic_translate_v1_0_v #(C_ARCHITECTURE, C_CORDIC_FUNCT, P_DATA_EXTEND, P_DATA_WIDTH, C_ENABLE_RLOCS, 
        C_HAS_ACLR, C_HAS_CE, C_HAS_RDY, C_HAS_RFD, C_HAS_SCLR, C_PHASE_FORMAT, 
        C_PIPELINE_MODE, C_REG_INPUTS, C_REPLICATIONS, C_ROUND_MODE, C_SCALE_COMP)
    inst_cordic_translate(.DATA_X_IN(DATA_X_INT_TRANSLATE),.DATA_Y_IN(DATA_Y_INT_TRANSLATE),
        .ND(ND_INT),.DATA_X_OUT(DATA_X_TRANSLATE),.PHASE_OUT(PHASE_TRANSLATE),
        .RDY(RDY_TRANSLATE),.RFD(RFD_TRANSLATE),.CLK(CLK),
        .ACLR(ACLR_INT),.SCLR(SCLR),.CE(CE_INT)); 

  // P_ENABLE_RLOCS, P_HAS_ACLR, P_HAS_CE, P_HAS_ND,
  // P_HAS_RDY, P_HAS_RFD, P_HAS_SCLR, P_INPUT_WIDTH, 
  // P_OUTPUT_WIDTH, P_PIPELINE_MODE, P_REG_INPUTS, P_ROUND_MODE
  cordic_sqrt_v1_0_v #(C_ENABLE_RLOCS, C_HAS_ACLR, C_HAS_CE, 1, 
         C_HAS_RDY, C_HAS_RFD, C_HAS_SCLR, C_INPUT_WIDTH,
         C_OUTPUT_WIDTH, C_PIPELINE_MODE, C_REG_INPUTS, C_ROUND_MODE)
    inst_cordic_sqrt( .DATA_IN(X_IN),.SQRT_OUT(DATA_X_SQRT),.ND(ND_INT),
        .RDY(RDY_SQRT),.RFD(RFD_SQRT),.CLK(CLK),.ACLR(ACLR_INT),.SCLR(SCLR),.CE(CE_INT));

  assign X_OUT=((C_CORDIC_FUNCT==`C_F_ROTATE)||(C_CORDIC_FUNCT==`C_F_SIN_COS)||
                     (C_CORDIC_FUNCT==`C_F_SINH_COSH))? DATA_X_ROTATE :
               ((C_CORDIC_FUNCT==`C_F_TRANSLATE))? DATA_X_TRANSLATE:
                (C_CORDIC_FUNCT==`C_F_SQRT)? DATA_X_SQRT: {C_OUTPUT_WIDTH{1'bz}};
  assign Y_OUT=((C_CORDIC_FUNCT==`C_F_ROTATE)||(C_CORDIC_FUNCT==`C_F_SIN_COS)||
                (C_CORDIC_FUNCT==`C_F_SINH_COSH))? DATA_Y_ROTATE:{C_OUTPUT_WIDTH{1'bz}};
  assign PHASE_OUT =((C_CORDIC_FUNCT==`C_F_TRANSLATE)||(C_CORDIC_FUNCT==`C_F_ATAN)||
                (C_CORDIC_FUNCT==`C_F_ATANH))? PHASE_TRANSLATE:{C_OUTPUT_WIDTH{1'bz}};
  assign RDY=((C_CORDIC_FUNCT==`C_F_ROTATE)||(C_CORDIC_FUNCT==`C_F_SIN_COS)||
                (C_CORDIC_FUNCT==`C_F_SINH_COSH))?RDY_ROTATE :
			   ((C_CORDIC_FUNCT==`C_F_TRANSLATE)||(C_CORDIC_FUNCT==`C_F_ATAN)||
                (C_CORDIC_FUNCT==`C_F_ATANH))?RDY_TRANSLATE : RDY_SQRT;
  assign RFD=((C_CORDIC_FUNCT==`C_F_ROTATE)||(C_CORDIC_FUNCT==`C_F_SIN_COS)||
                     (C_CORDIC_FUNCT==`C_F_SINH_COSH))?RFD_ROTATE :
			   ((C_CORDIC_FUNCT==`C_F_TRANSLATE)||(C_CORDIC_FUNCT==`C_F_ATAN)||
                (C_CORDIC_FUNCT==`C_F_ATANH))?RFD_TRANSLATE : RFD_SQRT;

endmodule //cordic_main_v1_0_v

`undef C_SET
`undef C_CLEAR
`undef C_OVERRIDE
`undef C_NO_OVERRIDE
`undef C_ADD
`undef C_SUB
`undef C_ADD_SUB
`undef C_SIGNED
`undef C_UNSIGNED
`undef C_PIN
`undef all1s
`undef all0s
`undef allXs
`undef C_F_ROTATE
`undef C_F_TRANSLATE
`undef C_F_SIN_COS
`undef C_F_ATAN
`undef C_F_SINH_COSH
`undef C_F_ATANH
`undef C_F_SQRT
`undef C_F_DEFAULT
`undef C_BSER_ARCH
`undef C_WSER_ARCH
`undef C_PARA_ARCH
`undef C_FORMAT_RADS
`undef C_FORMAT_JRADS
`undef C_ROUND_TRUNCATE
`undef C_ROUND_POS_INF
`undef C_ROUND_POS_NEG_INF
`undef C_SCALE_NONE
`undef C_SCALE_CCM
`undef C_PIPE_NONE
`undef C_PIPE_OPT
`undef C_PIPE_MAX
`undef C_REPL_NONE
`undef C_REPL_OPT
`undef C_REPL_MAX
`undef C_EM_ROTATIONAL
`undef C_EM_TRANSLATION
`undef C_MAX_ROM_WIDTH
`undef C_MAX_ROM_LENGTH
`undef C_CORDIC_IO_CNT
`undef C_WSER_SLICE_OPT
`undef C_CTRL_WIDTH_F_TRANSLATE
`undef C_CTRL_WIDTH_F_ROTATE
`undef C_NEG_PI_RADS_CONST
`undef C_NEG_PI_3_4_RADS_CONST
`undef C_NEG_PI_2_4_RADS_CONST
`undef C_NEG_PI_1_4_RADS_CONST
`undef C_NEG_PI_JRADS_CONST
`undef C_NEG_PI_3_4_JRADS_CONST
`undef C_NEG_PI_2_4_JRADS_CONST
`undef C_NEG_PI_1_4_JRADS_CONST
